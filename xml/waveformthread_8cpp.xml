<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="waveformthread_8cpp" kind="file">
    <compoundname>waveformthread.cpp</compoundname>
    <includes refid="waveformthread_8h" local="yes">waveformthread.h</includes>
    <includes refid="waveformview_8h" local="yes">waveformview.h</includes>
    <includes local="no">qapplication.h</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="2882">
        <label>baseframe.h</label>
        <link refid="baseframe_8h-source"/>
        <childnode refid="2880" relation="include">
        </childnode>
        <childnode refid="2869" relation="include">
        </childnode>
        <childnode refid="2883" relation="include">
        </childnode>
        <childnode refid="2875" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
      </node>
      <node id="2895">
        <label>qregion.h</label>
      </node>
      <node id="2897">
        <label>qfile.h</label>
      </node>
      <node id="2890">
        <label>pair.h</label>
        <link refid="pair_8h-source"/>
        <childnode refid="2891" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2892" relation="include">
        </childnode>
      </node>
      <node id="2873">
        <label>qvaluelist.h</label>
      </node>
      <node id="2879">
        <label>viewwidget.h</label>
        <link refid="viewwidget_8h-source"/>
        <childnode refid="2880" relation="include">
        </childnode>
        <childnode refid="2869" relation="include">
        </childnode>
        <childnode refid="2872" relation="include">
        </childnode>
        <childnode refid="2881" relation="include">
        </childnode>
        <childnode refid="2882" relation="include">
        </childnode>
      </node>
      <node id="2875">
        <label>zoomwindow.h</label>
        <link refid="zoomwindow_8h-source"/>
        <childnode refid="2876" relation="include">
        </childnode>
        <childnode refid="2877" relation="include">
        </childnode>
        <childnode refid="2878" relation="include">
        </childnode>
      </node>
      <node id="2891">
        <label>qstring.h</label>
      </node>
      <node id="2892">
        <label>stdlib.h</label>
      </node>
      <node id="2900">
        <label>kurl.h</label>
      </node>
      <node id="2876">
        <label>qrect.h</label>
      </node>
      <node id="2901">
        <label>stdexcept</label>
      </node>
      <node id="2886">
        <label>array.h</label>
        <link refid="array_8h-source"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
      </node>
      <node id="2881">
        <label>kstatusbar.h</label>
      </node>
      <node id="2869">
        <label>qframe.h</label>
      </node>
      <node id="2874">
        <label>qptrlist.h</label>
      </node>
      <node id="2877">
        <label>qpoint.h</label>
      </node>
      <node id="2868">
        <label>waveformview.h</label>
        <link refid="waveformview_8h-source"/>
        <childnode refid="2869" relation="include">
        </childnode>
        <childnode refid="2870" relation="include">
        </childnode>
        <childnode refid="2871" relation="include">
        </childnode>
        <childnode refid="2872" relation="include">
        </childnode>
        <childnode refid="2873" relation="include">
        </childnode>
        <childnode refid="2874" relation="include">
        </childnode>
        <childnode refid="2875" relation="include">
        </childnode>
        <childnode refid="2879" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
      </node>
      <node id="2888">
        <label>sortabletable.h</label>
        <link refid="sortabletable_8h-source"/>
        <childnode refid="2886" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
      </node>
      <node id="2893">
        <label>clusteruserinformation.h</label>
        <link refid="clusteruserinformation_8h-source"/>
      </node>
      <node id="2903">
        <label>qapplication.h</label>
      </node>
      <node id="2867">
        <label>waveformthread.h</label>
        <link refid="waveformthread_8h-source"/>
        <childnode refid="2868" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
      </node>
      <node id="2866">
        <label>waveformthread.cpp</label>
        <link refid="waveformthread.cpp"/>
        <childnode refid="2867" relation="include">
        </childnode>
        <childnode refid="2868" relation="include">
        </childnode>
        <childnode refid="2903" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
      </node>
      <node id="2904">
        <label>unistd.h</label>
      </node>
      <node id="2902">
        <label>vector</label>
      </node>
      <node id="2883">
        <label>qcursor.h</label>
      </node>
      <node id="2870">
        <label>qpainter.h</label>
      </node>
      <node id="2878">
        <label>math.h</label>
      </node>
      <node id="2880">
        <label>qwidget.h</label>
      </node>
      <node id="2884">
        <label>iostream</label>
      </node>
      <node id="2899">
        <label>qthread.h</label>
      </node>
      <node id="2894">
        <label>qdict.h</label>
      </node>
      <node id="2896">
        <label>qmap.h</label>
      </node>
      <node id="2898">
        <label>qmutex.h</label>
      </node>
      <node id="2871">
        <label>qstyle.h</label>
      </node>
      <node id="2872">
        <label>qpixmap.h</label>
      </node>
      <node id="2887">
        <label>cstring</label>
      </node>
      <node id="2885">
        <label>data.h</label>
        <link refid="data_8h-source"/>
        <childnode refid="2886" relation="include">
        </childnode>
        <childnode refid="2888" relation="include">
        </childnode>
        <childnode refid="2890" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
        <childnode refid="2893" relation="include">
        </childnode>
        <childnode refid="2874" relation="include">
        </childnode>
        <childnode refid="2873" relation="include">
        </childnode>
        <childnode refid="2894" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2896" relation="include">
        </childnode>
        <childnode refid="2897" relation="include">
        </childnode>
        <childnode refid="2898" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2900" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2878" relation="include">
        </childnode>
        <childnode refid="2902" relation="include">
        </childnode>
      </node>
      <node id="2889">
        <label>types.h</label>
        <link refid="types_8h-source"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformthread.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Fri<sp/>Oct<sp/>24<sp/>2003</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2003<sp/>by<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//include<sp/>files<sp/>for<sp/>the<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;waveformthread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;waveformview.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//QT<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qapplication.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//Unix<sp/>include<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformThread::getWaveformInformation(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,<ref refid="classWaveformView_12de039cfeb8d46fa258d6dcf960ded62" kindref="member">WaveformView::PresentationMode</ref><sp/>mode){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/>this-&gt;clusterId<sp/>=<sp/>clusterId;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/>treatSingleCluster<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/>this-&gt;mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/>start();</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformThread::getWaveformInformation(QValueList&lt;int&gt;<sp/>clusterIds,<ref refid="classWaveformView_12de039cfeb8d46fa258d6dcf960ded62" kindref="member">WaveformView::PresentationMode</ref><sp/>mode){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/>this-&gt;clusterIds<sp/>=<sp/>clusterIds;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/>treatSingleCluster<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/>this-&gt;mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/>start();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformThread::run(){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sleepingAmount<sp/>=<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>triggering<sp/>action<sp/>is<sp/>not<sp/>the<sp/>calculation<sp/>of<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>variation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>data<sp/>and<sp/>store<sp/>them<sp/>in<sp/>waveformView.waveformInfoMap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>until<sp/>the<sp/>data<sp/>are<sp/>available.<sp/>The<sp/>status<sp/>can<sp/>be<sp/>READY<sp/>or<sp/>IN_PROCESS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>the<sp/>later<sp/>case,<sp/>an<sp/>other<sp/>thread<sp/>in<sp/>working<sp/>on<sp/>the<sp/>same<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!meanRequested<sp/><sp/>&amp;&amp;<sp/>!haveToStopProcessing){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformView.<ref refid="classWaveformView_1206d4621bb22a053b318a205ea03ca7f" kindref="member">presentationMode</ref><sp/>==<sp/>WaveformView::SAMPLE){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(treatSingleCluster){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>contained<sp/>in<sp/>clusterIds<sp/>before<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterIds.begin();<sp/>iterator<sp/>!=<sp/>clusterIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>for<sp/>one<sp/>cluster<sp/>is<sp/>not<sp/>available,<sp/>skip<sp/>it<sp/>(do<sp/>not<sp/>send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!haveToStopProcessing<sp/>&amp;&amp;<sp/>(data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>)<sp/>==<sp/>Data::IN_PROCESS)){sleep(sleepingAmount);};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformView.<ref refid="classWaveformView_1206d4621bb22a053b318a205ea03ca7f" kindref="member">presentationMode</ref><sp/>==<sp/>WaveformView::TIME_FRAME){<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(treatSingleCluster){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>contained<sp/>in<sp/>clusterIds<sp/>before<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterIds.begin();<sp/>iterator<sp/>!=<sp/>clusterIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>for<sp/>one<sp/>cluster<sp/>is<sp/>not<sp/>available,<sp/>skip<sp/>it<sp/>(do<sp/>not<sp/>send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!haveToStopProcessing<sp/>&amp;&amp;<sp/>(data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>)<sp/>==<sp/>Data::IN_PROCESS)){<sp/>sleep(sleepingAmount);};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>means<sp/>and<sp/>standard<sp/>deviation<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/></highlight><highlight class="comment">//wait<sp/>until<sp/>the<sp/>data<sp/>are<sp/>available.<sp/>The<sp/>status<sp/>can<sp/>be<sp/>READY,<sp/>IN_PROCESS<sp/>or<sp/>NOT_AVAILABLE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/></highlight><highlight class="comment">//In<sp/>the<sp/>IN_PROCESS<sp/>case,<sp/>an<sp/>other<sp/>thread<sp/>in<sp/>working<sp/>on<sp/>the<sp/>same<sp/>cluster,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/></highlight><highlight class="comment">//In<sp/>the<sp/>NOT_AVAILABLE<sp/>case,<sp/>the<sp/>spikes<sp/>have<sp/>not<sp/>been<sp/>collected,<sp/>get<sp/>the<sp/>data<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight><highlight class="comment">//ask<sp/>to<sp/>calculate<sp/>the<sp/>data<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((meanRequested<sp/>||<sp/>waveformView.<ref refid="classWaveformView_1e15e3eafbad55a9a7cb3564ab24c2756" kindref="member">meanPresentation</ref>)<sp/><sp/>&amp;&amp;<sp/>!haveToStopProcessing){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformView.<ref refid="classWaveformView_1206d4621bb22a053b318a205ea03ca7f" kindref="member">presentationMode</ref><sp/>==<sp/>WaveformView::SAMPLE){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(treatSingleCluster){</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_17956159eefe40628dc1ed79399a6fdfe" kindref="member">calculateSampleMean</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE<sp/>&amp;&amp;<sp/>!haveToStopProcessing){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>that<sp/>the<sp/>data<sp/>are<sp/>available,<sp/>compute<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_17956159eefe40628dc1ed79399a6fdfe" kindref="member">calculateSampleMean</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_17956159eefe40628dc1ed79399a6fdfe" kindref="member">calculateSampleMean</ref>(clusterId,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//one<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>contained<sp/>in<sp/>clusterIds<sp/>before<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterIds.begin();<sp/>iterator<sp/>!=<sp/>clusterIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_17956159eefe40628dc1ed79399a6fdfe" kindref="member">calculateSampleMean</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE<sp/>&amp;&amp;<sp/>!haveToStopProcessing){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>for<sp/>one<sp/>cluster<sp/>is<sp/>not<sp/>available,<sp/>skip<sp/>it<sp/>(do<sp/>not<sp/>send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::IN_PROCESS<sp/>||<sp/>(dataStatus<sp/>==<sp/>Data::READY)){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::READY){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>that<sp/>the<sp/>data<sp/>are<sp/>available,<sp/>compute<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_17956159eefe40628dc1ed79399a6fdfe" kindref="member">calculateSampleMean</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY<sp/>||<sp/>status<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b4a22f25d82e82029d5ce632e50e763" kindref="member">getSampleWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>for<sp/>one<sp/>cluster<sp/>is<sp/>not<sp/>available,<sp/>skip<sp/>it<sp/>(do<sp/>not<sp/>send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_17956159eefe40628dc1ed79399a6fdfe" kindref="member">calculateSampleMean</ref>(*iterator,waveformView.<ref refid="classWaveformView_198c002a4effaf0a57e1f2d4f178dce48" kindref="member">nbSpkToDisplay</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY<sp/>||<sp/>status<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//Stop<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//Stop<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//several<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//Sample<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformView.<ref refid="classWaveformView_1206d4621bb22a053b318a205ea03ca7f" kindref="member">presentationMode</ref><sp/>==<sp/>WaveformView::TIME_FRAME){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(treatSingleCluster){</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_184b48593aabb535a0d43e05335be582f" kindref="member">calculateTimeFrameMean</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE<sp/>&amp;&amp;<sp/>!haveToStopProcessing){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>that<sp/>the<sp/>data<sp/>are<sp/>available,<sp/>compute<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_184b48593aabb535a0d43e05335be582f" kindref="member">calculateTimeFrameMean</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_184b48593aabb535a0d43e05335be582f" kindref="member">calculateTimeFrameMean</ref>(clusterId,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE){</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>data<sp/>requested<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWaveformDataEvent*<sp/>event<sp/>=<sp/>noWaveformDataEvent();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//Stop<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//one<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>contained<sp/>in<sp/>clusterIds<sp/>before<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){<sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterIds.begin();<sp/>iterator<sp/>!=<sp/>clusterIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!haveToStopProcessing){</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>status<sp/>=<sp/>data.<ref refid="classData_184b48593aabb535a0d43e05335be582f" kindref="member">calculateTimeFrameMean</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::NOT_AVAILABLE<sp/>&amp;&amp;<sp/>!haveToStopProcessing){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data::Status<sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>for<sp/>one<sp/>cluster<sp/>is<sp/>not<sp/>available,<sp/>skip<sp/>it<sp/>(do<sp/>not<sp/>send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::IN_PROCESS<sp/><sp/>||<sp/>(dataStatus<sp/>==<sp/>Data::READY)){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::READY){</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>that<sp/>the<sp/>data<sp/>are<sp/>available,<sp/>compute<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_184b48593aabb535a0d43e05335be582f" kindref="member">calculateTimeFrameMean</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY<sp/>||<sp/>status<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataStatus<sp/>=<sp/>data.<ref refid="classData_11b40e2e69b3010cac35ce5b39ecdaac3" kindref="member">getTimeFrameWaveformPoints</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataStatus<sp/>==<sp/>Data::NOT_AVAILABLE)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::IN_PROCESS){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>for<sp/>one<sp/>cluster<sp/>is<sp/>not<sp/>available,<sp/>skip<sp/>it<sp/>(do<sp/>not<sp/>send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopProcessing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(sleepingAmount);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>data.<ref refid="classData_184b48593aabb535a0d43e05335be582f" kindref="member">calculateTimeFrameMean</ref>(*iterator,waveformView.<ref refid="classWaveformView_1e3c751466a565d2271ed8c4b13b61ecd" kindref="member">startTime</ref>,waveformView.<ref refid="classWaveformView_152927c126c2e33e68ccdac59cf9e6861" kindref="member">endTime</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>Data::READY<sp/>||<sp/>status<sp/>==<sp/>Data::NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//Stop<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//Stop<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//several<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//Time<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/>}</highlight><highlight class="comment">//mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/></highlight><highlight class="comment">//Send<sp/>an<sp/>event<sp/>to<sp/>the<sp/>waveformView<sp/>to<sp/>let<sp/>it<sp/>know<sp/>that<sp/>the<sp/>waveform<sp/>information<sp/>have<sp/>been<sp/>retrieved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/>GetWaveformsEvent*<sp/>event<sp/>=<sp/>getWaveformsEvent();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/>QApplication::postEvent(&amp;waveformView,event);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformThread::getMean(<ref refid="classWaveformView_12de039cfeb8d46fa258d6dcf960ded62" kindref="member">WaveformView::PresentationMode</ref><sp/>mode){</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>meanRequested<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>this-&gt;mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>start();</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformThread::getMean(QValueList&lt;int&gt;<sp/>clusterIds,<ref refid="classWaveformView_12de039cfeb8d46fa258d6dcf960ded62" kindref="member">WaveformView::PresentationMode</ref><sp/>mode){</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/><sp/>WaveformThread::getMean&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>meanRequested<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>this-&gt;clusterIds<sp/>=<sp/>clusterIds;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>treatSingleCluster<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>this-&gt;mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>start();</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/waveformthread.cpp"/>
  </compounddef>
</doxygen>
