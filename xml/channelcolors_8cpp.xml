<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="channelcolors_8cpp" kind="file">
    <compoundname>channelcolors.cpp</compoundname>
    <includes refid="channelcolors_8h" local="yes">channelcolors.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="175">
        <label>qvaluelist.h</label>
      </node>
      <node id="172">
        <label>channelcolors.h</label>
        <link refid="channelcolors_8h-source"/>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>qcolor.h</label>
      </node>
      <node id="173">
        <label>qptrlist.h</label>
      </node>
      <node id="176">
        <label>iostream</label>
      </node>
      <node id="171">
        <label>channelcolors.cpp</label>
        <link refid="channelcolors.cpp"/>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelcolors.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Tue<sp/>Sep<sp/>16<sp/>2004</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2003<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan@myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>application<sp/>specific<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;channelcolors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//C,<sp/>C++<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">ChannelColors::ChannelColors():channelList(){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>list<sp/>owns<sp/>the<sp/>objects,<sp/>it<sp/>will<sp/>delete<sp/>the<sp/>channels<sp/>that<sp/>are<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>channelList.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">ChannelColors::~ChannelColors(){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;~ChannelColors()&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ChannelColors::ChannelColors(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classChannelColors" kindref="compound">ChannelColors</ref>&amp;<sp/>origin){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Insert<sp/>into<sp/>channelList<sp/>a<sp/>deep<sp/>copy<sp/>of<sp/>all<sp/>the<sp/>elements<sp/>of<sp/>origin.channelList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>ChannelColor*<sp/>channelColor;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>QPtrList&lt;ChannelColor&gt;<sp/>originChannelList<sp/>=<sp/><sp/>origin.<ref refid="classChannelColors_1b5ae8c947ec54b5f0f404c499abb0c39" kindref="member">channelList</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(channelColor<sp/>=<sp/>originChannelList.first();<sp/>channelColor;<sp/>channelColor<sp/>=<sp/>originChannelList.next()){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>channelList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChannelColor(*channelColor));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">QColor<sp/><ref refid="classChannelColors_1b73b95f8d1942d66955e3223812aba9e" kindref="member">ChannelColors::color</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>theChannelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>theChannelColor<sp/>=<sp/>channelColor(identifier);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>case<sp/>no<sp/>ChannelColor<sp/>have<sp/>been<sp/>find<sp/>(should<sp/>not<sp/>happen),<sp/>return<sp/>black.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theChannelColor<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QColor(Qt::black);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theChannelColor-&gt;color;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">QColor<sp/><ref refid="classChannelColors_15a422fe7502f2caa5b7f3b86fb0f344f" kindref="member">ChannelColors::groupColor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>theChannelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>theChannelColor<sp/>=<sp/>channelColor(identifier);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>case<sp/>no<sp/>ChannelColor<sp/>have<sp/>been<sp/>find<sp/>(should<sp/>not<sp/>happen),<sp/>return<sp/>black.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theChannelColor<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QColor(Qt::black);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theChannelColor-&gt;groupColor;<sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">QColor<sp/><ref refid="classChannelColors_185750e13a17701e6642b1392ed429922" kindref="member">ChannelColors::spikeGroupColor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>theChannelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>theChannelColor<sp/>=<sp/>channelColor(identifier);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>case<sp/>no<sp/>ChannelColor<sp/>have<sp/>been<sp/>find<sp/>(should<sp/>not<sp/>happen),<sp/>return<sp/>black.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theChannelColor<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QColor(Qt::black);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theChannelColor-&gt;spikeGroupColor;<sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_1c6a9c6a2ea3a703359be3cb5d9d5fa30" kindref="member">ChannelColors::setColor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,<sp/>QColor<sp/>color){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>theChannelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>theChannelColor<sp/>=<sp/>channelColor(identifier);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>theChannelColor-&gt;color<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_17e122fa83493c6fd2d52fa0a6d95c916" kindref="member">ChannelColors::setGroupColor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,QColor<sp/>color){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>theChannelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>theChannelColor<sp/>=<sp/>channelColor(identifier);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>theChannelColor-&gt;groupColor<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_169a7506b70f34091e2cc4edb77a28ad3" kindref="member">ChannelColors::setSpikeGroupColor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,QColor<sp/>color){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>theChannelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>theChannelColor<sp/>=<sp/>channelColor(identifier);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>theChannelColor-&gt;spikeGroupColor<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_1ba0f430acbf54dceb0775ef29c3020ab" kindref="member">ChannelColors::channelId</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(channelList.at(static_cast&lt;uint&gt;(index)))-&gt;<ref refid="classChannelColors_1ba0f430acbf54dceb0775ef29c3020ab" kindref="member">channelId</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_1db17548d7e2b46badc507f846ef500fc" kindref="member">ChannelColors::contains</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(channelColorIndex(channelId)<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">uint<sp/><ref refid="classChannelColors_1a459f20b15c5877ea2c68a48a4cfdb53" kindref="member">ChannelColors::append</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId,<sp/>QColor<sp/>color,QColor<sp/>groupColor,QColor<sp/>spikeGroupColor){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>channelList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChannelColor(channelId,color,groupColor,spikeGroupColor));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channelList.count();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">uint<sp/><ref refid="classChannelColors_1a459f20b15c5877ea2c68a48a4cfdb53" kindref="member">ChannelColors::append</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId,<sp/>QColor<sp/>color){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>channelList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChannelColor(channelId,color,color,color));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channelList.count();<sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_1e8f4ba8681ff7116945b9ef0cf8a32d5" kindref="member">ChannelColors::insert</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,QColor<sp/>color,QColor<sp/>groupColor,QColor<sp/>spikeGroupColor){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>channelList.insert(index,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChannelColor(channelId,color,groupColor,spikeGroupColor));</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classChannelColors_1965f3c495331288d7af32b6a8a8d25e2" kindref="member">ChannelColors::remove</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channelList.remove(channelColorIndex(identifier));</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">ChannelColors::ChannelColor*<sp/>ChannelColors::channelColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>on<sp/>the<sp/>list<sp/>until<sp/>the<sp/>channel<sp/>is<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>QPtrListIterator&lt;ChannelColors::ChannelColor&gt;<sp/>iterator(channelList);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>channelColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((channelColor<sp/>=<sp/>iterator.current())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelColor-&gt;channelId<sp/>==<sp/>channelId)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channelColor;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight><highlight class="comment">//Normally<sp/>never<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ChannelColors::channelColorIndex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>on<sp/>the<sp/>list<sp/>until<sp/>the<sp/>channel<sp/>is<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>QPtrListIterator&lt;ChannelColors::ChannelColor&gt;<sp/>iterator(channelList);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ChannelColors::ChannelColor*<sp/>channelColor;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((channelColor<sp/>=<sp/>iterator.current())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelColor-&gt;channelId<sp/>==<sp/>channelId)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight><highlight class="comment">//Normally<sp/>never<sp/>reach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/channelcolors.cpp"/>
  </compounddef>
</doxygen>
