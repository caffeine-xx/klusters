<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="traceview_8cpp" kind="file">
    <compoundname>traceview.cpp</compoundname>
    <includes refid="traceview_8h" local="yes">traceview.h</includes>
    <includes refid="channelcolors_8h" local="yes">channelcolors.h</includes>
    <includes local="no">qmap.h</includes>
    <includes local="no">qvaluelist.h</includes>
    <includes local="no">qpainter.h</includes>
    <includes local="no">qprinter.h</includes>
    <includes local="no">qpaintdevicemetrics.h</includes>
    <includes local="no">kapp.h</includes>
    <includes local="no">kiconloader.h</includes>
    <includes local="no">kmessagebox.h</includes>
    <includes local="no">klocale.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes refid="clustersprovider_8h" local="yes">clustersprovider.h</includes>
    <includes refid="eventsprovider_8h" local="yes">eventsprovider.h</includes>
    <includes refid="itemcolors_8h" local="yes">itemcolors.h</includes>
    <includes refid="timer_8h" local="yes">timer.h</includes>
    <incdepgraph>
      <node id="2573">
        <label>eventsprovider.h</label>
        <link refid="eventsprovider_8h-source"/>
        <childnode refid="2539" relation="include">
        </childnode>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2540" relation="include">
        </childnode>
        <childnode refid="2568" relation="include">
        </childnode>
        <childnode refid="2536" relation="include">
        </childnode>
      </node>
      <node id="2553">
        <label>qpaintdevicemetrics.h</label>
      </node>
      <node id="2530">
        <label>baseframe.h</label>
        <link refid="baseframe_8h-source"/>
        <childnode refid="2526" relation="include">
        </childnode>
        <childnode refid="2531" relation="include">
        </childnode>
        <childnode refid="2532" relation="include">
        </childnode>
        <childnode refid="2533" relation="include">
        </childnode>
        <childnode refid="2537" relation="include">
        </childnode>
      </node>
      <node id="2567">
        <label>qregion.h</label>
      </node>
      <node id="2559">
        <label>iomanip</label>
      </node>
      <node id="2554">
        <label>kapp.h</label>
      </node>
      <node id="2568">
        <label>qfile.h</label>
      </node>
      <node id="2563">
        <label>pair.h</label>
        <link refid="pair_8h-source"/>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2537" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
      </node>
      <node id="2539">
        <label>dataprovider.h</label>
        <link refid="dataprovider_8h-source"/>
        <childnode refid="2540" relation="include">
        </childnode>
        <childnode refid="2541" relation="include">
        </childnode>
      </node>
      <node id="2549">
        <label>qvaluelist.h</label>
      </node>
      <node id="2533">
        <label>zoomwindow.h</label>
        <link refid="zoomwindow_8h-source"/>
        <childnode refid="2534" relation="include">
        </childnode>
        <childnode refid="2535" relation="include">
        </childnode>
        <childnode refid="2536" relation="include">
        </childnode>
      </node>
      <node id="2564">
        <label>qstring.h</label>
      </node>
      <node id="2565">
        <label>stdlib.h</label>
      </node>
      <node id="2540">
        <label>qobject.h</label>
      </node>
      <node id="2547">
        <label>channelcolors.h</label>
        <link refid="channelcolors_8h-source"/>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2548" relation="include">
        </childnode>
        <childnode refid="2549" relation="include">
        </childnode>
      </node>
      <node id="2525">
        <label>traceview.h</label>
        <link refid="traceview_8h-source"/>
        <childnode refid="2526" relation="include">
        </childnode>
        <childnode refid="2527" relation="include">
        </childnode>
        <childnode refid="2528" relation="include">
        </childnode>
        <childnode refid="2529" relation="include">
        </childnode>
        <childnode refid="2530" relation="include">
        </childnode>
        <childnode refid="2538" relation="include">
        </childnode>
        <childnode refid="2546" relation="include">
        </childnode>
        <childnode refid="2536" relation="include">
        </childnode>
      </node>
      <node id="2541">
        <label>kurl.h</label>
      </node>
      <node id="2555">
        <label>kiconloader.h</label>
      </node>
      <node id="2534">
        <label>qrect.h</label>
      </node>
      <node id="2571">
        <label>stdexcept</label>
      </node>
      <node id="2542">
        <label>array.h</label>
        <link refid="array_8h-source"/>
        <childnode refid="2543" relation="include">
        </childnode>
        <childnode refid="2537" relation="include">
        </childnode>
      </node>
      <node id="2546">
        <label>kstatusbar.h</label>
      </node>
      <node id="2531">
        <label>qframe.h</label>
      </node>
      <node id="2548">
        <label>qcolor.h</label>
      </node>
      <node id="2545">
        <label>qptrlist.h</label>
      </node>
      <node id="2535">
        <label>qpoint.h</label>
      </node>
      <node id="2562">
        <label>sortabletable.h</label>
        <link refid="sortabletable_8h-source"/>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
      </node>
      <node id="2566">
        <label>clusteruserinformation.h</label>
        <link refid="clusteruserinformation_8h-source"/>
      </node>
      <node id="2557">
        <label>klocale.h</label>
      </node>
      <node id="2560">
        <label>clustersprovider.h</label>
        <link refid="clustersprovider_8h-source"/>
        <childnode refid="2539" relation="include">
        </childnode>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2561" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2540" relation="include">
        </childnode>
      </node>
      <node id="2538">
        <label>tracesprovider.h</label>
        <link refid="tracesprovider_8h-source"/>
        <childnode refid="2539" relation="include">
        </childnode>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2540" relation="include">
        </childnode>
      </node>
      <node id="2558">
        <label>unistd.h</label>
      </node>
      <node id="2572">
        <label>vector</label>
      </node>
      <node id="2574">
        <label>itemcolors.h</label>
        <link refid="itemcolors_8h-source"/>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2548" relation="include">
        </childnode>
        <childnode refid="2549" relation="include">
        </childnode>
      </node>
      <node id="2532">
        <label>qcursor.h</label>
      </node>
      <node id="2524">
        <label>traceview.cpp</label>
        <link refid="traceview.cpp"/>
        <childnode refid="2525" relation="include">
        </childnode>
        <childnode refid="2547" relation="include">
        </childnode>
        <childnode refid="2550" relation="include">
        </childnode>
        <childnode refid="2549" relation="include">
        </childnode>
        <childnode refid="2551" relation="include">
        </childnode>
        <childnode refid="2552" relation="include">
        </childnode>
        <childnode refid="2553" relation="include">
        </childnode>
        <childnode refid="2554" relation="include">
        </childnode>
        <childnode refid="2555" relation="include">
        </childnode>
        <childnode refid="2556" relation="include">
        </childnode>
        <childnode refid="2557" relation="include">
        </childnode>
        <childnode refid="2558" relation="include">
        </childnode>
        <childnode refid="2537" relation="include">
        </childnode>
        <childnode refid="2559" relation="include">
        </childnode>
        <childnode refid="2560" relation="include">
        </childnode>
        <childnode refid="2573" relation="include">
        </childnode>
        <childnode refid="2574" relation="include">
        </childnode>
        <childnode refid="2575" relation="include">
        </childnode>
      </node>
      <node id="2551">
        <label>qpainter.h</label>
      </node>
      <node id="2536">
        <label>math.h</label>
      </node>
      <node id="2575">
        <label>timer.h</label>
        <link refid="timer_8h-source"/>
        <childnode refid="2576" relation="include">
        </childnode>
      </node>
      <node id="2526">
        <label>qwidget.h</label>
      </node>
      <node id="2576">
        <label>sys/time.h</label>
      </node>
      <node id="2537">
        <label>iostream</label>
      </node>
      <node id="2570">
        <label>qthread.h</label>
      </node>
      <node id="2529">
        <label>qpair.h</label>
      </node>
      <node id="2556">
        <label>kmessagebox.h</label>
      </node>
      <node id="2528">
        <label>qdict.h</label>
      </node>
      <node id="2550">
        <label>qmap.h</label>
      </node>
      <node id="2569">
        <label>qmutex.h</label>
      </node>
      <node id="2527">
        <label>qpixmap.h</label>
      </node>
      <node id="2543">
        <label>cstring</label>
      </node>
      <node id="2552">
        <label>qprinter.h</label>
      </node>
      <node id="2561">
        <label>data.h</label>
        <link refid="data_8h-source"/>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
        <childnode refid="2563" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2549" relation="include">
        </childnode>
        <childnode refid="2528" relation="include">
        </childnode>
        <childnode refid="2567" relation="include">
        </childnode>
        <childnode refid="2550" relation="include">
        </childnode>
        <childnode refid="2568" relation="include">
        </childnode>
        <childnode refid="2569" relation="include">
        </childnode>
        <childnode refid="2570" relation="include">
        </childnode>
        <childnode refid="2541" relation="include">
        </childnode>
        <childnode refid="2537" relation="include">
        </childnode>
        <childnode refid="2571" relation="include">
        </childnode>
        <childnode refid="2536" relation="include">
        </childnode>
        <childnode refid="2572" relation="include">
        </childnode>
      </node>
      <node id="2544">
        <label>types.h</label>
        <link refid="types_8h-source"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceview.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Wed<sp/>Mar<sp/>17<sp/>2004</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2004<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan.myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//include<sp/>files<sp/>for<sp/>the<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;traceview.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;channelcolors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>files<sp/>for<sp/>QT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qmap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qvaluelist.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qpainter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qprinter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qpaintdevicemetrics.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kapp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>files<sp/>for<sp/>kde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kiconloader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kmessagebox.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;klocale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//Unix<sp/>include<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//General<sp/>C++<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Required<sp/>for<sp/>formated<sp/>I/O.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>application<sp/>specific<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clustersprovider.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eventsprovider.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;itemcolors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TraceView::XMARGIN<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TraceView::YMARGIN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classTraceView_1dd3f8d4ac0972e174b93aed78a33b0d4" kindref="member">TraceView::TraceView</ref>(<ref refid="classTracesProvider" kindref="compound">TracesProvider</ref>&amp;<sp/>tracesProvider,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>greyScale,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multiColumns,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verticalLines,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>raster,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waveforms,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>labelsDisplay,QValueList&lt;int&gt;&amp;<sp/>channelsToDisplay,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unitGain,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acquisitionGain,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classChannelColors" kindref="compound">ChannelColors</ref>*<sp/>channelColors,QMap&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>QValueList&lt;int&gt;<sp/>&gt;*<sp/>groupsChannels,QMap&lt;int,int&gt;*<sp/>channelsGroups,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;&amp;<sp/>channelOffsets,QValueList&lt;int&gt;&amp;<sp/>gains,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>skippedChannels,QWidget*<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,QColor<sp/>backgroundColor,KStatusBar*<sp/>statusBar,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minSize,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowTopLeft,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBottomRight,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>border):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBaseFrame" kindref="compound">BaseFrame</ref>(10,0,parent,name,backgroundColor,minSize,maxSize,windowTopLeft,windowBottomRight,border),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greyScaleMode(greyScale),statusBar(statusBar),tracesProvider(tracesProvider),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiColumns(multiColumns),verticalLines(verticalLines),raster(raster),waveforms(waveforms),dataReady(false),data(),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelOffsets(channelOffsets),gains(gains),channelColors(channelColors),groupsChannels(groupsChannels),channelsGroups(channelsGroups),doublebuffer(),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquisitionGain(acquisitionGain),unitGain(unitGain),xMargin(10),yMargin(0),columnDisplayChanged(false),resized(false),groupsChanged(false),previousDragOrdinate(0),lastClickOrdinate(0),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSamplesModified(false),alreadySelected(false),isInit(true),channelforVoltageComputation(0),startingIndex(0),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showLabels(labelsDisplay),showCalibrationScale(false),downSampling(1),zoomed(false),firstZoom(true),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doubleClick(false),zoomFactor(0),maxZoomReached(false),zoomOut(false),printState(false),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startTimeInRecordingUnits(0),previousStartTimeInRecordingUnits(0),spikeBrowsing(false),newEventPosition(-1),eventBeingModified(false),retrieveClusterData(false){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>channelsToShowIterator;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(channelsToShowIterator<sp/>=<sp/>channelsToDisplay.begin();<sp/>channelsToShowIterator<sp/>!=<sp/>channelsToDisplay.end();<sp/>++channelsToShowIterator)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>shownChannels.<ref refid="classChannelColors_1a459f20b15c5877ea2c68a48a4cfdb53" kindref="member">append</ref>(*channelsToShowIterator);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>skipStatusChanged(skippedChannels);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Determine<sp/>the<sp/>screen<sp/>resolution<sp/>in<sp/>pixel<sp/>by<sp/>centimeters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>QPrinter<sp/>printer;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>screenResolution<sp/>=<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>printer.resolution()<sp/>/<sp/>2.54);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Cluster<sp/>related<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>clustersData.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>nbClusters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Event<sp/>related<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>eventsData.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>selectedEvent.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>selectedEvent.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>default<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>mode<sp/>=<sp/>ZOOM;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>startTime<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>endTime<sp/>=<sp/>start<sp/>+<sp/>timeFrameWidth;<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>this-&gt;timeFrameWidth<sp/>=<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="classTracesProvider_17e7bff8bdd97abf5a4a31e24cfa839ac" kindref="member">recordingLength</ref><sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_17e7bff8bdd97abf5a4a31e24cfa839ac" kindref="member">recordingLength</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>drawing<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>nbChannels<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_17f7985a31e8e6e94236b6b42dfa96945" kindref="member">getNbChannels</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplingRate<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18fad4f54ef71252528e06d3ac2ccecf4" kindref="member">getSamplingRate</ref>();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>updateShownGroupsChannels(shownChannels);<sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>borderX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>Xstep<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>timeStepUnit<sp/>=<sp/>timeStep<sp/>=<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(1000)<sp/>/<sp/>static_cast&lt;float&gt;(samplingRate));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>Yspace<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>traceVspace<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>Yshift<sp/>=<sp/>Yspace<sp/>+<sp/>traceVspace;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>borderY<sp/>=<sp/>Yshift<sp/>/<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>YGroupSpace<sp/>=<sp/>Yshift<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>YTracesRasterSeparator<sp/>=<sp/>Yshift<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>YRasterSpace<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>rasterHeight<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>ordinateMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>abscissaMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>X0<sp/>=<sp/>borderX;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;nbChannels:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nbChannels&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>samplingRate:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;samplingRate&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>timeStep:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;timeStep&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>channelOffsets.size()<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;channelOffsets.size()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>multiColumns<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;multiColumns&lt;&lt;endl;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>initial<sp/>offset<sp/>for<sp/>each<sp/>channel<sp/>is<sp/>set<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(channelOffsets.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i)<sp/>channelOffsets.append(0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>initial<sp/>amplitude<sp/>and<sp/>factor<sp/>for<sp/>each<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gains.size()<sp/>==<sp/>0)<sp/>setGains(unitGain,acquisitionGain);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>alpha:<sp/>(3.traceVspace)<sp/>/<sp/>(Utheta<sp/>.<sp/>acquisitionGain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Utheta:<sp/>amplitude<sp/>maximal<sp/>of<sp/>theta<sp/>in<sp/>milivolts,<sp/>0.4<sp/>mv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>alpha<sp/>=<sp/><sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(3<sp/>*<sp/>traceVspace)<sp/>/</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;float&gt;(0.4<sp/>*<sp/><sp/>static_cast&lt;float&gt;(acquisitionGain)));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>alpha<sp/>*<sp/>(4/3)^gain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Yfactor<sp/>=<sp/>static_cast&lt;float&gt;(alpha<sp/>*<sp/>pow(0.75,gains[i]));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>channelFactors.append(Yfactor);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>Connection(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>connect(&amp;tracesProvider,SIGNAL(<ref refid="classTracesProvider_1a1757f81106426811c405a6437654cf1" kindref="member">dataReady</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(dataAvailable(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*)));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>display<sp/>of<sp/>the<sp/>labels,<sp/>the<sp/>default<sp/>is<sp/>to<sp/>hide<sp/>them,<sp/>if<sp/>need<sp/>it<sp/>change<sp/>that.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(showLabels){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>xMargin<sp/>=<sp/>XMARGIN;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>yMargin<sp/>=<sp/>YMARGIN;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>setBorders(xMargin,yMargin);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/></highlight><highlight class="comment">//compute<sp/>the<sp/>size<sp/>of<sp/>the<sp/>window<sp/>if<sp/>the<sp/>display<sp/>is<sp/>not<sp/>on<sp/>multicolumns,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/></highlight><highlight class="comment">//in<sp/>that<sp/>case<sp/>the<sp/>viewport<sp/>needs<sp/>to<sp/>be<sp/>compute<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!multiColumns)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>cursors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/>KIconLoader<sp/>*loader<sp/>=<sp/>KGlobal::iconLoader();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/>measureCursor<sp/>=<sp/>QCursor(loader-&gt;loadIcon(</highlight><highlight class="stringliteral">&quot;measure_cursor&quot;</highlight><highlight class="normal">,<sp/>KIcon::User),0,0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/>selectTimeCursor<sp/>=<sp/>QCursor(loader-&gt;loadIcon(</highlight><highlight class="stringliteral">&quot;select_time_cursor&quot;</highlight><highlight class="normal">,<sp/>KIcon::User),0,0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/>selectEventCursor<sp/>=<sp/>QCursor(loader-&gt;loadIcon(</highlight><highlight class="stringliteral">&quot;select_event_cursor&quot;</highlight><highlight class="normal">,<sp/>KIcon::User),0,0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/>addEventCursor<sp/>=<sp/>QCursor(loader-&gt;loadIcon(</highlight><highlight class="stringliteral">&quot;add_event_cursor&quot;</highlight><highlight class="normal">,<sp/>KIcon::User),0,0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/>selectCursor<sp/>=<sp/>QCursor(loader-&gt;loadIcon(</highlight><highlight class="stringliteral">&quot;select_channels_cursor&quot;</highlight><highlight class="normal">,<sp/>KIcon::User),0,0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/>drawLineCursor<sp/>=<sp/>QCursor(loader-&gt;loadIcon(</highlight><highlight class="stringliteral">&quot;time_line_cursor&quot;</highlight><highlight class="normal">,<sp/>KIcon::User),0,0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>cursor<sp/>shap<sp/>to<sp/>a<sp/>magnifier<sp/>as<sp/>the<sp/>only<sp/>action<sp/>allowed<sp/>on<sp/>the<sp/>widget<sp/>is<sp/>to<sp/>zoom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/>setCursor(zoomCursor);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/></highlight><highlight class="comment">//Allowed<sp/>the<sp/>mouse<sp/>tracking<sp/>to<sp/>write<sp/>the<sp/>time<sp/>in<sp/>the<sp/>status<sp/>bar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/>setMouseTracking(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/>tracesProvider.<ref refid="classTracesProvider_115a28fc38479728605849e1d8bb4aad9" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">TraceView::~TraceView(){}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1ac696dfa3b582557b8bba553b5e10981" kindref="member">TraceView::dataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>data,QObject*<sp/>initiator){<sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data.<ref refid="classArray_1d55af2bb256e18c4554faea8d8abce42" kindref="member">nbOfRows</ref>()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>QApplication::restoreOverrideCursor();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>KMessageBox::error(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,i18n(</highlight><highlight class="stringliteral">&quot;An<sp/>error<sp/>has<sp/>occured,<sp/>the<sp/>data<sp/>file<sp/>could<sp/>not<sp/>be<sp/>opened<sp/>or<sp/>the<sp/>file<sp/>size<sp/>is<sp/>incorrect.&quot;</highlight><highlight class="normal">),<sp/>i18n(</highlight><highlight class="stringliteral">&quot;IO<sp/>Error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/>this-&gt;data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/>updateWindow();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>following<sp/>code<sp/>was<sp/>done<sp/>in<sp/>case<sp/>of<sp/>threads,<sp/>without<sp/>thread<sp/>the<sp/>trace<sp/>data<sp/>arrive<sp/>always<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/></highlight><highlight class="comment">//No<sp/>clusters<sp/>or<sp/>events<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.count()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>eventsData.count()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>repaint(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>cluster<sp/>and<sp/>event<sp/>data<sp/>are<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator2(eventsData);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator2.current();++iterator2){</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>ready<sp/>=<sp/>iterator2.current()-&gt;status();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>repaint(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1ac696dfa3b582557b8bba553b5e10981" kindref="member">TraceView::dataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>data,QObject*<sp/>initiator,QString<sp/>providerName){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/>ClusterData*<sp/>clusterData<sp/>=<sp/>clustersData[providerName];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/>clusterData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/>clusterData-&gt;setData(data);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>following<sp/>code<sp/>was<sp/>done<sp/>in<sp/>case<sp/>of<sp/>threads,<sp/>without<sp/>thread<sp/>the<sp/>trace<sp/>data<sp/>arrive<sp/>always<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator2(eventsData);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator2.current();++iterator2){</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator2.current()-&gt;status();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataReady<sp/>&amp;&amp;<sp/>ready){</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1ac696dfa3b582557b8bba553b5e10981" kindref="member">TraceView::dataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>times,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>ids,QObject*<sp/>initiator,QString<sp/>providerName){</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/>EventData*<sp/>eventData<sp/>=<sp/>eventsData[providerName];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/>eventData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/>eventData-&gt;setData(times,ids);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>following<sp/>code<sp/>was<sp/>done<sp/>in<sp/>case<sp/>of<sp/>threads,<sp/>without<sp/>thread<sp/>the<sp/>trace<sp/>data<sp/>arrive<sp/>always<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator2(clustersData);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator2.current();++iterator2){</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator2.current()-&gt;status();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataReady<sp/>&amp;&amp;<sp/>ready){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_10bf137a71c4604245dad3c58a2f2a0be" kindref="member">TraceView::updateClusterData</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!active){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>retrieveClusterData<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>retrieveClusterData<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/></highlight><highlight class="comment">//Request<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/></highlight><highlight class="comment">//Retrieve<sp/>the<sp/>data<sp/>for<sp/>the<sp/>clusters,<sp/>only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>clusters<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verticalLines<sp/>||<sp/>raster<sp/>||<sp/>waveforms){</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedClusters.begin();<sp/>providersIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>selectedClusters.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>clustersData.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*toRemoveIterator));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.count()<sp/>!=<sp/>0)<sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator.currentKey()<sp/>!=<sp/>clusterProviderToSkip){</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator.current()-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;ClustersProvider*&gt;(clusterProviders[iterator.currentKey()])-&gt;requestData(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>clusterProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_19f7957aa400f6d89f046b738b5355cfa" kindref="member">TraceView::displayTimeFrame</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>startTime<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>endTime<sp/>=<sp/>start<sp/>+<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;timeFrameWidth<sp/>!=<sp/>timeFrameWidth)<sp/>nbSamplesModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>this-&gt;timeFrameWidth<sp/>=<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/></highlight><highlight class="comment">//Request<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>update<sp/>is<sp/>not<sp/>due<sp/>to<sp/>spike<sp/>browsing<sp/>reset<sp/>startTimeInRecordingUnits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!spikeBrowsing)<sp/>startTimeInRecordingUnits<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>spikeBrowsing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/></highlight><highlight class="comment">//Retreive<sp/>the<sp/>data<sp/>for<sp/>the<sp/>clusters,<sp/>only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>clusters<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verticalLines<sp/>||<sp/>raster<sp/>||<sp/>waveforms){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedClusters.begin();<sp/>providersIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/>selectedClusters.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>clustersData.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*toRemoveIterator));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator.currentKey()<sp/>!=<sp/>clusterProviderToSkip){</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator.current()-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;ClustersProvider*&gt;(clusterProviders[iterator.currentKey()])-&gt;requestData(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>clusterProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/></highlight><highlight class="comment">//Retreive<sp/>the<sp/>data<sp/>for<sp/>the<sp/>events,only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>events<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()){</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedEvents.begin();<sp/>providersIterator<sp/>!=<sp/>selectedEvents.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/>selectedEvents.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>eventsData.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator.currentKey()<sp/>!=<sp/>eventProviderToSkip){</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator.current()-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[iterator.currentKey()])-&gt;requestData(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>eventProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/>tracesProvider.<ref refid="classTracesProvider_115a28fc38479728605849e1d8bb4aad9" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1ef31aa94de61b33418ff3ce65519fdd1" kindref="member">TraceView::showHideLabels</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show){</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/>showLabels<sp/>=<sp/>show;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(show){</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>xMargin<sp/>=<sp/>XMARGIN;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>yMargin<sp/>=<sp/>YMARGIN;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>xMargin<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>yMargin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><ref refid="classBaseFrame_18293d6698f18deef9410ea9805c06112" kindref="member">setBorders</ref>(xMargin,yMargin);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/>updateWindow();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1808cea8a94d4ee68d14ff3916043b470" kindref="member">TraceView::drawContents</ref>(QPainter*<sp/>p){<sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInitAndResized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isInit){</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resized)<sp/>isInitAndResized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>contentsRec<sp/>=<sp/>contentsRect();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>viewport<sp/>=<sp/>QRect(contentsRec.left()<sp/>+<sp/>xMargin,contentsRec.top(),contentsRec.width()<sp/>-<sp/>xMargin,contentsRec.height());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(viewport.width()<sp/>==<sp/>0)<sp/>update();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>isInit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>columnDisplayChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>contentsRec<sp/>=<sp/>contentsRect();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/>viewport<sp/>=<sp/>QRect(contentsRec.left()<sp/>+<sp/>xMargin,contentsRec.top(),contentsRec.width()<sp/>-<sp/>xMargin,contentsRec.height());</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(viewport.width()<sp/>==<sp/>0)<sp/>update();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>isInit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!eventProvidersToUpdate.isEmpty()){</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;::iterator<sp/>providerIterator;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>EventData*<sp/>eventData;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providerIterator<sp/>=<sp/>eventProvidersToUpdate.begin();<sp/>providerIterator<sp/>!=<sp/>eventProvidersToUpdate.end();<sp/>++providerIterator){</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>eventData<sp/>=<sp/>eventsData[*providerIterator];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventData<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>eventData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EventData();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>eventsData.insert(*providerIterator,eventData);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>eventsData[*providerIterator]-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventProvidersToUpdate.contains(iterator.currentKey())){</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[iterator.currentKey()])-&gt;requestData(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>eventProvidersToUpdate.remove(iterator.currentKey());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REDRAW<sp/>&amp;&amp;<sp/>dataReady){</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>QRect<sp/>contentsRec<sp/>=<sp/>contentsRect();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>left<sp/>margin<sp/>is<sp/>not<sp/>visible<sp/>(the<sp/>user<sp/>zoomed<sp/>without<sp/>taking<sp/>it<sp/>in<sp/>his<sp/>selection),<sp/>the<sp/>viewport<sp/>and<sp/>the<sp/>contentsRec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//have<sp/>the<sp/>same<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>!=<sp/>0)<sp/>viewport<sp/>=<sp/>QRect(contentsRec.left(),contentsRec.top(),contentsRec.width(),contentsRec.height());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>viewport<sp/>=<sp/>QRect(contentsRec.left()<sp/>+<sp/>xMargin,contentsRec.top(),contentsRec.width()<sp/>-<sp/>xMargin,contentsRec.height());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resized)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isInitAndResized){</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Resize<sp/>the<sp/>double<sp/>buffer<sp/>with<sp/>the<sp/>width<sp/>and<sp/>the<sp/>height<sp/>of<sp/>the<sp/>widget(QFrame)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/>doublebuffer.resize(contentsRec.width(),contentsRec.height());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>painter<sp/>to<sp/>paint<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/>painter.begin(&amp;doublebuffer);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Correct<sp/>the<sp/>window<sp/>after<sp/>the<sp/>user<sp/>zoomed<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/>correctZoom(r);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>viewport<sp/>(part<sp/>of<sp/>the<sp/>device<sp/>I<sp/>want<sp/>to<sp/>write<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//By<sp/>default,<sp/>the<sp/>viewport<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>device&apos;s<sp/>rectangle<sp/>(contentsRec),<sp/>taking<sp/>a<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//one<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>legends<sp/>(cluster<sp/>ids)<sp/>will<sp/>not<sp/>ovelap<sp/>a<sp/>correlogram.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>double<sp/>buffer<sp/>with<sp/>the<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/>doublebuffer.fill(backgroundColor());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Paint<sp/>all<sp/>the<sp/>traces<sp/>in<sp/>the<sp/>shownChannels<sp/>list<sp/>(in<sp/>the<sp/>double<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/>drawTraces(painter);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//reset<sp/>transformation<sp/>due<sp/>to<sp/>setWindow<sp/>and<sp/>setViewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/>painter.resetXForm()<sp/>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>channel<sp/>ids<sp/>and<sp/>amplitude<sp/>on<sp/>the<sp/>left<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(showLabels)<sp/>drawChannelIdsAndGain(painter);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>calibration<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(showCalibrationScale)<sp/>drawCalibrationScale(painter);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Closes<sp/>the<sp/>painter<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Back<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REFRESH;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>drawContentsMode<sp/>==<sp/>REFRESH,<sp/>we<sp/>reuse<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)<sp/>by<sp/>copying<sp/>it<sp/>into<sp/>the<sp/>widget<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/>p-&gt;drawPixmap(0,<sp/>0,<sp/>doublebuffer);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resized){</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>resized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1759186f2afec53e33fe8b29a259e475b" kindref="member">TraceView::setMultiColumns</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multiple){</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>multiColumns<sp/>=<sp/>multiple;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/>columnDisplayChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/>updateWindow();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_17943208b4827f2af154416001d983bea" kindref="member">TraceView::setClusterVerticalLines</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lines){</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>verticalLines<sp/>=<sp/>lines;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1d6c11753beebcf5cfd1412106b9594c3" kindref="member">TraceView::setClusterRaster</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>raster){</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>this-&gt;raster<sp/>=<sp/>raster;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/>updateWindow();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1e4e7720b743a457d10ca9be9b97bdf92" kindref="member">TraceView::setClusterWaveforms</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waveforms){</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>this-&gt;waveforms<sp/>=<sp/>waveforms;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_103e396b245b7ee974be1e7c08111645b" kindref="member">TraceView::setGreyScale</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>grey){</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/>greyScaleMode<sp/>=<sp/>grey;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_133725c681f33249a2f3123c321ccbb80" kindref="member">TraceView::resetOffsets</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMap&lt;int,int&gt;&amp;<sp/>selectedChannelDefaultOffsets){</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/>QMap&lt;int,int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedChannelDefaultOffsets.begin();<sp/>iterator<sp/>!=<sp/>selectedChannelDefaultOffsets.end();<sp/>++iterator)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>channelOffsets[iterator.key()]<sp/>=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1803bd6e2132568020a5ef2dba539af46" kindref="member">TraceView::resetGains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>selectedChannels){</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>alpha<sp/>*<sp/>(4/3)^gain,<sp/>gain<sp/>equals<sp/>0<sp/>at<sp/>the<sp/>begining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedChannels.begin();<sp/>iterator<sp/>!=<sp/>selectedChannels.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>gains[*iterator]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>channelFactors[*iterator]<sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1acd0592f3fd9725b8460e1c9617ef549" kindref="member">TraceView::showChannels</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>channelsToShow){</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/>shownChannels.clear();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>channelsToShowIterator;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(channelsToShowIterator<sp/>=<sp/>channelsToShow.begin();<sp/>channelsToShowIterator<sp/>!=<sp/>channelsToShow.end();<sp/>++channelsToShowIterator){</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>shownChannels.append(*channelsToShowIterator);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/></highlight><highlight class="comment">//remove<sp/>the<sp/>channels<sp/>in<sp/>selectedChannels<sp/>which<sp/>are<sp/>no<sp/>more<sp/>shown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>toRemoved;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedChannels.begin();<sp/>iterator<sp/>!=<sp/>selectedChannels.end();<sp/>++iterator)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!shownChannels.contains(*iterator))toRemoved.append(*iterator);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>toRemoved.begin();<sp/>iterator<sp/>!=<sp/>toRemoved.end();<sp/>++iterator)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>selectedChannels.remove(*iterator);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/>updateShownGroupsChannels(channelsToShow);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/></highlight><highlight class="comment">//Request<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/>tracesProvider.<ref refid="classTracesProvider_115a28fc38479728605849e1d8bb4aad9" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::updateShownGroupsChannels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>channelsToShow){</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/>uint<sp/>nbGpsShown<sp/>=<sp/>shownGroupsChannels.count();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/>shownGroupsChannels.clear();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGps<sp/>=<sp/>groupsChannels-&gt;count();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupsChannels-&gt;begin();<sp/>iterator<sp/>!=<sp/>groupsChannels-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>shownGroupsChannels.insert(iterator.key(),iterator.data());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!channelsToShow.contains(i)){</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupId<sp/>=<sp/>(*channelsGroups)[i];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[groupId];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/>channelIds.remove(i);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(channelIds.size()<sp/>==<sp/>0)<sp/>shownGroupsChannels.remove(groupId);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>shownGroupsChannels.replace(groupId,channelIds);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>trash<sp/>group<sp/>(index<sp/>0)<sp/>is<sp/>always<sp/>at<sp/>the<sp/>bottom<sp/>in<sp/>the<sp/>display,<sp/>so<sp/>reindex<sp/>it<sp/>with<sp/>the<sp/>highest<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shownGroupsChannels.contains(0)){</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[0];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>shownGroupsChannels.remove(0);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>shownGroupsChannels.insert(nbGps,channelIds);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>number<sp/>of<sp/>shown<sp/>groups<sp/>has<sp/>changed,<sp/>update<sp/>groupsChanged<sp/>to<sp/>correctly<sp/>update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shownGroupsChannels.count()<sp/>!=<sp/>nbGpsShown)<sp/>groupsChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_14c4a3549aa763d828f299293cd103439" kindref="member">TraceView::groupsModified</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/>updateShownGroupsChannels(shownChannels);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/>groupsChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/>updateWindow();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active)<sp/>update();</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_142febc88cac5ee6029aa303cdca2e02a" kindref="member">TraceView::setGains</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gain,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acquisitionGain){</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/>unitGain<sp/>=<sp/>gain;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/>this-&gt;acquisitionGain<sp/>=<sp/>acquisitionGain;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/></highlight><highlight class="comment">//Compute<sp/>alpha:<sp/>(3.traceVspace)<sp/>/<sp/>(Utheta<sp/>.<sp/>acquisitionGain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/></highlight><highlight class="comment">//Utheta:<sp/>amplitude<sp/>maximal<sp/>of<sp/>theta<sp/>in<sp/>milivolts,<sp/>0.4<sp/>mv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/>alpha<sp/>=<sp/><sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(3<sp/>*<sp/>traceVspace)<sp/>/</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;float&gt;(0.4<sp/>*<sp/><sp/>static_cast&lt;float&gt;(acquisitionGain)));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>alpha<sp/>*<sp/>(4/3)^gain,<sp/>gain<sp/>equals<sp/>0<sp/>at<sp/>the<sp/>begining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/>gains.clear();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/>channelFactors.clear();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>gains.append(0);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>channelFactors.append(alpha);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::computeChannelDisplayGain(){</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Those<sp/>gains<sp/>are<sp/>computed<sp/>as<sp/>(unitGain.alpha<sp/>/<sp/>screenResolution)<sp/>.(world-viewport<sp/>height<sp/>ratio)<sp/>.channelFactor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/>QRect<sp/>r((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>heightRatio<sp/>=<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(viewport.height())<sp/>/<sp/>static_cast&lt;float&gt;(r.height()));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta<sp/>=<sp/>static_cast&lt;float&gt;((static_cast&lt;float&gt;(unitGain)<sp/>*<sp/>alpha)/<sp/>static_cast&lt;float&gt;(screenResolution))<sp/>*<sp/>heightRatio;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/>channelDisplayGains.clear();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>channelDisplayGains.append(beta<sp/>*<sp/>pow(0.75,gains[i]));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::computeChannelDisplayGain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>channelIds){</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Those<sp/>gains<sp/>are<sp/>computed<sp/>as<sp/>(unitGain.alpha<sp/>/<sp/>screenResolution)<sp/>.(world-viewport<sp/>height<sp/>ratio)<sp/>.0.75^gain[i]).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/>QRect<sp/>r((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>heightRatio<sp/>=<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(viewport.height())<sp/>/<sp/>static_cast&lt;float&gt;(r.height()));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta<sp/>=<sp/>static_cast&lt;float&gt;((static_cast&lt;float&gt;(unitGain)<sp/>*<sp/>alpha)/<sp/>static_cast&lt;float&gt;(screenResolution))<sp/>*<sp/>heightRatio;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(channelIds.size());<sp/>++i){</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>channelDisplayGains[channelId]<sp/>=<sp/>static_cast&lt;float&gt;(beta<sp/>*<sp/>pow(0.75,gains[channelId]));</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1521f5624dc65f250b1ec00be11c61e37" kindref="member">TraceView::increaseAllAmplitude</ref>(){</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/></highlight><highlight class="comment">//Increases<sp/>the<sp/>ordinate<sp/>scale<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/></highlight><highlight class="comment">//an<sp/>reduction<sp/>of<sp/>the<sp/>traces<sp/>in<sp/>the<sp/>ordinate<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>traceVspace<sp/>/<sp/>((4/3)^gain<sp/>*<sp/>unitGain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>gains[i]--;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>channelFactors[i]<sp/>=<sp/>static_cast&lt;float&gt;(alpha<sp/>*<sp/>pow(0.75,gains[i]));</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1cbd3d6444c81ec515d87c381e077d1ea" kindref="member">TraceView::decreaseAllAmplitude</ref>(){</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/></highlight><highlight class="comment">//Decreases<sp/>the<sp/>ordinate<sp/>scale<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/></highlight><highlight class="comment">//an<sp/>enlargement<sp/>of<sp/>the<sp/>traces<sp/>in<sp/>the<sp/>ordinate<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>traceVspace<sp/>/<sp/>((4/3)^gain<sp/>*<sp/>unitGain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>gains[i]++;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>channelFactors[i]<sp/>=<sp/>static_cast&lt;float&gt;(alpha<sp/>*<sp/>pow(0.75,gains[i]));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1c52681dfe798393bc5d5186bf97a05ed" kindref="member">TraceView::increaseSelectedChannelsAmplitude</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>channelIds){</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/></highlight><highlight class="comment">//Increases<sp/>the<sp/>ordinate<sp/>scale<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/></highlight><highlight class="comment">//an<sp/>reduction<sp/>of<sp/>the<sp/>traces<sp/>in<sp/>the<sp/>ordinate<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(channelIds.size());<sp/>++i){</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>gains[channelId]--;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>channelFactors[channelId]<sp/>=<sp/>static_cast&lt;float&gt;(alpha<sp/>*<sp/>pow(0.75,gains[channelId]));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/>computeChannelDisplayGain(channelIds);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_150e36ea51a5bd89c335f2e13be17b2a7" kindref="member">TraceView::decreaseSelectedChannelsAmplitude</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>channelIds){</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/></highlight><highlight class="comment">//Decreases<sp/>the<sp/>ordinate<sp/>scale<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/></highlight><highlight class="comment">//an<sp/>enlargement<sp/>of<sp/>the<sp/>traces<sp/>in<sp/>the<sp/>ordinate<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(channelIds.size());<sp/>++i){</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>gains[channelId]++;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>channelFactors[channelId]<sp/>=<sp/>static_cast&lt;float&gt;(alpha<sp/>*<sp/>pow(0.75,gains[channelId]));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/>computeChannelDisplayGain(channelIds);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::updateWindow(){</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/></highlight><highlight class="comment">//reset<sp/>the<sp/>variables<sp/>for<sp/>the<sp/>zoom<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/>firstZoom<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/>maxZoomReached<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/>zoomFactor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGps<sp/>=<sp/>shownGroupsChannels.count();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbShownchannels<sp/>=<sp/>shownChannels.size();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldXshift<sp/>=<sp/>Xshift;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/></highlight><highlight class="comment">//traces<sp/>presented<sp/>on<sp/>a<sp/>single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!multiColumns){</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isInit){</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSamples<sp/>&lt;<sp/>viewport.width()<sp/>||<sp/>printState)<sp/>downSampling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>downSampling<sp/>=<sp/>static_cast&lt;float&gt;(nbSamples)<sp/>/<sp/>static_cast&lt;float&gt;(viewport.width());</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>timeStep<sp/>=<sp/>downSampling<sp/>*<sp/>timeStepUnit;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>abscissaMax<sp/>=<sp/>2<sp/>*<sp/>borderX<sp/>+<sp/>(nbSamplesToDraw<sp/>-1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbYspaces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>shownGroupsChannels.begin();<sp/>iterator<sp/>!=<sp/>shownGroupsChannels.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/></highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;QValueList&lt;int&gt;<sp/>&gt;(iterator.data()).size();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/>nbYspaces<sp/>+=<sp/>(currentNbChannels<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>nbClusters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>clustersIterator;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersIterator<sp/>=<sp/>selectedClusters.begin();<sp/>clustersIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++clustersIterator){</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbClusters<sp/>=<sp/></highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;QValueList&lt;int&gt;<sp/>&gt;(clustersIterator.data()).size();</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/>nbClusters<sp/>+=<sp/>currentNbClusters;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//there<sp/>are<sp/>cluster<sp/>rasters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(raster<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rasterTotalHeight<sp/>=<sp/>YTracesRasterSeparator<sp/>+<sp/>nbClusters<sp/>*<sp/>rasterHeight<sp/>+<sp/>(nbClusters<sp/>-<sp/>1)<sp/>*<sp/>YRasterSpace;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/>ordinateMin<sp/>=<sp/>-(borderY<sp/>+<sp/>borderY/2<sp/>+<sp/>(nbGps<sp/>-<sp/>1)<sp/>*<sp/>YGroupSpace<sp/>+<sp/>nbShownchannels<sp/>*<sp/>traceVspace<sp/>+<sp/>nbYspaces<sp/>*<sp/>Yspace</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rasterTotalHeight);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/>Y0<sp/>=<sp/>borderY/2<sp/>+<sp/>(nbGps<sp/>-<sp/>1)<sp/>*<sp/>YGroupSpace<sp/>+<sp/>nbShownchannels<sp/>*<sp/>traceVspace<sp/>+<sp/>nbYspaces<sp/>*<sp/>Yspace<sp/>-<sp/>(traceVspace/2)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rasterTotalHeight;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/>Y0Raster<sp/>=<sp/>borderY/2<sp/>+<sp/>rasterTotalHeight<sp/>-<sp/>YTracesRasterSeparator;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/>ordinateMin<sp/>=<sp/>-(2<sp/>*<sp/>borderY<sp/>+<sp/>(nbGps<sp/>-<sp/>1)<sp/>*<sp/>YGroupSpace<sp/>+<sp/>nbShownchannels<sp/>*<sp/>traceVspace<sp/>+<sp/>nbYspaces<sp/>*<sp/>Yspace);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/>Y0<sp/>=<sp/>borderY<sp/>+<sp/>(nbGps<sp/>-<sp/>1)<sp/>*<sp/>YGroupSpace<sp/>+<sp/>nbShownchannels<sp/>*<sp/>traceVspace<sp/>+<sp/>nbYspaces<sp/>*<sp/>Yspace<sp/>-<sp/>(traceVspace/2);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/></highlight><highlight class="comment">//traces<sp/>presented<sp/>on<sp/>multiple<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isInit){</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSamples<sp/>&lt;<sp/>viewport.width()<sp/>||<sp/>printState)<sp/>downSampling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroups<sp/>=<sp/>shownGroupsChannels.count();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbGroups<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>traceWidth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>downSampling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>traceWidth<sp/>=<sp/>(viewport.width()<sp/>-<sp/>(nbGroups<sp/>-<sp/>1)<sp/>*<sp/>xMargin)<sp/>/<sp/>nbGroups;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>downSampling<sp/>=<sp/>static_cast&lt;float&gt;(nbSamples)<sp/>/<sp/>static_cast&lt;float&gt;(traceWidth);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>timeStep<sp/>=<sp/>downSampling<sp/>*<sp/>timeStepUnit;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Those<sp/>variables<sp/>depend<sp/>on<sp/>the<sp/>number<sp/>of<sp/>groups,the<sp/>number<sp/>of<sp/>channels<sp/>and<sp/>the<sp/>size<sp/>of<sp/>the<sp/>previous<sp/>window<sp/>and<sp/>viewport<sp/>rectangles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>XGroupSpace<sp/>=<sp/><ref refid="classBaseFrame_1d637eb7a91439ee66bacb4efd6445572" kindref="member">viewportToWorldWidth</ref>(xMargin);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>abscissaMax<sp/>=<sp/>2<sp/>*<sp/>borderX<sp/>+<sp/>(nbSamplesToDraw<sp/>-1)<sp/>*<sp/>Xstep<sp/>*<sp/>nbGps<sp/>+<sp/>(nbGps<sp/>-<sp/>1)<sp/>*<sp/>XGroupSpace;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>Xshift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep<sp/>+<sp/>XGroupSpace;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxNbChannels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>shownGroupsChannels.begin();<sp/>iterator<sp/>!=<sp/>shownGroupsChannels.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/></highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;QValueList&lt;int&gt;<sp/>&gt;(iterator.data()).size();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentNbChannels<sp/>&gt;<sp/>maxNbChannels)<sp/>maxNbChannels<sp/>=<sp/>currentNbChannels;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>nbClusters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>clustersIterator;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersIterator<sp/>=<sp/>selectedClusters.begin();<sp/>clustersIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++clustersIterator){</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbClusters<sp/>=<sp/></highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;QValueList&lt;int&gt;<sp/>&gt;(clustersIterator.data()).size();</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/>nbClusters<sp/>+=<sp/>currentNbClusters;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//there<sp/>are<sp/>cluster<sp/>raster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(raster<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxNbClusters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>clusters<sp/>which<sp/>will<sp/>be<sp/>drawn<sp/>beneath<sp/>a<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupIds.begin();<sp/>iterator<sp/>!=<sp/>groupIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbClusters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterFileList<sp/>=<sp/>(*groupClusterFiles)[*iterator];</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>spikeGroupIterator;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(spikeGroupIterator<sp/>=<sp/>clusterFileList.begin();<sp/>spikeGroupIterator<sp/>!=<sp/>clusterFileList.end();<sp/>++spikeGroupIterator){</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedClusters.contains(*spikeGroupIterator)){</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selection<sp/>=<sp/></highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;QValueList&lt;int&gt;<sp/>&gt;(selectedClusters[*spikeGroupIterator]);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentNbClusters<sp/>+=<sp/>selection.size();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentNbClusters<sp/>&gt;<sp/>maxNbClusters)<sp/>maxNbClusters<sp/>=<sp/>currentNbClusters;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rasterTotalHeight<sp/>=<sp/>YTracesRasterSeparator<sp/>+<sp/>maxNbClusters<sp/>*<sp/>rasterHeight<sp/>+<sp/>(maxNbClusters<sp/>-<sp/>1)<sp/>*<sp/>YRasterSpace;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/>ordinateMin<sp/>=<sp/>-(borderY<sp/>+<sp/>borderY/2<sp/>+<sp/>maxNbChannels<sp/>*<sp/>traceVspace<sp/>+<sp/>(maxNbChannels<sp/>-<sp/>1)<sp/>*<sp/>Yspace</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rasterTotalHeight);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/>Y0<sp/>=<sp/>borderY/2<sp/>+<sp/>maxNbChannels<sp/>*<sp/>traceVspace<sp/>+<sp/>(maxNbChannels<sp/>-<sp/>1)<sp/>*<sp/>Yspace<sp/>-<sp/>(traceVspace/2)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rasterTotalHeight;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/>Y0Raster<sp/>=<sp/>borderY/2<sp/>+<sp/>rasterTotalHeight<sp/>-<sp/>YTracesRasterSeparator;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/>ordinateMin<sp/>=<sp/>-(2<sp/>*<sp/>borderY<sp/>+<sp/>maxNbChannels<sp/>*<sp/>traceVspace<sp/>+<sp/>(maxNbChannels<sp/>-<sp/>1)<sp/>*<sp/>Yspace);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/>Y0<sp/>=<sp/>borderY<sp/>+<sp/>maxNbChannels<sp/>*<sp/>traceVspace<sp/>+<sp/>(maxNbChannels<sp/>-<sp/>1)<sp/>*<sp/>Yspace<sp/>-<sp/>(traceVspace/2);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref><sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(QRect(QPoint(abscissaMin,ordinateMin),QPoint(abscissaMax,ordinateMax)));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(columnDisplayChanged<sp/>||<sp/>groupsChanged){</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>columnDisplayChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>groupsChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/></highlight><highlight class="comment">//Certain<sp/>variables<sp/>used<sp/>to<sp/>compute<sp/>the<sp/>window<sp/>in<sp/>multicolumns<sp/>mode<sp/>depend<sp/>on<sp/>the<sp/>size<sp/>of<sp/>the<sp/>previous<sp/>window<sp/>and<sp/>viewport<sp/>rectangles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/></highlight><highlight class="comment">//To<sp/>have<sp/>an<sp/>acurate<sp/>window<sp/>size,<sp/>we<sp/>loop<sp/>until<sp/>the<sp/>size<sp/>of<sp/>the<sp/>window<sp/>is<sp/>stabilized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns<sp/>&amp;&amp;<sp/>oldXshift<sp/>!=<sp/>Xshift)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/></highlight><highlight class="comment">//Recompute<sp/>the<sp/>display<sp/>gains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawTrace(QPainter&amp;<sp/>painter,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>basePosition,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mouseMoveEvent){</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterFileId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>QString<sp/>providerName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterProviders.isEmpty()){</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/>clusterFileId<sp/>=<sp/>(*channelClusterFiles)[channelId];</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterFileId);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.find(providerName)<sp/>!=<sp/>0)<sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveforms<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>!areClustersToDraw)<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>areClustersToDraw<sp/>&amp;&amp;<sp/>mouseMoveEvent)<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>areClustersToDraw<sp/>&amp;&amp;<sp/>!selectedClusters.contains(clusterFileId))){</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/>static_cast&lt;int&gt;(floor(downSampling<sp/>+<sp/>0.5));</highlight><highlight class="comment">//included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>data(1,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>start<sp/>+<sp/>1;k&lt;=<sp/>stop;++k){</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>data(k,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>min)<sp/>min<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&gt;<sp/>max)<sp/>max<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMin<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(min<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMax<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(max<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((yMax<sp/>-<sp/>yMin)<sp/>&lt;=<sp/>limit){</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawPoint(X,yMin);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawLine(X,yMin,X,yMax);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>previousMin<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>previousMax<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;=<sp/>nbSamplesToDraw;++i){</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>static_cast&lt;int&gt;(floor((i-1)<sp/>*<sp/>downSampling<sp/>+<sp/>0.5<sp/>+<sp/>1));</highlight><highlight class="comment">//the<sp/>index<sp/>in<sp/>data<sp/>starts<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>QMIN(static_cast&lt;int&gt;(floor(i<sp/>*<sp/>downSampling<sp/>+<sp/>0.5)),nbSamples);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>data(start,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>start<sp/>+<sp/>1;k&lt;=<sp/>stop;++k){</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>data(k,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>min)<sp/>min<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&gt;<sp/>max)<sp/>max<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min<sp/>&gt;<sp/>previousMax)<sp/>min<sp/>=<sp/>previousMax;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max<sp/>&lt;<sp/>previousMin)<sp/>max<sp/>=<sp/>previousMin;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>previousMax<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>previousMin<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(min<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(max<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((yMax<sp/>-<sp/>yMin)<sp/>&lt;=<sp/>limit){</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawPoint(X,yMin);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawLine(X,yMin,X,yMax);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>4<sp/>lines:<sp/>sample<sp/>starting<sp/>index,<sp/>abscissa,<sp/>ordinate<sp/>min,<sp/>ordinate<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>traceInfo(4,nbSamplesToDraw);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/>static_cast&lt;int&gt;(floor(downSampling<sp/>+<sp/>0.5));</highlight><highlight class="comment">//included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>data(1,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>start<sp/>+<sp/>1;k&lt;=<sp/>stop;++k){</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>data(k,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>min)<sp/>min<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&gt;<sp/>max)<sp/>max<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMin<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(min<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMax<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(max<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((yMax<sp/>-<sp/>yMin)<sp/>&lt;=<sp/>limit){</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawPoint(X,yMin);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawLine(X,yMin,X,yMax);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/>traceInfo(1,1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/>traceInfo(2,1)<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/>traceInfo(3,1)<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/>traceInfo(4,1)<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>previousMin<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>previousMax<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;=<sp/>nbSamplesToDraw;++i){</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>static_cast&lt;int&gt;(floor((i-1)<sp/>*<sp/>downSampling<sp/>+<sp/>0.5<sp/>+<sp/>1));</highlight><highlight class="comment">//the<sp/>index<sp/>in<sp/>data<sp/>starts<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>QMIN(static_cast&lt;int&gt;(floor(i<sp/>*<sp/>downSampling<sp/>+<sp/>0.5)),nbSamples);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>data(start,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>start<sp/>+<sp/>1;k&lt;=<sp/>stop;++k){</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>data(k,channelId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>min)<sp/>min<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&gt;<sp/>max)<sp/>max<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min<sp/>&gt;<sp/>previousMax)<sp/>min<sp/>=<sp/>previousMax;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max<sp/>&lt;<sp/>previousMin)<sp/>max<sp/>=<sp/>previousMin;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>previousMax<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>previousMin<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(min<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(max<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((yMax<sp/>-<sp/>yMin)<sp/>&lt;=<sp/>limit){</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawPoint(X,yMin);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawLine(X,yMin,X,yMax);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>traceInfo(1,i)<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>traceInfo(2,i)<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>traceInfo(3,i)<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>traceInfo(4,i)<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>waveforms<sp/>on<sp/>top<sp/>of<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedClusters[clusterFileId];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbSpikes<sp/>+<sp/>1;++i){</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstIndex<sp/>=<sp/>index<sp/>-<sp/>nbSamplesBefore;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastIndex<sp/>=<sp/>index<sp/>+<sp/>nbSamplesAfter;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.contains(clusterId)){</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(clusterId);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.setPen(color);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>currentIndex;<sp/>j<sp/>&lt;=<sp/>nbSamplesToDraw;++j){</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>&gt;<sp/>traceInfo(1,j))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight><highlight class="comment">//case<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>&lt;=<sp/>traceInfo(1,j)){</highlight><highlight class="comment">//case<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>j;k&lt;=<sp/>nbSamplesToDraw;++k){</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(traceInfo(1,k)<sp/>&gt;<sp/>lastIndex){</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(traceInfo(1,k)<sp/>&lt;=<sp/>lastIndex){</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(traceInfo(3,k)<sp/>!=<sp/>traceInfo(4,k))<sp/>painter.drawLine(traceInfo(2,k),traceInfo(3,k),traceInfo(2,k),traceInfo(4,k));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>painter.drawPoint(traceInfo(2,k),traceInfo(3,k));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>samples<sp/>to<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//waveform<sp/>to<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawTraces(QValueList&lt;int&gt;<sp/>channels,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>highlight){</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>painter<sp/>to<sp/>paint<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>painter.begin(&amp;doublebuffer);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>viewport<sp/>(part<sp/>of<sp/>the<sp/>device<sp/>I<sp/>want<sp/>to<sp/>write<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//By<sp/>default,<sp/>the<sp/>viewport<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>device&apos;s<sp/>rectangle<sp/>(contentsRec),<sp/>taking<sp/>a<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//one<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>legends<sp/>(cluster<sp/>ids)<sp/>will<sp/>not<sp/>ovelap<sp/>a<sp/>correlogram.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Paint<sp/>the<sp/>selected<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/><ref refid="classBaseFrame_18a56e7d97d02b9906e63526db945ebed" kindref="member">viewportToWorldHeight</ref>(1);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>channels.begin();iterator<sp/>!=<sp/>channels.end();++iterator){<sp/></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(*iterator))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>basePosition<sp/>=<sp/>channelsStartingOrdinate[*iterator]<sp/>+<sp/><sp/>static_cast&lt;long&gt;(data(1,*iterator<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[*iterator]);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!multiColumns)<sp/>X<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>channelsStartingAbscissa[*iterator];</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>color<sp/>associated<sp/>with<sp/>the<sp/>channel<sp/>and<sp/>set<sp/>the<sp/>color<sp/>to<sp/>use<sp/>to<sp/>this<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>channelColors-&gt;<ref refid="classChannelColors_1b73b95f8d1942d66955e3223812aba9e" kindref="member">color</ref>(*iterator);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(greyScaleMode){</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>greyvalue<sp/>=<sp/>qGray(color.rgb());</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/>color.setHsv(0,0,greyvalue);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//draw<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight){</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,2);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,basePosition,X,*iterator,nbSamplesToDraw);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//highlight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),2);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,basePosition,X,*iterator,nbSamplesToDraw);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redraw<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pen.setWidth(1);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!multiColumns)<sp/>X<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>channelsStartingAbscissa[*iterator];</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,basePosition,X,*iterator,nbSamplesToDraw);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterFileId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterProviders.isEmpty()){</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterFileId<sp/>=<sp/>(*channelClusterFiles)[*iterator];</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterFileId);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.find(providerName)<sp/>!=<sp/>0)<sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveforms<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>!areClustersToDraw)<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>areClustersToDraw<sp/>&amp;&amp;<sp/>!selectedClusters.contains(clusterFileId))){</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(data(i<sp/>+<sp/>1,*iterator<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[*iterator]);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i,X,y);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight){</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,2);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),2);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(1);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>3<sp/>lines:<sp/>sample<sp/>index,<sp/>abscissa<sp/>and<sp/>ordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>traceInfo(3,nbSamples);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(data(i,*iterator<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[*iterator]);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i<sp/>-<sp/>1,X,y);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(1,i)<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(2,i)<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(3,i)<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight){</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,2);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),2);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(1);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>waveforms<sp/>on<sp/>top<sp/>of<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedClusters[clusterFileId];</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbSpikes<sp/>+<sp/>1;++i){</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstIndex<sp/>=<sp/>QMAX(0,index<sp/>-<sp/>nbSamplesBefore);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastIndex<sp/>=<sp/>QMIN(nbSamples,index<sp/>+<sp/>nbSamplesAfter);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbWaveformSamples<sp/>=<sp/>lastIndex<sp/>-<sp/>firstIndex<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.contains(clusterId)){</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(clusterId);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>currentIndex;<sp/>j<sp/>&lt;=<sp/>nbSamples;++j){</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>&gt;<sp/>traceInfo(1,j))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight><highlight class="comment">//case<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>==<sp/>traceInfo(1,j)){</highlight><highlight class="comment">//case<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbWaveformSamples);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>firstIndex;k&lt;=<sp/>lastIndex;++k){</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(pos,traceInfo(2,k),traceInfo(3,k));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight){</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,2);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),2);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(1);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>firstIndex;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>samples<sp/>to<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else<sp/>waveform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reset<sp/>transformation<sp/>due<sp/>to<sp/>setWindow<sp/>and<sp/>setViewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>painter.resetXForm()<sp/>;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>channel<sp/>ids<sp/>and<sp/>amplitude<sp/>on<sp/>the<sp/>left<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(showLabels){</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/>QFont<sp/>f(</highlight><highlight class="stringliteral">&quot;Helvetica&quot;</highlight><highlight class="normal">,8);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/>painter.setFont(f);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/>painter.setPen(<ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref>);<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>color<sp/>for<sp/>the<sp/>legends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>windowRectangle((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>channels.begin();iterator<sp/>!=<sp/>channels.end();++iterator){</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(*iterator))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>channelsStartingOrdinate[*iterator];</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>channelsStartingAbscissa[*iterator];</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>r;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>rHighlight;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>view<sp/>was<sp/>zoomed<sp/>and<sp/>the<sp/>left<sp/>margin<sp/>(where<sp/>the<sp/>ids<sp/>and<sp/>gains<sp/>of<sp/>the<sp/>channels<sp/>of<sp/>the<sp/>first<sp/>group<sp/>are<sp/>displayed)<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//shown<sp/>(r.left()<sp/>!=<sp/>0),<sp/>the<sp/>coordinates<sp/>have<sp/>to<sp/>be<sp/>adjusted.<sp/>Indeed,<sp/>this<sp/>margin<sp/>is<sp/>outside<sp/>the<sp/>world<sp/>but<sp/>in<sp/>the<sp/>viewport.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowRectangle.left()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>-<sp/>xMargin,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,<ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(traceVspace<sp/>+<sp/>Yspace));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rHighlight<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>-<sp/>xMargin,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,12);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>+<sp/>4,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,<ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(traceVspace<sp/>+<sp/>Yspace));</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rHighlight<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>+<sp/>4,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,12);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gain<sp/>=<sp/>channelDisplayGains[*iterator];</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight)<sp/>painter.fillRect(rHighlight,colorGroup().highlight());</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>painter.fillRect(rHighlight,backgroundColor());</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawText(r,Qt::AlignHCenter<sp/>|<sp/>Qt::AlignTop,QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>x%2&quot;</highlight><highlight class="normal">).arg(*iterator).arg(gain,0,</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,2));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Closes<sp/>the<sp/>painter<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)<sp/>by<sp/>copying<sp/>it<sp/>into<sp/>the<sp/>widget<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawTraces(QPainter&amp;<sp/>painter){</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/>channelsStartingOrdinate.clear();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/><ref refid="classBaseFrame_18a56e7d97d02b9906e63526db945ebed" kindref="member">viewportToWorldHeight</ref>(1);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/></highlight><highlight class="comment">//traces<sp/>presented<sp/>on<sp/>multiple<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>ordinate<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>Y0;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Start<sp/>at<sp/>the<sp/>top<sp/>of<sp/>the<sp/>view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>groups<sp/>(one<sp/>by<sp/>column)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>clustersOrder.clear();</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>rasterOrdinates.clear();</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>rasterAbscisses.clear();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupIds.begin();<sp/>iterator<sp/>!=<sp/>groupIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()){</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>windowRectangle((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>windowRectangle.top();</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>windowRectangle.bottom();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>QPen<sp/>pen(Qt::DotLine);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedEvents.begin();<sp/>iterator<sp/>!=<sp/>selectedEvents.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>eventList<sp/>=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.size()<sp/>==<sp/>0<sp/>||<sp/>eventsData[providerName]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getTimes();</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getIds();</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.contains(eventId)){</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(eventId);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>X<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verticalLines<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>windowRectangle((QRect)window);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>windowRectangle.top();</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>windowRectangle.bottom();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterFileList<sp/>=<sp/>(*groupClusterFiles)[*iterator];</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>QMap&lt;int,QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>selectedIterator;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(selectedIterator<sp/>=<sp/>selectedClusters.begin();<sp/>selectedIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++selectedIterator){</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Only<sp/>draw<sp/>vertical<sp/>lines<sp/>for<sp/>clusters<sp/>contained<sp/>in<sp/>a<sp/>cluster<sp/>file<sp/>containing<sp/>data<sp/>for<sp/>channels<sp/>of<sp/>the<sp/>current<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterFileList.contains(selectedIterator.key()))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(selectedIterator.key());</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData[providerName]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedIterator.data();</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusterList.begin();<sp/>clusterIterator<sp/>!=<sp/>clusterList.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(*clusterIterator);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(color);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes;++i){</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>*clusterIterator){</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>X<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//verticalLines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[*iterator];</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/>channelIds.size();</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>Y;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>currentNbChannels;<sp/>++j){</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[j];</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>-y<sp/>+<sp/>channelOffsets[channelId];</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>positions.append(position);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>channelsStartingOrdinate.insert(channelId,position<sp/>-<sp/>static_cast&lt;long&gt;(data(1,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]));</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>channelsStartingAbscissa.insert(channelId,X);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>currentNbChannels;<sp/>++j){</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[j];</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(channelId))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>channelColors-&gt;<ref refid="classChannelColors_1b73b95f8d1942d66955e3223812aba9e" kindref="member">color</ref>(channelId);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(greyScaleMode){</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>greyvalue<sp/>=<sp/>qGray(color.rgb());</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>color.setHsv(0,0,greyvalue);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,1);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(channelId))<sp/>pen.setWidth(2);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,positions[j],X,channelId,nbSamplesToDraw);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterFileId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterProviders.isEmpty()){</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterFileId<sp/>=<sp/>(*channelClusterFiles)[channelId];</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterFileId);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.find(providerName)<sp/>!=<sp/>0)<sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveforms<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>!areClustersToDraw)<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>areClustersToDraw<sp/>&amp;&amp;<sp/>!selectedClusters.contains(clusterFileId))){</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>positions[j]<sp/>-<sp/>static_cast&lt;long&gt;(data(i<sp/>+<sp/>1,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i,X<sp/>+<sp/>x,y);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>3<sp/>lines:<sp/>sample<sp/>index,<sp/>abscissa<sp/>and<sp/>ordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>traceInfo(3,nbSamples);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>positions[j]<sp/>-<sp/>static_cast&lt;long&gt;(data(i,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i<sp/>-<sp/>1,X<sp/>+<sp/>x,y);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(1,i)<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(2,i)<sp/>=<sp/>X<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(3,i)<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>waveforms<sp/>on<sp/>top<sp/>of<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedClusters[clusterFileId];</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbSpikes<sp/>+<sp/>1;++i){</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstIndex<sp/>=<sp/>QMAX(1,index<sp/>-<sp/>nbSamplesBefore);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastIndex<sp/>=<sp/>QMIN(nbSamples,index<sp/>+<sp/>nbSamplesAfter);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbWaveformSamples<sp/>=<sp/>lastIndex<sp/>-<sp/>firstIndex<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.contains(clusterId)){</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(clusterId);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,1);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(channelId))<sp/>pen.setWidth(2);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>currentIndex;<sp/>j<sp/>&lt;=<sp/>nbSamples;++j){</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>&gt;<sp/>traceInfo(1,j))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight><highlight class="comment">//case<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>==<sp/>traceInfo(1,j)){</highlight><highlight class="comment">//case<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbWaveformSamples);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>firstIndex;k&lt;=<sp/>lastIndex;++k){</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(pos,traceInfo(2,k),traceInfo(3,k));</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>firstIndex;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>samples<sp/>to<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else<sp/>waveform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>selected<sp/>clusters<sp/>(first<sp/>on<sp/>the<sp/>cluster<sp/>files<sp/>containing<sp/>selected<sp/>clusters)<sp/>if<sp/>the<sp/>raster<sp/>is<sp/>asked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(raster<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>Y0Raster;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterFileList<sp/>=<sp/>(*groupClusterFiles)[*iterator];</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>QMap&lt;int,QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>selectedIterator;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(selectedIterator<sp/>=<sp/>selectedClusters.begin();<sp/>selectedIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++selectedIterator){</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Only<sp/>draw<sp/>rasters<sp/>for<sp/>clusters<sp/>contained<sp/>in<sp/>a<sp/>cluster<sp/>file<sp/>containing<sp/>data<sp/>for<sp/>channels<sp/>of<sp/>the<sp/>current<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterFileList.contains(selectedIterator.key()))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedIterator.data();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(selectedIterator.key());</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusterList.begin();<sp/>clusterIterator<sp/>!=<sp/>clusterList.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/>identifier<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1-%2&quot;</highlight><highlight class="normal">).arg(providerName).arg(*clusterIterator);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clustersOrder.append(identifier);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rasterOrdinates.append(-y);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rasterAbscisses.append(X);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(*clusterIterator);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(color);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>y<sp/>-<sp/>rasterHeight;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes;++i){</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>*clusterIterator){</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>X<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,-y,abscissa,-bottom);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>(rasterHeight<sp/>+<sp/>YRasterSpace);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//raster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/>X<sp/>+=<sp/>Xshift;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//groups<sp/>(&lt;=&gt;<sp/>columns)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/>}</highlight><highlight class="comment">//multicolumns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/></highlight><highlight class="comment">//traces<sp/>presented<sp/>on<sp/>a<sp/>single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()){</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>windowRectangle((QRect)window);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>windowRectangle.top();</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>windowRectangle.bottom();</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/>QPen<sp/>pen(Qt::DotLine);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedEvents.begin();<sp/>iterator<sp/>!=<sp/>selectedEvents.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>eventList<sp/>=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.size()<sp/>==<sp/>0<sp/>||<sp/>eventsData[providerName]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getTimes();</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getIds();</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.contains(eventId)){</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(eventId);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>clusters<sp/>on<sp/>vertical<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verticalLines<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>windowRectangle((QRect)window);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>windowRectangle.top();</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>windowRectangle.bottom();</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[iterator.currentKey()];</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedClusters[iterator.currentKey().toInt()];</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>iterator.current()-&gt;getData();</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbSpikes<sp/>+<sp/>1;++i){</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);<sp/></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.contains(clusterId)){</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(clusterId);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(color);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//verticalLines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>ordinate<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>Y0;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Start<sp/>at<sp/>the<sp/>top<sp/>of<sp/>the<sp/>view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupIds.begin();<sp/>iterator<sp/>!=<sp/>groupIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[*iterator];</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/>channelIds.size();</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>Y;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>currentNbChannels;<sp/>++j){</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[j];</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>-y<sp/>+<sp/>channelOffsets[channelId];</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>positions.append(position);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>channelsStartingOrdinate.insert(channelId,position<sp/>-<sp/>static_cast&lt;long&gt;(data(1,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]));</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>channelsStartingAbscissa.insert(channelId,X0);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>currentNbChannels;<sp/>++j){</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[j];</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(channelId))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>color<sp/>associated<sp/>with<sp/>the<sp/>channel<sp/>and<sp/>set<sp/>the<sp/>color<sp/>to<sp/>use<sp/>to<sp/>this<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>channelColors-&gt;<ref refid="classChannelColors_1b73b95f8d1942d66955e3223812aba9e" kindref="member">color</ref>(channelId);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(greyScaleMode){</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>greyvalue<sp/>=<sp/>qGray(color.rgb());</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>color.setHsv(0,0,greyvalue);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,1);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(channelId))<sp/>pen.setWidth(2);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,positions[j],X,channelId,nbSamplesToDraw);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterFileId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterProviders.isEmpty()){</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterFileId<sp/>=<sp/>(*channelClusterFiles)[channelId];</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterFileId);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersData.find(providerName)<sp/>!=<sp/>0)<sp/>areClustersToDraw<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveforms<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>!areClustersToDraw)<sp/>||<sp/>(waveforms<sp/>&amp;&amp;<sp/>areClustersToDraw<sp/>&amp;&amp;<sp/>!selectedClusters.contains(clusterFileId))){</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>positions[j]<sp/>-<sp/>static_cast&lt;long&gt;(data(i<sp/>+<sp/>1,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i,X,y);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>3<sp/>lines:<sp/>sample<sp/>index,<sp/>abscissa<sp/>and<sp/>ordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>traceInfo(3,nbSamples);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>positions[j]<sp/>-<sp/>static_cast&lt;long&gt;(data(i,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i<sp/>-<sp/>1,X,y);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(1,i)<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(2,i)<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceInfo(3,i)<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>waveforms<sp/>on<sp/>top<sp/>of<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>selectedClusters[clusterFileId];</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbSpikes<sp/>+<sp/>1;++i){</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstIndex<sp/>=<sp/>QMAX(1,index<sp/>-<sp/>nbSamplesBefore);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastIndex<sp/>=<sp/>QMIN(nbSamples,index<sp/>+<sp/>nbSamplesAfter);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbWaveformSamples<sp/>=<sp/>lastIndex<sp/>-<sp/>firstIndex<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.contains(clusterId)){</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(clusterId);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(color,1);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(channelId))<sp/>pen.setWidth(2);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>currentIndex;<sp/>j<sp/>&lt;=<sp/>nbSamples;++j){</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>&gt;<sp/>traceInfo(1,j))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight><highlight class="comment">//case<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstIndex<sp/>==<sp/>traceInfo(1,j)){</highlight><highlight class="comment">//case<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbWaveformSamples);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>firstIndex;k&lt;=<sp/>lastIndex;++k){</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(pos,traceInfo(2,k),traceInfo(3,k));</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>firstIndex;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>samples<sp/>to<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>on<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else<sp/>waveform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/>Y<sp/>-=<sp/>(currentNbChannels<sp/>*<sp/>traceVspace<sp/>+<sp/>(currentNbChannels<sp/>-1)<sp/>*<sp/>Yspace);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/>Y<sp/>-=<sp/>YGroupSpace;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>clustersOrder.clear();</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>rasterOrdinates.clear();</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>rasterAbscisses.clear();</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>selected<sp/>clusters<sp/>(first<sp/>on<sp/>the<sp/>cluster<sp/>files<sp/>containing<sp/>selected<sp/>clusters)<sp/>if<sp/>the<sp/>raster<sp/>is<sp/>asked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(raster<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/>Y<sp/>=<sp/>Y0Raster;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/>QMap&lt;int,QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedClusters.begin();<sp/>iterator<sp/>!=<sp/>selectedClusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterList<sp/>=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterList.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(iterator.key());</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;ClusterData*&gt;(clustersData[providerName])-&gt;getData();</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSpikes<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusterList.begin();<sp/>clusterIterator<sp/>!=<sp/>clusterList.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QString<sp/>identifier<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1-%2&quot;</highlight><highlight class="normal">).arg(providerName).arg(*clusterIterator);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clustersOrder.append(identifier);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rasterOrdinates.append(-Y);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rasterAbscisses.append(0);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(*clusterIterator);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.setPen(color);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>Y<sp/>-<sp/>rasterHeight;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbSpikes<sp/>+<sp/>1;++i){</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>currentData(2,i);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>*clusterIterator){</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,-Y,abscissa,-bottom);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Y<sp/>-=<sp/>(rasterHeight<sp/>+<sp/>YRasterSpace);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//raster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/>}</highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawChannelIdsAndGain(QPainter&amp;<sp/>painter){</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/>QFont<sp/>f(</highlight><highlight class="stringliteral">&quot;Helvetica&quot;</highlight><highlight class="normal">,8);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/>painter.setFont(f);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/>painter.setPen(<ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref>);<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>color<sp/>for<sp/>the<sp/>legends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/>QRect<sp/>windowRectangle((QRect)window);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!multiColumns<sp/>&amp;&amp;<sp/>(windowRectangle.left()<sp/>&gt;=<sp/>xMargin)){</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupIds.begin();<sp/>iterator<sp/>!=<sp/>groupIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[*iterator];</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>channelIterator;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(channelIterator<sp/>=<sp/>channelIds.begin();<sp/>channelIterator<sp/>!=<sp/>channelIds.end();<sp/>++channelIterator){</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(skippedChannels.contains(*channelIterator<sp/>))<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>channelsStartingOrdinate[*channelIterator];</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>channelsStartingAbscissa[*channelIterator];</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>r;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>rHighlight;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>view<sp/>was<sp/>zoomed<sp/>and<sp/>the<sp/>left<sp/>margin<sp/>(where<sp/>the<sp/>ids<sp/>and<sp/>gains<sp/>of<sp/>the<sp/>channels<sp/>of<sp/>the<sp/>first<sp/>group<sp/>are<sp/>displayed)<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//shown<sp/>(r.left()<sp/>!=<sp/>0),<sp/>the<sp/>coordinates<sp/>have<sp/>to<sp/>be<sp/>adjusted.<sp/>Indeed,<sp/>this<sp/>margin<sp/>is<sp/>outside<sp/>the<sp/>world<sp/>but<sp/>in<sp/>the<sp/>viewport.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowRectangle.left()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>-<sp/>xMargin,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,<ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(traceVspace<sp/>+<sp/>Yspace));</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rHighlight<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>-<sp/>xMargin,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,12);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>+<sp/>4,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,<ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(traceVspace<sp/>+<sp/>Yspace));</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rHighlight<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>+<sp/>4,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,12);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gain<sp/>=<sp/>channelDisplayGains[*channelIterator];</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(*channelIterator))<sp/>painter.fillRect(rHighlight,colorGroup().highlight());</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>painter.fillRect(rHighlight,backgroundColor());</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawText(r,Qt::AlignHCenter<sp/>|<sp/>Qt::AlignTop,QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>x%2&quot;</highlight><highlight class="normal">).arg(*channelIterator).arg(gain,0,</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,2));</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(raster){</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>cluster<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>static_cast&lt;int&gt;(clustersOrder.size());++i){</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>rasterOrdinates[i];</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>clusterIdentifier<sp/>=<sp/>clustersOrder[i];</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>rasterAbscisses[i];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>r;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>rHighlight;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowRectangle.left()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>-<sp/>xMargin,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,<ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(traceVspace<sp/>+<sp/>Yspace));</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rHighlight<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>-<sp/>xMargin,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,12);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>+<sp/>4,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,<ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(traceVspace<sp/>+<sp/>Yspace));</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rHighlight<sp/>=<sp/>QRect(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).x()<sp/>+<sp/>4,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(abscissa,position).y(),xMargin<sp/>-<sp/>4,12);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.fillRect(rHighlight,backgroundColor());</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawText(r,Qt::AlignHCenter<sp/>|<sp/>Qt::AlignTop,clusterIdentifier);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawTimeLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialLine,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>eraseLine){</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/>painter.begin(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/>painter.setRasterOp(NotROP);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/>painter.setPen(QPen(color0,1));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/>painter.setBrush(NoBrush);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>r.top();</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>r.bottom();</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>x<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>currentAbscissae;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbColumns;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>max;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>min;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>nbColumns<sp/>=<sp/>shownGroupsChannels.count();<sp/></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>current<sp/>abscissae<sp/>in<sp/>each<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i){</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>currentAbscissae.append(linePositions[i]<sp/>+<sp/>delta);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastClickAbscissa<sp/>&lt;=<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>groupIndex<sp/>=<sp/>((lastClickAbscissa<sp/>-<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>invisible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastClickAbscissa<sp/>&lt;<sp/>shift<sp/>+<sp/>XGroupSpace)<sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>groupIndex<sp/>=<sp/>((lastClickAbscissa<sp/>-<sp/>(shift<sp/>+<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>min<sp/>and<sp/>max<sp/>abscissae<sp/>in<sp/>each<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i){<sp/></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>min.append(X0<sp/>+<sp/>i<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>max.append(X0<sp/>+<sp/>i<sp/>*<sp/>Xshift<sp/>+<sp/>nbSamplesToDraw<sp/>-<sp/>1);</highlight><highlight class="comment">//points<sp/>draw<sp/>from<sp/>0<sp/>to<sp/>(nbSamplesToDraw<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>nbColumns<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>currentAbscissae.append(linePositions[0]<sp/>+<sp/>delta);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>max.append(nbSamplesToDraw<sp/>-<sp/>1);</highlight><highlight class="comment">//points<sp/>draw<sp/>from<sp/>0<sp/>to<sp/>(nbSamplesToDraw<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>min.append(borderX);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>user<sp/>went<sp/>to<sp/>far<sp/>on<sp/>the<sp/>left,<sp/>draw<sp/>a<sp/>line<sp/>at<sp/>the<sp/>minimum<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentAbscissae[groupIndex]<sp/>&lt;<sp/>min[groupIndex]){</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!initialLine){</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>previousAbscissae;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i)<sp/>previousAbscissae.append(linePositions[i]<sp/>+<sp/>previousDelta);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissae[groupIndex]<sp/>&gt;=<sp/>min[groupIndex]){</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i){<sp/><sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(previousAbscissae[i],top,previousAbscissae[i],bottom);<sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!eraseLine)<sp/>painter.drawLine(min[i],top,min[i],bottom);</highlight><highlight class="comment">//draw<sp/>a<sp/>line<sp/>at<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;<sp/>min[groupIndex])<sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>min[groupIndex]<sp/>-<sp/>linePositions[groupIndex]<sp/><sp/>+<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>user<sp/>went<sp/>to<sp/>far<sp/>on<sp/>the<sp/>right,<sp/>draw<sp/>a<sp/>line<sp/>at<sp/>the<sp/>last<sp/>sample<sp/>position<sp/>(max)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentAbscissae[groupIndex]<sp/>&gt;<sp/>max[groupIndex]){</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!initialLine){</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>previousAbscissae;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i)<sp/>previousAbscissae.append(linePositions[i]<sp/>+<sp/>previousDelta);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissae[groupIndex]<sp/>&lt;<sp/>max[groupIndex]){</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i){</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(previousAbscissae[i],top,previousAbscissae[i],bottom);</highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!eraseLine)<sp/>painter.drawLine(max[i],top,max[i],bottom);</highlight><highlight class="comment">//draw<sp/>a<sp/>line<sp/>at<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>previousDragAbscissa<sp/>in<sp/>order<sp/>to<sp/>have<sp/>the<sp/>line<sp/>drawn<sp/>at<sp/>the<sp/>far<sp/>rigth<sp/>of<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;=<sp/>max[groupIndex]){</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(linePositions[groupIndex]<sp/>+<sp/>(previousDragAbscissa<sp/>-<sp/>lastClickAbscissa)<sp/>&gt;<sp/>max[groupIndex])<sp/>previousDragAbscissa<sp/>=<sp/>max[groupIndex]<sp/>-<sp/>linePositions[groupIndex]<sp/><sp/>+<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>max[groupIndex]<sp/>-<sp/>linePositions[groupIndex]<sp/><sp/>+<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!initialLine){</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>previousAbscissae;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i)<sp/>previousAbscissae.append(linePositions[i]<sp/>+<sp/>previousDelta);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i){<sp/><sp/></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissae[i]<sp/>&gt;=<sp/>min[i])<sp/>painter.drawLine(previousAbscissae[i],top,previousAbscissae[i],bottom);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissae[i]<sp/>&lt;<sp/>min[i])<sp/>painter.drawLine(min[i],top,min[i],bottom);</highlight><highlight class="comment">//the<sp/>line<sp/>has<sp/>been<sp/>drawn<sp/>at<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//draw<sp/>the<sp/>new<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!eraseLine)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbColumns;++i)<sp/><sp/>painter.drawLine(currentAbscissae[i],top,currentAbscissae[i],bottom);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_104e3b3a926177db47873499e004d6942" kindref="member">TraceView::mouseDoubleClickEvent</ref>(QMouseEvent*<sp/>e){</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><ref refid="classBaseFrame_161ed8b87d4046aa64b74855f200b4e1b" kindref="member">BaseFrame::mouseDoubleClickEvent</ref>(e);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM){</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/>doubleClick<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(initialWindow);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_16708d401334c059865b3194ce3f8f7c8" kindref="member">TraceView::mouseMoveEvent</ref>(QMouseEvent*<sp/>event){</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/>QString<sp/>message;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/></highlight><highlight class="comment">//Write<sp/>the<sp/>current<sp/>coordinates<sp/>in<sp/>the<sp/>statusbar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/>QPoint<sp/>current;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>view<sp/>was<sp/>zoomed<sp/>and<sp/>the<sp/>left<sp/>margin<sp/>(where<sp/>the<sp/>ids<sp/>and<sp/>gains<sp/>of<sp/>the<sp/>channels<sp/>of<sp/>the<sp/>first<sp/>group<sp/>are<sp/>displayed)<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/></highlight><highlight class="comment">//shown<sp/>(r.left()<sp/>!=<sp/>0),<sp/>the<sp/>coordinates<sp/>have<sp/>to<sp/>be<sp/>adjusted.<sp/>Indeed,<sp/>this<sp/>margin<sp/>is<sp/>outside<sp/>the<sp/>world<sp/>but<sp/>in<sp/>the<sp/>viewport<sp/>and<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/></highlight><highlight class="comment">//values<sp/>return<sp/>par<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>!=<sp/>0)<sp/>current<sp/>=<sp/><ref refid="classBaseFrame_11d2cf80aab1a6867fd30f61cb53f4dc5" kindref="member">viewportToWorld</ref>(event-&gt;x(),event-&gt;y());</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>current<sp/>=<sp/><ref refid="classBaseFrame_11d2cf80aab1a6867fd30f61cb53f4dc5" kindref="member">viewportToWorld</ref>(event-&gt;x()<sp/>-<sp/>xMargin,event-&gt;y());</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(current.x()<sp/>-<sp/>static_cast&lt;int&gt;(borderX));</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>and<sp/>write<sp/>the<sp/>duration<sp/>and<sp/>the<sp/>voltage<sp/>in<sp/>the<sp/>statusbar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE<sp/>&amp;&amp;<sp/>(event-&gt;state()<sp/>==<sp/>Qt::LeftButton)){</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>duration<sp/>between<sp/>the<sp/>begining<sp/>of<sp/>the<sp/>drag<sp/>and<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>abs(x<sp/>-<sp/>startingIndex);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>static_cast&lt;float&gt;(duration)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbMinutes<sp/>=<sp/>static_cast&lt;int&gt;(time<sp/>/<sp/>60000.0);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>remainingSeconds<sp/>=<sp/>static_cast&lt;float&gt;(fmod(static_cast&lt;double&gt;(time),60000));</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSeconds<sp/>=<sp/>static_cast&lt;int&gt;(remainingSeconds<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbMiliseconds<sp/>=<sp/>static_cast&lt;int&gt;(fmod(static_cast&lt;double&gt;(remainingSeconds),1000)<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbMiliseconds<sp/>==<sp/>1000){</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/>nbMiliseconds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/>nbSeconds++;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Duration:<sp/>&quot;</highlight><highlight class="normal">+<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>min<sp/>%2<sp/>s<sp/>%3<sp/>ms<sp/>&quot;</highlight><highlight class="normal">).arg(nbMinutes).arg(nbSeconds).arg(nbMiliseconds);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>current.y()<sp/>-<sp/>lastClickOrdinate;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>voltage<sp/>=<sp/>(delta/channelFactors[channelforVoltageComputation])/acquisitionGain;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>message.append(</highlight><highlight class="stringliteral">&quot;<sp/>Voltage:<sp/>&quot;</highlight><highlight class="normal">+<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>mV&quot;</highlight><highlight class="normal">).arg(fabs(voltage),0,</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,2));</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>0)<sp/>statusBar-&gt;changeItem(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,1);</highlight><highlight class="comment">//on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>relativeTime;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>relativeTime<sp/>=<sp/>static_cast&lt;float&gt;(fmod(x,static_cast&lt;float&gt;(Xshift)))</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>invisible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>shift)</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeTime<sp/>=<sp/>static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeTime<sp/>=<sp/>static_cast&lt;float&gt;(fmod((x),static_cast&lt;float&gt;(shift<sp/>+<sp/>XGroupSpace)))</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>relativeTime<sp/>=<sp/>static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//between<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(relativeTime<sp/>&gt;<sp/>timeFrameWidth){</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>data<sp/>have<sp/>been<sp/>browsed<sp/>for<sp/>spikes,<sp/>startTimeInRecordingUnits<sp/>!=0<sp/>and<sp/>the<sp/>rounding<sp/>applied<sp/>to<sp/>startTime<sp/>make<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>time<sp/>wrong.<sp/>The<sp/>correct<sp/>start<sp/>time<sp/>has<sp/>to<sp/>be<sp/>recompute<sp/>using<sp/>startTimeInRecordingUnits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startTimeInRecordingUnits<sp/>!=0){<sp/><sp/></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplingRate<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18fad4f54ef71252528e06d3ac2ccecf4" kindref="member">getSamplingRate</ref>();</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>computeTime<sp/>=<sp/>static_cast&lt;double&gt;(static_cast&lt;double&gt;(startTimeInRecordingUnits)<sp/>*<sp/>static_cast&lt;double&gt;(1000)<sp/>/<sp/>static_cast&lt;double&gt;(samplingRate));</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/><sp/>relativeTime<sp/>+<sp/>computeTime;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>time<sp/>=<sp/><sp/>relativeTime<sp/>+<sp/>startTime;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbMinutes<sp/>=<sp/>static_cast&lt;int&gt;(time<sp/>/<sp/>static_cast&lt;float&gt;(60000));</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>remainingSeconds<sp/>=<sp/>static_cast&lt;float&gt;(fmod(static_cast&lt;double&gt;(time),60000));</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSeconds<sp/>=<sp/>static_cast&lt;int&gt;(remainingSeconds<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbMiliseconds<sp/>=<sp/>static_cast&lt;int&gt;(fmod(static_cast&lt;double&gt;(remainingSeconds),1000)<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbMiliseconds<sp/>==<sp/>1000){</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbMiliseconds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbSeconds++;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalNbSeconds<sp/>=<sp/>static_cast&lt;double&gt;(time<sp/>/1000.000);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>:<sp/>&quot;</highlight><highlight class="normal">+<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>min<sp/>%2<sp/>s<sp/>%3<sp/>ms<sp/>(%4<sp/>s)&quot;</highlight><highlight class="normal">).arg(nbMinutes).arg(nbSeconds).arg(nbMiliseconds).arg(totalNbSeconds,0,</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,3);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/>statusBar-&gt;changeItem(message,1);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/></highlight><highlight class="comment">//Paint<sp/>the<sp/>channels<sp/>selected<sp/>while<sp/>dragging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT<sp/>&amp;&amp;<sp/>selectedChannels.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(event-&gt;state()<sp/>==<sp/>Qt::LeftButton)){</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/>painter.begin(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/>painter.setRasterOp(NotROP);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/>painter.setPen(QPen(color0,1));</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/>painter.setBrush(NoBrush);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/><ref refid="classBaseFrame_18a56e7d97d02b9906e63526db945ebed" kindref="member">viewportToWorldHeight</ref>(1);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>channelIterator;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(channelIterator<sp/>=<sp/>selectedChannels.begin();<sp/>channelIterator<sp/>!=<sp/>selectedChannels.end();<sp/>++channelIterator){</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(*channelIterator<sp/>))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialBasePosition<sp/>=<sp/>channelsStartingOrdinate[*channelIterator]<sp/>+<sp/><sp/>static_cast&lt;long&gt;(data(1,*channelIterator<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[*channelIterator]);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousDragOrdinate<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>channelsStartingAbscissa[*channelIterator];</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragOrdinate<sp/>-<sp/>lastClickOrdinate;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>basePosition<sp/>=<sp/>initialBasePosition<sp/>+<sp/>previousDelta;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,basePosition,X,*channelIterator,nbSamplesToDraw,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(data(i<sp/>+<sp/>1,*channelIterator<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[*channelIterator]);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i,X,y);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//draw<sp/>the<sp/>new<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>channelsStartingAbscissa[*channelIterator];</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>current.y()<sp/>-<sp/>lastClickOrdinate;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>basePosition<sp/>=<sp/>initialBasePosition<sp/>+<sp/>delta;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTrace(painter,limit,basePosition,X,*channelIterator,nbSamplesToDraw,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>trace(nbSamples);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamples;++i){</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>basePosition<sp/>-<sp/>static_cast&lt;long&gt;(data(i<sp/>+<sp/>1,*channelIterator<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[*channelIterator]);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trace.setPoint(i,X,y);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(trace);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/>previousDragOrdinate<sp/>=<sp/>current.y();</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/></highlight><highlight class="comment">//Paint<sp/>the<sp/>event<sp/>selected<sp/>while<sp/>dragging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT<sp/>&amp;&amp;<sp/>selectedEvent.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(event-&gt;state()<sp/>==<sp/>Qt::LeftButton)){</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/>painter.begin(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/>painter.setRasterOp(NotROP);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/>painter.setPen(QPen(color0,1));</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/>painter.setBrush(NoBrush);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>r.top();</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>r.bottom();</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>x<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentAbscissa<sp/>=<sp/>selectedEventPosition[1]<sp/>+<sp/>delta;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>nbSamplesToDraw<sp/>-<sp/>1;</highlight><highlight class="comment">//points<sp/>draw<sp/>from<sp/>0<sp/>to<sp/>(nbSamplesToDraw<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>borderX;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastClickAbscissa<sp/>&lt;=<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>groupIndex<sp/>=<sp/>((lastClickAbscissa<sp/>-<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>invisible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastClickAbscissa<sp/>&lt;<sp/>shift<sp/>+<sp/>XGroupSpace)<sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>groupIndex<sp/>=<sp/>((lastClickAbscissa<sp/>-<sp/>(shift<sp/>+<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift<sp/>+<sp/>nbSamplesToDraw<sp/>-<sp/>1;</highlight><highlight class="comment">//points<sp/>draw<sp/>from<sp/>0<sp/>to<sp/>(nbSamplesToDraw<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>user<sp/>went<sp/>to<sp/>far<sp/>on<sp/>the<sp/>left,<sp/>draw<sp/>a<sp/>line<sp/>at<sp/>the<sp/>minimum<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentAbscissa<sp/>&lt;<sp/>min){</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!startEventDragging){</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousAbscissa<sp/>=<sp/>selectedEventPosition[1]<sp/>+<sp/>previousDelta;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissa<sp/>&gt;<sp/>min){</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(previousAbscissa,top,previousAbscissa,bottom);</highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(min,top,min,bottom);</highlight><highlight class="comment">//draw<sp/>a<sp/>line<sp/>at<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;<sp/>min)<sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>min<sp/>-<sp/>selectedEventPosition[1]<sp/>+<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>user<sp/>went<sp/>to<sp/>far<sp/>on<sp/>the<sp/>right,<sp/>draw<sp/>a<sp/>line<sp/>at<sp/>the<sp/>last<sp/>sample<sp/>position<sp/>(max)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentAbscissa<sp/>&gt;<sp/>max){</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!startEventDragging){</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousAbscissa<sp/>=<sp/>selectedEventPosition[1]<sp/>+<sp/>previousDelta;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissa<sp/>&lt;<sp/>max){</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(previousAbscissa,top,previousAbscissa,bottom);</highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(max,top,max,bottom);</highlight><highlight class="comment">//draw<sp/>a<sp/>line<sp/>at<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>previousDragAbscissa<sp/>in<sp/>order<sp/>to<sp/>have<sp/>the<sp/>line<sp/>drawn<sp/>at<sp/>the<sp/>far<sp/>rigth<sp/>of<sp/>the<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;=<sp/>max){</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedEventPosition[1]<sp/>+<sp/>(previousDragAbscissa<sp/>-<sp/>lastClickAbscissa)<sp/>&gt;<sp/>max)<sp/>previousDragAbscissa<sp/>=<sp/>max<sp/>-<sp/>selectedEventPosition[1]<sp/>+<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>max<sp/>-<sp/>selectedEventPosition[1]<sp/>+<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!startEventDragging){</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousDelta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousAbscissa<sp/>=<sp/>selectedEventPosition[1]<sp/>+<sp/>previousDelta;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissa<sp/>&gt;=<sp/>min)<sp/>painter.drawLine(previousAbscissa,top,previousAbscissa,bottom);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousAbscissa<sp/>&lt;<sp/>min)<sp/>painter.drawLine(min,top,min,bottom);</highlight><highlight class="comment">//the<sp/>line<sp/>has<sp/>been<sp/>drawn<sp/>at<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//draw<sp/>the<sp/>new<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawLine(currentAbscissa,top,currentAbscissa,bottom);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/></highlight><highlight class="comment">//Paint<sp/>the<sp/>line<sp/>while<sp/>dragging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE<sp/>&amp;&amp;<sp/>(event-&gt;state()<sp/>==<sp/>Qt::LeftButton)){</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(linePositions.size()<sp/>!=<sp/>0)<sp/>drawTimeLine(x,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>parent<sp/>implementation<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>rubber<sp/>band</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><ref refid="classBaseFrame_1e0bc9fac62c249065e52f3d393e84cf7" kindref="member">BaseFrame::mouseMoveEvent</ref>(event);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1163a577520dd6556fa152518a2b6afb4" kindref="member">TraceView::mousePressEvent</ref>(QMouseEvent*<sp/>event){</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;button()<sp/>==<sp/>QMouseEvent::LeftButton){</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME){</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>parent<sp/>implementation<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>zoom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_1154d190f81125058199ed6770c5152b6" kindref="member">BaseFrame::mousePressEvent</ref>(event);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>currentlySelectedChannels;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>deselectedChannels;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>QPair&lt;QString,int&gt;<sp/>deselectedEvent(selectedEvent.first,selectedEvent.second);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deselectedEventIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEventPosition.isEmpty())<sp/>deselectedEventIndex<sp/>=<sp/>selectedEventPosition[0];</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT<sp/>&amp;&amp;<sp/>shownChannels.size()<sp/>!=<sp/>0<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT<sp/>||<sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE){</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/>QPoint<sp/>current;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>view<sp/>was<sp/>zoomed<sp/>and<sp/>the<sp/>left<sp/>margin<sp/>(where<sp/>the<sp/>ids<sp/>and<sp/>gains<sp/>of<sp/>the<sp/>channels<sp/>of<sp/>the<sp/>first<sp/>group<sp/>are<sp/>displayed)<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//shown<sp/>(r.left()<sp/>!=<sp/>0),<sp/>the<sp/>coordinates<sp/>have<sp/>to<sp/>be<sp/>adjusted.<sp/>Indeed,<sp/>this<sp/>margin<sp/>is<sp/>outside<sp/>the<sp/>world<sp/>but<sp/>in<sp/>the<sp/>viewport<sp/>and<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//values<sp/>return<sp/>par<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>!=<sp/>0)<sp/>current<sp/>=<sp/><ref refid="classBaseFrame_11d2cf80aab1a6867fd30f61cb53f4dc5" kindref="member">viewportToWorld</ref>(event-&gt;x(),event-&gt;y());</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>current<sp/>=<sp/><ref refid="classBaseFrame_11d2cf80aab1a6867fd30f61cb53f4dc5" kindref="member">viewportToWorld</ref>(event-&gt;x()<sp/>-<sp/>xMargin,event-&gt;y());</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/>lastClickOrdinate<sp/>=<sp/>current.y();</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//determine<sp/>the<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupIndex;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleIndex;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>labelSelected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(current.x()<sp/>-<sp/>static_cast&lt;int&gt;(borderX));</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;=<sp/>0){</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sampleIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>labelSelected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;=<sp/>(Xshift<sp/>-<sp/>XGroupSpace)){</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleIndex<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep))<sp/>*<sp/>downSampling);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>((x<sp/>-<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplePart<sp/>=<sp/>x<sp/>-<sp/>(groupIndex<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(samplePart<sp/>&lt;=<sp/>0){</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labelSelected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sampleIndex<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+static_cast&lt;float&gt;(samplePart)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep))<sp/>*<sp/>downSampling);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>invisible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Click<sp/>on<sp/>the<sp/>first<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>limit<sp/>between<sp/>2<sp/>traces<sp/>is<sp/>half<sp/>the<sp/>distance<sp/>between<sp/>them<sp/>except<sp/>when<sp/>the<sp/>legend<sp/>(text<sp/>containing<sp/>the<sp/>id<sp/>and<sp/>the<sp/>gain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>larger.<sp/>In<sp/>that<sp/>case<sp/>an<sp/>adjustment<sp/>is<sp/>computed<sp/>to<sp/>give<sp/>the<sp/>ability<sp/>to<sp/>the<sp/>user<sp/>to<sp/>click<sp/>on<sp/>the<sp/>legend<sp/>to<sp/>select<sp/>the<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overlap<sp/>=<sp/><ref refid="classBaseFrame_1d637eb7a91439ee66bacb4efd6445572" kindref="member">viewportToWorldWidth</ref>(xMargin)<sp/>-<sp/>(XGroupSpace<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlap<sp/>&lt;<sp/>0)<sp/>overlap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;=<sp/>(shift<sp/>+<sp/>(XGroupSpace<sp/>/<sp/>2)<sp/>-<sp/>overlap)){</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&gt;=<sp/>shift)<sp/>sampleIndex<sp/>=<sp/>nbSamples;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sampleIndex<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep))<sp/>*<sp/>downSampling);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>((x<sp/>-<sp/>(shift<sp/>+<sp/>(XGroupSpace<sp/>/<sp/>2)<sp/>-<sp/>overlap))<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplePart<sp/>=<sp/>x<sp/>-<sp/>(groupIndex<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(samplePart<sp/>&lt;=<sp/>0){</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labelSelected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sampleIndex<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+static_cast&lt;float&gt;(samplePart)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep))<sp/>*<sp/>downSampling);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sampleIndex<sp/>&gt;<sp/>nbSamples)<sp/>sampleIndex<sp/>=<sp/>nbSamplesToDraw;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>(X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift)){</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>linePositions.clear();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastClickAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroups<sp/>=<sp/>shownGroupsChannels.count();</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbGroups;++i){</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linePositions.append(X0<sp/>+<sp/>i<sp/>*<sp/>Xshift<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(sampleIndex)<sp/>/<sp/>downSampling)));</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>(X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift)){</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newEventPosition<sp/>=<sp/>sampleIndex;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>(X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift)){</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastClickAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>difference<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);<sp/></highlight><highlight class="comment">//nbSamples<sp/>as<sp/>a<sp/>starting<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedEvents.begin();<sp/>iterator<sp/>!=<sp/>selectedEvents.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>eventList<sp/>=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.size()<sp/>==<sp/>0<sp/>||<sp/>eventsData[providerName]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getTimes();</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getIds();</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.contains(eventId)<sp/>&amp;&amp;<sp/>abs(index<sp/>-<sp/>sampleIndex)<sp/>&lt;=<sp/>difference){</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difference<sp/>=<sp/>abs(index<sp/>-<sp/>sampleIndex);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEvent.first<sp/>=<sp/>providerName;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEvent.second<sp/>=<sp/>eventId;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEventPosition.clear();</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEventPosition.append(index);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>takes<sp/>into<sp/>account<sp/>the<sp/>abscissa<sp/>of<sp/>the<sp/>current<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEventPosition.append(X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling)));</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>mode<sp/>==<sp/>SELECT_EVENT<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>(X0<sp/>+<sp/>groupIndex<sp/>*<sp/>Xshift)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupId<sp/>=<sp/>groupIds[static_cast&lt;int&gt;(groupIndex)];</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[groupId];</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/>channelIds.size();</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>Y0;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>channelIds[0];</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//look<sp/>up<sp/>for<sp/>the<sp/>first<sp/>channel<sp/>which<sp/>is<sp/>not<sp/>skipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(channelId)){</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>currentNbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(i)){</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelIndex<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>-y<sp/>+<sp/>channelOffsets[channelId]<sp/>-<sp/>static_cast&lt;long&gt;(data(sampleIndex,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>difference<sp/>=<sp/>abs(current.y()<sp/>-<sp/>position);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedChannel<sp/>=<sp/>channelId;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>channelIndex;<sp/>i<sp/>&lt;<sp/>currentNbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>-y<sp/>+<sp/>channelOffsets[channelId]<sp/>-<sp/>static_cast&lt;long&gt;(data(sampleIndex,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(current.y()<sp/>-<sp/>position)<sp/>&lt;<sp/>difference<sp/>&amp;&amp;<sp/>!skippedChannels.contains(channelId)){</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difference<sp/>=<sp/>abs(current.y()<sp/>-<sp/>position);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannel<sp/>=<sp/>channelId;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>there<sp/>is<sp/>not<sp/>modificator<sp/>key<sp/>and<sp/>selectedChannels<sp/>does<sp/>not<sp/>already<sp/>contain<sp/>the<sp/>selectedChannel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//deselect<sp/>all<sp/>the<sp/>channels<sp/>(clear<sp/>selectedChannels)<sp/>otherwise<sp/>remove<sp/>selectedChannel<sp/>from<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,there<sp/>is<sp/>a<sp/>special<sp/>treatment:<sp/>deselect<sp/>all<sp/>the<sp/>channels<sp/>(clear<sp/>selectedChannels)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(event-&gt;state()<sp/>&amp;<sp/>ShiftButton)<sp/>&amp;&amp;<sp/>!(event-&gt;state()<sp/>&amp;<sp/>ControlButton)){</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>deselect<sp/>all<sp/>the<sp/>channels<sp/>(clear<sp/>selectedChannels)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedChannels.contains(selectedChannel)<sp/>||<sp/>skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alreadySelected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>selectedChannels.begin();it<sp/>!=<sp/>selectedChannels.end();++it)<sp/>deselectedChannels.append(*it);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.clear();</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.remove(selectedChannel);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.size()<sp/>!=<sp/>0)<sp/>alreadySelected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>the<sp/>modificator<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;state()<sp/>&amp;<sp/>ControlButton){</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>not<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.remove(selectedChannel);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deselectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((event-&gt;state()<sp/>&amp;<sp/>ShiftButton)<sp/>&amp;&amp;<sp/>selectedChannels.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>all<sp/>the<sp/>channels,<sp/>not<sp/>skipped<sp/>of<sp/>groupId<sp/>with<sp/>a<sp/>label<sp/>ordinate<sp/>in<sp/>the<sp/>range<sp/>defined<sp/>by<sp/>the<sp/>label<sp/>ordinate<sp/>of<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//selected<sp/>channel<sp/>and<sp/>the<sp/>one<sp/>of<sp/>the<sp/>currently<sp/>selected<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(labelSelected){</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousChannelId<sp/>=<sp/>selectedChannels[selectedChannels.size()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>prevously<sp/>selected<sp/>channel<sp/>is<sp/>not<sp/>in<sp/>the<sp/>same<sp/>group,<sp/>only<sp/>select<sp/>the<sp/>currently<sp/>selected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//No<sp/>cross<sp/>group<sp/>selection<sp/>is<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!channelIds.contains(previousChannelId)){</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(selectedChannel);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousOrdinate<sp/>=<sp/>channelsStartingOrdinate[previousChannelId];</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentOrdinate<sp/>=<sp/>channelsStartingOrdinate[selectedChannel];</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>previousOrdinate;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>currentOrdinate;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentOrdinate<sp/>&lt;<sp/>previousOrdinate){</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>currentOrdinate;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>previousOrdinate;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>currentNbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordinate<sp/>=<sp/>channelsStartingOrdinate[channelId];</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ordinate&gt;=<sp/>min<sp/>&amp;&amp;<sp/>ordinate<sp/>&lt;=<sp/>max<sp/>&amp;&amp;<sp/>!selectedChannels.contains(channelId)){</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(channelId);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(channelId);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TO<sp/>DO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(selectedChannel);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>channelsSelected(selectedChannels);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>of<sp/>mode<sp/>==<sp/>SELECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mode<sp/>==<sp/>MEASURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE){</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channelforVoltageComputation<sp/>=<sp/>selectedChannel;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startingIndex<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mode<sp/>==<sp/>MEASURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>startingIndex<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>multicolumns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(current.x()<sp/>-<sp/>static_cast&lt;int&gt;(borderX));</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleIndex;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;=<sp/>0)<sp/>sampleIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>the<sp/>last<sp/>sample<sp/>of<sp/>the<sp/>downSampling<sp/>one<sp/>at<sp/>the<sp/>same<sp/>abscissa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sampleIndex<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep))<sp/>*<sp/>downSampling);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>linePositions.clear();</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastClickAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>linePositions.append(static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(sampleIndex)<sp/>/<sp/>downSampling)));</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newEventPosition<sp/>=<sp/>sampleIndex;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastClickAbscissa<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>difference<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);<sp/></highlight><highlight class="comment">//nbSamples<sp/>as<sp/>a<sp/>starting<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedEvents.begin();<sp/>iterator<sp/>!=<sp/>selectedEvents.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>eventList<sp/>=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/>providerName<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.size()<sp/>==<sp/>0<sp/>||<sp/>eventsData[providerName]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getTimes();</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getIds();</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventList.contains(eventId)<sp/>&amp;&amp;<sp/>abs(index<sp/>-<sp/>sampleIndex)<sp/>&lt;=<sp/>difference){</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difference<sp/>=<sp/>abs(index<sp/>-<sp/>sampleIndex);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEvent.first<sp/>=<sp/>providerName;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEvent.second<sp/>=<sp/>eventId;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEventPosition.clear();</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEventPosition.append(index);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedEventPosition.append(static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling)));</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>firstGroup<sp/>=<sp/>shownGroupsChannels[groupIds[0]];</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>Y0;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>firstGroup[0];</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startingGroupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//look<sp/>up<sp/>for<sp/>the<sp/>first<sp/>channel<sp/>which<sp/>is<sp/>not<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skippedChannels.contains(channelId)){</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint<sp/>j<sp/>=<sp/>0;<sp/>j&lt;groupIds.size();++j){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[groupIds[j]];</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/>channelIds.size();<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>currentNbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(channelIds[i])){</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelId<sp/>=<sp/>channelIds[i];</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelIndex<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startingGroupIndex<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(channelId))<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>-y<sp/>+<sp/>channelOffsets[channelId]<sp/>-<sp/>static_cast&lt;long&gt;(data(sampleIndex,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>difference<sp/>=<sp/>abs(current.y()<sp/>-<sp/>position);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedChannel<sp/>=<sp/>channelId;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>startingGroupIndex;<sp/>j&lt;groupIds.size();++j){</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[groupIds[j]];</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/>channelIds.size();</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>startingGroupIndex)<sp/>i<sp/>=<sp/>channelIndex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>i<sp/>&lt;<sp/>currentNbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelId<sp/>=<sp/>channelIds[i];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>-y<sp/>+<sp/>channelOffsets[channelId]<sp/>-<sp/>static_cast&lt;long&gt;(data(sampleIndex,channelId<sp/>+<sp/>1)<sp/>*<sp/>channelFactors[channelId]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(current.y()<sp/>-<sp/>position)<sp/>&lt;<sp/>difference<sp/>&amp;&amp;<sp/>!skippedChannels.contains(channelId)){</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difference<sp/>=<sp/>abs(current.y()<sp/>-<sp/>position);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannel<sp/>=<sp/>channelId;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>Yshift;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>YGroupSpace;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT){<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>there<sp/>is<sp/>not<sp/>modificator<sp/>key<sp/>and<sp/>selectedChannels<sp/>does<sp/>not<sp/>already<sp/>contain<sp/>the<sp/>selectedChannel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//deselect<sp/>all<sp/>the<sp/>channels<sp/>(clear<sp/>selectedChannels)<sp/>otherwise<sp/>remove<sp/>selectedChannel<sp/>from<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,there<sp/>is<sp/>a<sp/>special<sp/>treatment:<sp/>deselect<sp/>all<sp/>the<sp/>channels<sp/>(clear<sp/>selectedChannels)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(event-&gt;state()<sp/>&amp;<sp/>ShiftButton)<sp/>&amp;&amp;<sp/>!(event-&gt;state()<sp/>&amp;<sp/>ControlButton)){</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>deselect<sp/>all<sp/>the<sp/>channels<sp/>(clear<sp/>selectedChannels)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedChannels.contains(selectedChannel)<sp/>||<sp/>skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alreadySelected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>selectedChannels.begin();it<sp/>!=<sp/>selectedChannels.end();++it)<sp/>deselectedChannels.append(*it);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.clear();</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.remove(selectedChannel);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.size()<sp/>!=<sp/>0)<sp/>alreadySelected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;state()<sp/>&amp;<sp/>ControlButton){</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>not<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.remove(selectedChannel);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deselectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((event-&gt;state()<sp/>&amp;<sp/>ShiftButton)<sp/>&amp;&amp;<sp/>selectedChannels.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>all<sp/>the<sp/>channels<sp/>of<sp/>groupId<sp/>with<sp/>a<sp/>label<sp/>ordinate<sp/>in<sp/>the<sp/>range<sp/>defined<sp/>by<sp/>the<sp/>label<sp/>ordinate<sp/>of<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//selected<sp/>channel<sp/>and<sp/>the<sp/>one<sp/>of<sp/>the<sp/>currently<sp/>selected<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousChannelId<sp/>=<sp/>selectedChannels[selectedChannels.size()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousOrdinate<sp/>=<sp/>channelsStartingOrdinate[previousChannelId];</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentOrdinate<sp/>=<sp/>channelsStartingOrdinate[selectedChannel];</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>previousOrdinate;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>currentOrdinate;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentOrdinate<sp/>&lt;<sp/>previousOrdinate){</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>currentOrdinate;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>previousOrdinate;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbChannels<sp/>=<sp/>shownChannels.size();</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>currentNbChannels;<sp/>++i){</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channelId<sp/>=<sp/>shownChannels[i];</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordinate<sp/>=<sp/>channelsStartingOrdinate[channelId];</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ordinate&gt;=<sp/>min<sp/>&amp;&amp;<sp/>ordinate<sp/>&lt;=<sp/>max<sp/>&amp;&amp;<sp/>!selectedChannels.contains(channelId)){</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(channelId);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(channelId);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TO<sp/>DO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(selectedChannel)){</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(selectedChannel);</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentlySelectedChannels.append(selectedChannel);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>channelsSelected(selectedChannels);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>of<sp/>mode<sp/>==<sp/>SELECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mode<sp/>==<sp/>MEASURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE){</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channelforVoltageComputation<sp/>=<sp/>selectedChannel;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startingIndex<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mode<sp/>==<sp/>SELECT_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>startingIndex<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//mode<sp/>!=<sp/>SELECT_EVENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/>}</highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT){</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/>drawTraces(currentlySelectedChannels,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>drawTraces(deselectedChannels,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT){</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deselectedEvent.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>drawEvent(deselectedEvent.first,deselectedEvent.second,deselectedEventIndex,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedEvent.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>drawEvent(selectedEvent.first,selectedEvent.second,selectedEventPosition[0],</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(linePositions.size()<sp/>!=<sp/>0)<sp/>drawTimeLine(lastClickAbscissa,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/>previousDragOrdinate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//mode<sp/>==<sp/>SELECT<sp/>&amp;&amp;<sp/>shownChannels.size()<sp/>!=<sp/>0<sp/>||<sp/>mode<sp/>==<sp/>MEASURE<sp/>||<sp/>mode<sp/>==<sp/>SELECT_TIME<sp/>||<sp/>mode<sp/>==<sp/>SELECT_EVENT<sp/>||<sp/>mode<sp/>==<sp/>ADD_EVENT<sp/>||<sp/>mode<sp/>==<sp/>DRAW_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/>}</highlight><highlight class="comment">//QMouseEvent::LeftButton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_110f8d9755ef5ad0e7051e6d939837f79" kindref="member">TraceView::mouseReleaseEvent</ref>(QMouseEvent*<sp/>event){</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT){</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton<sp/>&amp;&amp;<sp/>!(event-&gt;state()<sp/>&amp;<sp/>ShiftButton)<sp/>&amp;&amp;<sp/>!(event-&gt;state()<sp/>&amp;<sp/>ControlButton)){</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//There<sp/>was<sp/>a<sp/>drag<sp/>of<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousDragOrdinate<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>previousDragOrdinate<sp/>-<sp/>lastClickOrdinate;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>channelIterator;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(channelIterator<sp/>=<sp/>selectedChannels.begin();<sp/>channelIterator<sp/>!=<sp/>selectedChannels.end();<sp/>++channelIterator)</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channelOffsets[*channelIterator]<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>previousDragOrdinate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//deselect<sp/>all<sp/>the<sp/>channels<sp/>except<sp/>the<sp/>last<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alreadySelected){</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId<sp/>=<sp/>selectedChannels[selectedChannels.size()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>selectedChannels.remove(channelId);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>deselectedChannels;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>selectedChannels.begin();it<sp/>!=<sp/>selectedChannels.end();++it)<sp/>deselectedChannels.append(*it);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>selectedChannels.clear();</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>drawTraces(deselectedChannels,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>selectedChannels.append(channelId);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>emit<sp/>channelsSelected(selectedChannels);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT<sp/>&amp;&amp;<sp/>(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)){</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//There<sp/>was<sp/>a<sp/>drag<sp/>of<sp/>an<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!startEventDragging){</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>previousDragAbscissa<sp/>-<sp/>lastClickAbscissa;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[selectedEvent.first])-&gt;getTimes();</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[selectedEvent.first])-&gt;getIds();</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventId<sp/>==<sp/>selectedEvent.second<sp/>&amp;&amp;<sp/>index<sp/>==<sp/>selectedEventPosition[0]){</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>currentData(1,i)<sp/>+=<sp/>static_cast&lt;dataType&gt;(delta<sp/>*<sp/>downSampling);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentData(1,i)<sp/>&lt;<sp/>0)<sp/>currentData(1,i)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplingRate<sp/>=<sp/>static_cast&lt;double&gt;(tracesProvider.<ref refid="classTracesProvider_18fad4f54ef71252528e06d3ac2ccecf4" kindref="member">getSamplingRate</ref>())<sp/>/<sp/>1000.0;</highlight><highlight class="comment">//in<sp/>eventProvider<sp/>the<sp/>time<sp/>is<sp/>in<sp/>miliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>previousTime<sp/>=<sp/>(static_cast&lt;double&gt;(index)<sp/>/<sp/>samplingRate)<sp/>+<sp/>static_cast&lt;double&gt;(startTime);</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newTime<sp/>=<sp/>(static_cast&lt;double&gt;(currentData(1,i))<sp/>/<sp/>samplingRate)<sp/>+<sp/>static_cast&lt;double&gt;(startTime);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Notify<sp/>the<sp/>provider<sp/>of<sp/>the<sp/>modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[selectedEvent.first])-&gt;modifiedEvent(eventId,previousTime,newTime);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//notify<sp/>everybody<sp/>of<sp/>the<sp/>modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>emit<sp/>eventModified(selectedEvent.first,eventId,previousTime,newTime);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/>selectedEvent.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/>selectedEvent.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT<sp/>&amp;&amp;<sp/>(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)){</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventDescriptionToCreate<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/>KMessageBox::error<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>order<sp/>to<sp/>add<sp/>an<sp/>event<sp/>you<sp/>have<sp/>to<sp/>choose<sp/>an<sp/>event<sp/>description<sp/>first!&quot;</highlight><highlight class="normal">),<sp/>i18n(</highlight><highlight class="stringliteral">&quot;Unselected<sp/>description<sp/>type!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>location<sp/>for<sp/>the<sp/>new<sp/>event<sp/>has<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newEventPosition<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplingRate<sp/>=<sp/>static_cast&lt;double&gt;(tracesProvider.<ref refid="classTracesProvider_18fad4f54ef71252528e06d3ac2ccecf4" kindref="member">getSamplingRate</ref>())<sp/>/<sp/>1000.0;</highlight><highlight class="comment">//in<sp/>eventProvider<sp/>the<sp/>time<sp/>is<sp/>in<sp/>miliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>(static_cast&lt;double&gt;(newEventPosition)<sp/>/<sp/>samplingRate)<sp/>+<sp/>static_cast&lt;double&gt;(startTime);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/>eventBeingModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Notify<sp/>the<sp/>provider<sp/>of<sp/>the<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[eventProvider])-&gt;addEvent(eventDescriptionToCreate,time);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/>eventBeingModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//notify<sp/>everybody<sp/>of<sp/>the<sp/>modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>eventAdded(eventProvider,eventDescriptionToCreate,time);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM<sp/>&amp;&amp;<sp/>(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)){</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Zoom<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;state()<sp/>&amp;<sp/>Qt::ShiftButton){</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>previousWindow<sp/>=<sp/>(QRect)window;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/>zoomOut<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="2782"><highlight class="comment"><sp/><sp/><sp/>QPoint<sp/>click;</highlight></codeline>
<codeline lineno="2783"><highlight class="comment"><sp/><sp/><sp/>if(r.left()<sp/>!=<sp/>0)<sp/>click<sp/>=<sp/>viewportToWorld(e-&gt;x(),e-&gt;y());</highlight></codeline>
<codeline lineno="2784"><highlight class="comment"><sp/><sp/><sp/>else<sp/>click<sp/>=<sp/>viewportToWorld(e-&gt;x()<sp/>-<sp/>xMargin,e-&gt;y());</highlight></codeline>
<codeline lineno="2785"><highlight class="comment"><sp/><sp/><sp/>if(click.x()<sp/>&lt;<sp/>0)<sp/>click.setX(0);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!doubleClick){</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!maxZoomReached)<sp/>previousWindow<sp/>=<sp/>(QRect)window;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>parent<sp/>implementation<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>rubber<sp/>band</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_17b6086bb37e3ad0c56a8b8eb166b3d9e" kindref="member">BaseFrame::mouseReleaseEvent</ref>(event);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>computeChannelDisplayGain();</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE<sp/>&amp;&amp;<sp/>(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)){</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>parent<sp/>implementation<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>rubber<sp/>band</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_17b6086bb37e3ad0c56a8b8eb166b3d9e" kindref="member">BaseFrame::mouseReleaseEvent</ref>(event);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME<sp/>&amp;&amp;<sp/>(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)){</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>parent<sp/>implementation<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>rubber<sp/>band</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_17b6086bb37e3ad0c56a8b8eb166b3d9e" kindref="member">BaseFrame::mouseReleaseEvent</ref>(event);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/>QPoint<sp/>current;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>!=<sp/>0)<sp/>current<sp/>=<sp/><ref refid="classBaseFrame_11d2cf80aab1a6867fd30f61cb53f4dc5" kindref="member">viewportToWorld</ref>(event-&gt;x(),event-&gt;y());</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>current<sp/>=<sp/><ref refid="classBaseFrame_11d2cf80aab1a6867fd30f61cb53f4dc5" kindref="member">viewportToWorld</ref>(event-&gt;x()<sp/>-<sp/>xMargin,event-&gt;y());</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(current.x()<sp/>-<sp/>static_cast&lt;int&gt;(borderX));</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>starting<sp/>and<sp/>ending<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>relativeStartingTime;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>relativeEndingTime;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startingTime;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columnNb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//starting<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingIndex<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/>columnNb<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>static_cast&lt;float&gt;(fmod(startingIndex,static_cast&lt;float&gt;(Xshift)))</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingIndex<sp/>&lt;<sp/>Xshift)<sp/>columnNb<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>columnNb<sp/>=<sp/>((startingIndex<sp/>-<sp/>(Xshift))<sp/>/<sp/>Xshift)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>invisible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingIndex<sp/>&lt;<sp/>shift){</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>static_cast&lt;float&gt;(startingIndex)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>columnNb<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>static_cast&lt;float&gt;(fmod((startingIndex),static_cast&lt;float&gt;(shift<sp/>+<sp/>XGroupSpace)))</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>columnNb<sp/>=<sp/>((startingIndex<sp/>-<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>static_cast&lt;float&gt;(startingIndex)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//between<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(relativeStartingTime<sp/>&gt;<sp/>timeFrameWidth)<sp/>relativeStartingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/>startingTime<sp/>=<sp/>startTime<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeStartingTime);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ending<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>relativeStartingTime;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>static_cast&lt;float&gt;(fmod(x,static_cast&lt;float&gt;(Xshift)))</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentColumnNb;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>Xshift)<sp/>currentColumnNb<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>currentColumnNb<sp/>=<sp/>((x<sp/>-<sp/>(Xshift))<sp/>/<sp/>Xshift)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentColumnNb<sp/>==<sp/>columnNb<sp/>&amp;&amp;<sp/>relativeEndingTime<sp/>&lt;<sp/>relativeStartingTime){</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeEndingTime);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentColumnNb<sp/>&gt;<sp/>columnNb<sp/>&amp;&amp;<sp/>relativeStartingTime<sp/>!=<sp/>0)<sp/>relativeEndingTime<sp/>=<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentColumnNb<sp/>&lt;<sp/>columnNb){</highlight><highlight class="comment">//the<sp/>user<sp/>went<sp/>backwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>relativeStartingTime;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>margin<sp/>is<sp/>invisible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>shift){</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(columnNb<sp/>!=<sp/>1){</highlight><highlight class="comment">//the<sp/>user<sp/>went<sp/>backwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>relativeStartingTime;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(columnNb<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>relativeEndingTime<sp/>&lt;<sp/>relativeStartingTime){</highlight><highlight class="comment">//the<sp/>user<sp/>went<sp/>backwards<sp/>on<sp/>the<sp/>first<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeEndingTime);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>static_cast&lt;float&gt;(fmod((x),static_cast&lt;float&gt;(shift<sp/>+<sp/>XGroupSpace)))</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentColumnNb<sp/>=<sp/>((x<sp/>-<sp/>(Xshift<sp/>-<sp/>XGroupSpace))<sp/>/<sp/>Xshift)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentColumnNb<sp/>==<sp/>columnNb<sp/>&amp;&amp;<sp/>relativeEndingTime<sp/>&lt;<sp/>relativeStartingTime){</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeEndingTime);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentColumnNb<sp/>&gt;<sp/>columnNb<sp/>&amp;&amp;<sp/>relativeStartingTime<sp/>!=<sp/>0)<sp/>relativeEndingTime<sp/>=<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentColumnNb<sp/>&lt;<sp/>columnNb){</highlight><highlight class="comment">//the<sp/>user<sp/>went<sp/>backwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>relativeStartingTime;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeStartingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>relativeEndingTime<sp/>=<sp/>static_cast&lt;float&gt;(x)<sp/>/<sp/>static_cast&lt;float&gt;(Xstep)<sp/>*<sp/>timeStep;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(relativeEndingTime<sp/>&lt;<sp/>relativeStartingTime){</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startingTime<sp/>=<sp/>startTime<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeEndingTime);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//between<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(relativeEndingTime<sp/>&gt;<sp/>timeFrameWidth)<sp/>relativeEndingTime<sp/>=<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>abs(static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeEndingTime)<sp/>-<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>relativeStartingTime));</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>user<sp/>drag<sp/>over<sp/>another<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(duration<sp/>&gt;<sp/>timeFrameWidth)<sp/>duration<sp/>=<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>emit<sp/>setStartAndDuration(startingTime,duration);</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE<sp/>&amp;&amp;<sp/>(event-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)){</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(linePositions.size()<sp/>!=<sp/>0)<sp/>drawTimeLine(0,</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>linePositions.clear();</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1de78893d26bacd552e16ca361a4ae2cf" kindref="member">TraceView::selectChannels</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>selectedIds){</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((selectedChannels.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>selectedIds.size()<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/></highlight><highlight class="comment">//Unhighlight<sp/>the<sp/>currently<sp/>selected<sp/>traces<sp/>which<sp/>are<sp/>not<sp/>selected<sp/>any<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>deselectedChannels;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/>QValueList&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>selectedChannels.begin();it<sp/>!=<sp/>selectedChannels.end();++it)</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedIds.contains(*it)<sp/>&amp;&amp;<sp/>shownChannels.contains(*it))<sp/>deselectedChannels.append(*it);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/>drawTraces(deselectedChannels,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/></highlight><highlight class="comment">//Highlight<sp/>the<sp/>newly<sp/>selected<sp/>traces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>newlySelectedChannels;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedIds.begin();<sp/>iterator<sp/>!=<sp/>selectedIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedChannels.contains(*iterator)<sp/>&amp;&amp;<sp/>shownChannels.contains(*iterator)){</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>channel<sp/>is<sp/>skipped,<sp/>do<sp/>no<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skippedChannels.contains(*iterator))<sp/><sp/>newlySelectedChannels.append(*iterator);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/>drawTraces(newlySelectedChannels,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>list<sp/>of<sp/>selected<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/>selectedChannels.clear();</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/></highlight><highlight class="comment">//the<sp/>skipped<sp/>channels<sp/>are<sp/>not<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>selectedIds.begin();<sp/>iterator<sp/>!=<sp/>selectedIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shownChannels.contains(*iterator)<sp/>&amp;&amp;<sp/>!skippedChannels.contains(*iterator))<sp/>selectedChannels.append(*iterator);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1e1590eb0f76bba3290d2aadf147b3557" kindref="member">TraceView::reset</ref>(){</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns)<sp/>columnDisplayChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/>selectedChannels.clear();</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Retreive<sp/>the<sp/>new<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>nbChannels<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_17f7985a31e8e6e94236b6b42dfa96945" kindref="member">getNbChannels</ref>();</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplingRate<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18fad4f54ef71252528e06d3ac2ccecf4" kindref="member">getSamplingRate</ref>();</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/>timeStepUnit<sp/>=<sp/>timeStep<sp/>=<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(1000)<sp/>/<sp/>static_cast&lt;float&gt;(samplingRate));</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>groups<sp/>to<sp/>be<sp/>shown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/>shownChannels.clear();</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>updateShownGroupsChannels(shownChannels);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>initial<sp/>offset<sp/>for<sp/>each<sp/>channel<sp/>is<sp/>set<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbChannels;<sp/>++i)<sp/>channelOffsets.append(0);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>initial<sp/>amplitude<sp/>and<sp/>factor<sp/>for<sp/>each<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><ref refid="classTraceView_142febc88cac5ee6029aa303cdca2e02a" kindref="member">setGains</ref>(unitGain,acquisitionGain);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tracesProvider.requestData(startTime,endTime,this,startTimeInRecordingUnits);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/>setStartAndDuration(0,50);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawCalibrationScale(QPainter&amp;<sp/>painter){</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/>QFont<sp/>f(</highlight><highlight class="stringliteral">&quot;Helvetica&quot;</highlight><highlight class="normal">,8);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/>painter.setFont(f);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/>painter.setPen(<ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref>);<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>color<sp/>for<sp/>the<sp/>legends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/></highlight><highlight class="comment">//Calibration<sp/>scale,<sp/>is<sp/>meaningful<sp/>only<sp/>if<sp/>all<sp/>the<sp/>channels<sp/>have<sp/>the<sp/>same<sp/>amplification.<sp/>Take<sp/>the<sp/>channel<sp/>0<sp/>as<sp/>the<sp/>provider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbRU<sp/>=<sp/>static_cast&lt;int&gt;(unitGain<sp/>*<sp/>channelFactors[0]);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenGain<sp/>=<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(unitGain)/static_cast&lt;float&gt;(acquisitionGain));</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gain<sp/>=<sp/>channelDisplayGains[0];</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/>QFontInfo<sp/>fontInfo<sp/>=<sp/>QFontInfo(f);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>labelSize<sp/>=<sp/>fontInfo.pixelSize()<sp/>*<sp/>12;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>voltage<sp/>calibration<sp/>bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/>QPoint<sp/>p1(viewport.right()<sp/>-<sp/>labelSize,viewport.bottom()<sp/>-<sp/>30);</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/>QPoint<sp/>p2(viewport.right()<sp/>-<sp/>labelSize,viewport.bottom()<sp/>-<sp/>30<sp/>-<sp/><ref refid="classBaseFrame_1af257590f63f103f946f599add211cd5" kindref="member">worldToViewportHeight</ref>(nbRU));</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/>painter.drawLine(p1,p2);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/>QPoint<sp/>pTextVoltage(viewport.right()<sp/>-<sp/>fontInfo.pixelSize()<sp/>*<sp/>11,viewport.bottom()<sp/>-<sp/>30);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/>painter.drawText(pTextVoltage,QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>mV<sp/>(x%2)&quot;</highlight><highlight class="normal">).arg(screenGain,0,</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,1).arg(gain,0,</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,2));</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/></highlight><highlight class="comment">//draw<sp/>the<sp/>time<sp/>calibration<sp/>bar<sp/>(a<sp/>20iest<sp/>of<sp/>the<sp/>timeframe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>barLengthInMs<sp/>=<sp/>static_cast&lt;long&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(timeFrameWidth)<sp/>/<sp/>static_cast&lt;float&gt;(20))));</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width;<sp/></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!multiColumns)<sp/>width<sp/>=<sp/>static_cast&lt;float&gt;(viewport.width());</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>static_cast&lt;float&gt;(<ref refid="classBaseFrame_1f7ebfc8274c67f570b5051977cefe9b2" kindref="member">worldToViewportWidth</ref>(Xshift)<sp/>-<sp/><ref refid="classBaseFrame_1f7ebfc8274c67f570b5051977cefe9b2" kindref="member">worldToViewportWidth</ref>(XGroupSpace));</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>barLengthInpx<sp/>=<sp/>static_cast&lt;long&gt;(floor(0.5<sp/>+<sp/>(width<sp/>/<sp/>static_cast&lt;float&gt;(timeFrameWidth))<sp/>*<sp/>static_cast&lt;float&gt;(barLengthInMs)));</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/>QPoint<sp/>p3(viewport.right()<sp/>-<sp/>labelSize,viewport.bottom()<sp/>-<sp/>30);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/>QPoint<sp/>p4(viewport.right()<sp/>-<sp/>labelSize<sp/>-<sp/>barLengthInpx,viewport.bottom()<sp/>-<sp/>30);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/>painter.drawLine(p3,p4);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/>QPoint<sp/>pTextTime(viewport.right()<sp/>-<sp/>labelSize<sp/>-<sp/>barLengthInpx<sp/>+<sp/>8,viewport.bottom()<sp/>-<sp/>15);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/>painter.drawText(pTextTime,QString(</highlight><highlight class="stringliteral">&quot;%1<sp/>ms&quot;</highlight><highlight class="normal">).arg(barLengthInMs));</highlight></codeline>
<codeline lineno="3034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::correctZoom(QRect&amp;<sp/>r){</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomed<sp/>&amp;&amp;<sp/>firstZoom<sp/>&amp;&amp;<sp/>downSampling<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/>firstZoom<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/>initialWindow<sp/>=<sp/>previousWindow;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/>initialDownSampling<sp/>=<sp/>downSampling;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/>initialXshift<sp/>=<sp/>Xshift;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/>initialXGroupSpace<sp/>=<sp/>XGroupSpace;</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/>initialTraceWidth<sp/>=<sp/>traceWidth;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if(zoomed<sp/>&amp;&amp;<sp/>!firstZoom<sp/>&amp;&amp;<sp/>zoomOut){</highlight></codeline>
<codeline lineno="3049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;&quot;<sp/>zoomed<sp/>&amp;&amp;<sp/>!firstZoom<sp/>&amp;&amp;<sp/>zoomOut<sp/>r.width()<sp/>&quot;&lt;&lt;r.width()&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3050"><highlight class="comment"><sp/><sp/><sp/><sp/>zoomOut<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="3051"><highlight class="comment"><sp/><sp/><sp/><sp/>zoomed<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="3052"><highlight class="comment"><sp/><sp/><sp/><sp/>if(zoomFactor<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="3053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(multiColumns){</highlight></codeline>
<codeline lineno="3054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="3056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>zoomed<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="3057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;&quot;zoomFactor<sp/>&quot;&lt;&lt;zoomFactor&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>windowWidth<sp/>=<sp/>r.width();</highlight></codeline>
<codeline lineno="3059"><highlight class="comment"></highlight></codeline>
<codeline lineno="3060"><highlight class="comment"></highlight></codeline>
<codeline lineno="3061"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//float<sp/>factor<sp/>=<sp/>0.5;//static_cast&lt;float&gt;(previousWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3062"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>previousDownSampling<sp/>=<sp/>downSampling;</highlight></codeline>
<codeline lineno="3063"><highlight class="comment"></highlight></codeline>
<codeline lineno="3064"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>downSampling<sp/>=<sp/>2<sp/>*<sp/>downSampling;</highlight></codeline>
<codeline lineno="3065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//float<sp/>factor<sp/>=<sp/>static_cast&lt;float&gt;(previousWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//float<sp/>previousDownSampling<sp/>=<sp/>downSampling;</highlight></codeline>
<codeline lineno="3067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>downSampling<sp/>=<sp/>downSampling/factor;</highlight></codeline>
<codeline lineno="3068"><highlight class="comment"></highlight></codeline>
<codeline lineno="3069"><highlight class="comment"></highlight></codeline>
<codeline lineno="3070"><highlight class="comment"></highlight></codeline>
<codeline lineno="3071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(downSampling<sp/>&lt;<sp/>1)<sp/>downSampling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3072"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(2<sp/>*<sp/>windowWidth<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>newLeft<sp/>=<sp/>0;//static_cast&lt;int&gt;(static_cast&lt;float&gt;(r.left())<sp/>*<sp/>previousDownSampling<sp/>/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>timeStepUnit<sp/>*<sp/>downSampling;</highlight></codeline>
<codeline lineno="3075"><highlight class="comment"></highlight></codeline>
<codeline lineno="3076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//update<sp/>the<sp/>window</highlight></codeline>
<codeline lineno="3077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>r.setLeft(newLeft);</highlight></codeline>
<codeline lineno="3078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>r.setWidth(newWidth);</highlight></codeline>
<codeline lineno="3079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/>ZoomWindow(r);</highlight></codeline>
<codeline lineno="3080"><highlight class="comment"><sp/>cout&lt;&lt;&quot;previousWindow.width()<sp/>&quot;&lt;&lt;previousWindow.width()&lt;&lt;&quot;<sp/>windowWidth<sp/>&quot;&lt;&lt;windowWidth&lt;&lt;&quot;<sp/>previousDownSampling<sp/>&quot;&lt;&lt;previousDownSampling&lt;&lt;&quot;<sp/>zoomFactor<sp/>&quot;&lt;&lt;zoomFactor&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3081"><highlight class="comment">cout&lt;&lt;&quot;<sp/>downSampling<sp/>&quot;&lt;&lt;downSampling&lt;&lt;&quot;<sp/>newWidth<sp/>&quot;&lt;&lt;newWidth&lt;&lt;&quot;<sp/>r.left()<sp/>&quot;&lt;&lt;r.left()&lt;&lt;&quot;<sp/>newLeft<sp/>&quot;&lt;&lt;newLeft&lt;&lt;&quot;<sp/>timeStep<sp/>&quot;&lt;&lt;timeStep&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3082"><highlight class="comment"></highlight></codeline>
<codeline lineno="3083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3084"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3085"><highlight class="comment"><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomed<sp/>&amp;&amp;<sp/>downSampling<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>!doubleClick){</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(maxZoomReached){</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLeft<sp/>=<sp/>r.left();</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(previousWindow);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r.setLeft(newLeft);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r.setWidth(previousWindow.width());</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(r);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousWindow<sp/>=<sp/>QRect(r);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomFactor<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowWidth<sp/>=<sp/>r.width();</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>*=<sp/>static_cast&lt;float&gt;(initialWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomFactor<sp/>&gt;<sp/>22.73){</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>/=<sp/>static_cast&lt;float&gt;(initialWindow.width())/static_cast&lt;float&gt;(r.width());</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/>22.73<sp/>/<sp/>zoomFactor;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>windowWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(initialWindow.width())/<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>=<sp/>22.73;</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxZoomReached<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.setWidth(windowWidth);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(r);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previousWindow<sp/>=<sp/>QRect(r);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomed<sp/>&amp;&amp;<sp/>downSampling<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>!doubleClick){</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowWidth<sp/>=<sp/>r.width();</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstZoom){</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>firstZoom<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>initialWindow<sp/>=<sp/>previousWindow;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>initialDownSampling<sp/>=<sp/>downSampling;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>=<sp/>static_cast&lt;float&gt;(initialWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialXshift<sp/>=<sp/>Xshift;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialXGroupSpace<sp/>=<sp/>XGroupSpace;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialTraceWidth<sp/>=<sp/>traceWidth;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!maxZoomReached){</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>*=<sp/>static_cast&lt;float&gt;(initialWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(maxZoomReached){</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLeft<sp/>=<sp/>r.left();</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>QRect(previousWindow);</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r.setLeft(newLeft);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r.setWidth(previousWindow.width());</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(r);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>previousWindow<sp/>=<sp/>QRect(r);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomFactor<sp/>&gt;<sp/>22.73){</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>/=<sp/>static_cast&lt;float&gt;(initialWindow.width())/static_cast&lt;float&gt;(r.width());</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/>22.73<sp/>/<sp/>zoomFactor;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>windowWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(initialWindow.width())/<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zoomFactor<sp/>=<sp/>22.73;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxZoomReached<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.setWidth(windowWidth);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(r);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previousWindow<sp/>=<sp/>QRect(r);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>static_cast&lt;float&gt;(previousWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>previousDownSampling<sp/>=<sp/>downSampling;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>downSampling<sp/>=<sp/>downSampling/factor;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>&lt;<sp/>1)<sp/>downSampling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newWidth;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamples<sp/>=<sp/>tracesProvider.<ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">getNbSamples</ref>(startTime,endTime,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousNbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/previousDownSampling));</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previousXGroupSpace<sp/>=<sp/>XGroupSpace;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>XGroupSpace<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(XGroupSpace)<sp/>*<sp/>factor);</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>shift<sp/>=<sp/>traceWidth<sp/>*<sp/>Xstep<sp/>+<sp/>previousXGroupSpace;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLeft;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newLeft<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>width<sp/>of<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowWidth<sp/>&lt;=<sp/>traceWidth)<sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;((windowWidth)<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroupParts<sp/>=<sp/>static_cast&lt;int&gt;(windowWidth<sp/>/<sp/>Xshift);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondPart<sp/>=<sp/>windowWidth<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(secondPart<sp/>&lt;=<sp/>traceWidth){</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;((windowWidth<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marginPart<sp/>=<sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(secondPart<sp/>-<sp/>traceWidth)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;((windowWidth<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace)<sp/>-<sp/>(secondPart<sp/>-<sp/>traceWidth))<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>marginPart;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupIndex;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>&lt;=<sp/>Xshift){</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>&gt;<sp/>traceWidth){</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marginPart<sp/>=<sp/><sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(r.left()<sp/>-<sp/>traceWidth)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newLeft<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(previousNbSamplesToDraw)<sp/>*<sp/>previousDownSampling<sp/>/<sp/>downSampling)<sp/>*<sp/>Xstep<sp/>+<sp/>marginPart;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>width<sp/>of<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>withoutFirstMarginPart<sp/>=<sp/>static_cast&lt;int&gt;(windowWidth<sp/>-<sp/>(previousXGroupSpace<sp/>-<sp/>(r.left()<sp/>-<sp/>traceWidth)));</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(withoutFirstMarginPart<sp/>&lt;=<sp/>traceWidth)</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(withoutFirstMarginPart)<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(XGroupSpace<sp/>-<sp/>marginPart);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroupParts<sp/>=<sp/>static_cast&lt;int&gt;(withoutFirstMarginPart<sp/>/<sp/>Xshift);</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondPart<sp/>=<sp/>withoutFirstMarginPart<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(secondPart<sp/>&lt;=<sp/>traceWidth){</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(withoutFirstMarginPart<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>(XGroupSpace<sp/>-<sp/>marginPart);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondMarginPart<sp/>=<sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(secondPart<sp/>-<sp/>traceWidth)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(withoutFirstMarginPart<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace)<sp/>-<sp/>(secondPart<sp/>-<sp/>traceWidth))<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>(XGroupSpace<sp/>-<sp/>marginPart)<sp/>+<sp/>secondMarginPart;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//r.left()<sp/>&lt;=<sp/>traceWidth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newLeft<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(r.left())<sp/>*<sp/>previousDownSampling<sp/>/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>width<sp/>of<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstPart<sp/>=<sp/>traceWidth<sp/>-<sp/>r.left();</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowWidth<sp/>&lt;=<sp/>firstPart){</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/><sp/>static_cast&lt;int&gt;((static_cast&lt;float&gt;(windowWidth)<sp/>*<sp/>previousDownSampling/<sp/>downSampling))<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroupParts<sp/>=<sp/>static_cast&lt;int&gt;((windowWidth<sp/>-<sp/>firstPart)<sp/>/<sp/>Xshift);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondPart<sp/>=<sp/>windowWidth<sp/>-<sp/>firstPart<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(secondPart<sp/>&lt;=<sp/>previousXGroupSpace){</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marginPart<sp/>=<sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(secondPart)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/><sp/>static_cast&lt;int&gt;((static_cast&lt;float&gt;(windowWidth<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace)<sp/>-<sp/>secondPart)<sp/>*<sp/>previousDownSampling/<sp/>downSampling))<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>marginPart;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/><sp/>static_cast&lt;int&gt;((static_cast&lt;float&gt;(windowWidth<sp/>-<sp/>((nbGroupParts<sp/>+<sp/>1)<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling/<sp/>downSampling))<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((nbGroupParts<sp/>+<sp/>1)<sp/>*<sp/>XGroupSpace);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//r.left()<sp/>&lt;=<sp/>Xshift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//r.left()<sp/>&gt;<sp/>Xshift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex<sp/>=<sp/>((r.left()<sp/>-<sp/>Xshift)<sp/>/<sp/>Xshift)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplePart<sp/>=<sp/>r.left()<sp/>-<sp/>(groupIndex<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(samplePart<sp/>&lt;=<sp/>traceWidth){</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newLeft<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(r.left()<sp/>-<sp/>(groupIndex<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling<sp/>/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(groupIndex<sp/>*<sp/>XGroupSpace);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>width<sp/>of<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowWidth<sp/>&lt;=<sp/>(traceWidth<sp/>-<sp/>samplePart)){</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/><sp/>static_cast&lt;int&gt;((static_cast&lt;float&gt;(windowWidth)<sp/>*<sp/>previousDownSampling/<sp/>downSampling))<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroupParts<sp/>=<sp/>static_cast&lt;int&gt;((windowWidth<sp/>-<sp/>(traceWidth<sp/>-<sp/>samplePart))<sp/>/<sp/>Xshift);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondPart<sp/>=<sp/>windowWidth<sp/>-<sp/>(traceWidth<sp/>-<sp/>samplePart)<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(secondPart<sp/>&lt;=<sp/>previousXGroupSpace){</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marginPart<sp/>=<sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(secondPart)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/><sp/>static_cast&lt;int&gt;((static_cast&lt;float&gt;(windowWidth<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace)<sp/>-<sp/>secondPart)<sp/>*<sp/>previousDownSampling/<sp/>downSampling))<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>marginPart;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/><sp/>static_cast&lt;int&gt;((static_cast&lt;float&gt;(windowWidth<sp/>-<sp/>((nbGroupParts<sp/>+<sp/>1)<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling/<sp/>downSampling))<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((nbGroupParts<sp/>+<sp/>1)<sp/>*<sp/>XGroupSpace);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//samplePart<sp/>&lt;=<sp/>traceWidth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marginPart<sp/>=<sp/><sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(samplePart<sp/>-<sp/>traceWidth)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newLeft<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(r.left()<sp/>-<sp/>(groupIndex<sp/>*<sp/>previousXGroupSpace)<sp/>-<sp/>(samplePart<sp/>-<sp/>traceWidth))<sp/>*<sp/>previousDownSampling<sp/>/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(groupIndex<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>marginPart;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>width<sp/>of<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstMargin<sp/>=<sp/>previousXGroupSpace<sp/>-<sp/>(samplePart<sp/>-<sp/>traceWidth);</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstMarginPart<sp/>=<sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(firstMargin)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbGroupParts<sp/>=<sp/>static_cast&lt;int&gt;((windowWidth<sp/>-<sp/>firstMargin)<sp/>/<sp/>Xshift);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondPart<sp/>=<sp/>windowWidth<sp/>-<sp/>firstMargin<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>Xshift);</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(secondPart<sp/>&lt;=<sp/>traceWidth){</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(windowWidth<sp/>-<sp/>firstMargin<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>firstMarginPart;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondMarginPart<sp/>=<sp/>static_cast&lt;int&gt;(XGroupSpace<sp/>*<sp/>static_cast&lt;float&gt;(secondPart<sp/>-<sp/>traceWidth)<sp/>/<sp/>static_cast&lt;float&gt;(previousXGroupSpace));</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(windowWidth<sp/>-<sp/>firstMargin<sp/>-<sp/>(secondPart<sp/>-<sp/>traceWidth)<sp/>-<sp/>(nbGroupParts<sp/>*<sp/>previousXGroupSpace))<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(nbGroupParts<sp/>*<sp/>XGroupSpace)<sp/>+<sp/>firstMarginPart<sp/>+<sp/>secondMarginPart;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>object<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesToDraw<sp/>=<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>static_cast&lt;float&gt;(nbSamples)/downSampling));</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Xshift<sp/>=<sp/>(nbSamplesToDraw<sp/>-<sp/>1)<sp/>*<sp/>Xstep<sp/>+<sp/>XGroupSpace;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>traceWidth<sp/>=<sp/>static_cast&lt;int&gt;(traceWidth<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>timeStepUnit<sp/>*<sp/>downSampling;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.setLeft(newLeft);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.setWidth(newWidth);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(r);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>static_cast&lt;float&gt;(previousWindow.width())/static_cast&lt;float&gt;(windowWidth);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>previousDownSampling<sp/>=<sp/>downSampling;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>downSampling<sp/>=<sp/>downSampling/factor;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(downSampling<sp/>&lt;<sp/>1)<sp/>downSampling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newWidth<sp/>=<sp/>static_cast&lt;int&gt;(windowWidth<sp/>*<sp/>previousDownSampling/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLeft<sp/>=<sp/>static_cast&lt;int&gt;(static_cast&lt;float&gt;(r.left())<sp/>*<sp/>previousDownSampling<sp/>/<sp/>downSampling)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>timeStepUnit<sp/>*<sp/>downSampling;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.setLeft(newLeft);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.setWidth(newWidth);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(r);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zoomed<sp/>&amp;&amp;<sp/>doubleClick){</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>zoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>maxZoomReached<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/>zoomFactor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>downSampling<sp/>=<sp/>initialDownSampling;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>downSampling<sp/>*<sp/>timeStepUnit;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Xshift<sp/>=<sp/>initialXshift;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>XGroupSpace<sp/>=<sp/>initialXGroupSpace;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>traceWidth<sp/>=<sp/>initialTraceWidth;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>doubleClick<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>firstZoom<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_124e676e17e88878b88e382f23fcf8d26" kindref="member">TraceView::addClusterProvider</ref>(<ref refid="classClustersProvider" kindref="compound">ClustersProvider</ref>*<sp/>clustersProvider,QString<sp/>name,<ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>clusterColors,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active,</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;&amp;<sp/>clustersToShow,QMap&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>QValueList&lt;int&gt;<sp/>&gt;*<sp/>displayGroupsClusterFile,QMap&lt;int,int&gt;*<sp/>channelsSpikeGroups,</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesBefore,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesAfter,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>clustersToSkip){</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/></highlight><highlight class="comment">//Set<sp/>Connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/>connect(clustersProvider,SIGNAL(dataReady(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*,QString)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(<ref refid="classTraceView_1ac696dfa3b582557b8bba553b5e10981" kindref="member">dataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*,QString)));</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/>connect(clustersProvider,SIGNAL(nextClusterDataReady(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(<ref refid="classTraceView_12859ecbe86562874fe2664093aefefc4" kindref="member">nextClusterDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/>connect(clustersProvider,SIGNAL(previousClusterDataReady(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(<ref refid="classTraceView_1d1dc80ff4b51d2c1c8559276a72480ad" kindref="member">previousClusterDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><ref refid="classTraceView_1ec505e9903c276ee3bb8e49396cee513" kindref="member">updateNoneBrowsingClusterList</ref>(name,clustersToSkip);<sp/><sp/></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToShow.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>clusters;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownClustersIterator;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownClustersIterator<sp/>=<sp/>clustersToShow.begin();<sp/>shownClustersIterator<sp/>!=<sp/>clustersToShow.end();<sp/>++shownClustersIterator){</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/>clusters.append(*shownClustersIterator);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/>selectedClusters.insert(name.toInt(),clusters);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/>ClusterData*<sp/>clusterData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterData();</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/>clustersData.insert(name,clusterData);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>view<sp/>is<sp/>the<sp/>active<sp/>one,<sp/>load<sp/>the<sp/>cluster<sp/>data<sp/>for<sp/>the<sp/>current<sp/>start<sp/>time<sp/>and<sp/>time<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/>clustersProvider-&gt;<ref refid="classClustersProvider_173f86b1dda818e9a02e1a5faa2dea1b8" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/>clusterProviders.insert(name,clustersProvider);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/>providerItemColors.insert(name,clusterColors);</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/>groupClusterFiles<sp/>=<sp/>displayGroupsClusterFile;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/>channelClusterFiles<sp/>=<sp/>channelsSpikeGroups;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/>this-&gt;nbSamplesBefore<sp/>=<sp/>nbSamplesBefore;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/>this-&gt;nbSamplesAfter<sp/>=<sp/>nbSamplesAfter;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1c0a337309aef21c7973117204745a08b" kindref="member">TraceView::removeClusterProvider</ref>(QString<sp/>name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/>selectedClusters.remove(name.toInt());</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/>clustersNotUsedForBrowsing.remove(name);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/>clusterProviders.remove(name);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/>providerItemColors.remove(name);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/>clustersData.remove(name);</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(raster)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active)<sp/>update();</highlight></codeline>
<codeline lineno="3383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_11f56cb8787db3d5a73aa9d426a6d2ecd" kindref="member">TraceView::showClusters</ref>(QString<sp/>name,QValueList&lt;int&gt;&amp;<sp/>clustersToShow){</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/>ClusterData*<sp/>clusterData;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/>clusterData<sp/>=<sp/>clustersData[name];</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>clusters;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToShow.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownClustersIterator;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownClustersIterator<sp/>=<sp/>clustersToShow.begin();<sp/>shownClustersIterator<sp/>!=<sp/>clustersToShow.end();<sp/>++shownClustersIterator){</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/>clusters.append(*shownClustersIterator);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/>selectedClusters.insert(name.toInt(),clusters);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterData<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/>clusterData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterData();</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/>clustersData.insert(name,clusterData);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><ref refid="classClustersProvider" kindref="compound">ClustersProvider</ref>*<sp/>provider<sp/>=<sp/>clusterProviders[name];</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/>provider-&gt;<ref refid="classClustersProvider_173f86b1dda818e9a02e1a5faa2dea1b8" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/>selectedClusters.insert(name.toInt(),clusters);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1ec505e9903c276ee3bb8e49396cee513" kindref="member">TraceView::updateNoneBrowsingClusterList</ref>(QString<sp/>providerName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>clustersToNotBrowse){</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>clusters;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clustersToNotBrowse.begin();<sp/>iterator<sp/>!=<sp/>clustersToNotBrowse.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/>clusters.append(*iterator);</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/>clustersNotUsedForBrowsing.insert(providerName,clusters);</highlight></codeline>
<codeline lineno="3425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_12b8bb8cff8bd1ac6e5173a94eb36fce7" kindref="member">TraceView::skipStatusChanged</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>skippedChannels){</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/>this-&gt;skippedChannels.clear();</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>skippedChannels.begin();<sp/>iterator<sp/>!=<sp/>skippedChannels.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>this-&gt;skippedChannels.append(*iterator);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline lineno="3433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1f5af8811703eb4d91598b7cc59de5077" kindref="member">TraceView::clusterColorUpdate</ref>(QString<sp/>name,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/></highlight><highlight class="comment">//redraw<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW<sp/>;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1426c5ea3b1f31c871c5bc0ab46647b85" kindref="member">TraceView::updateWaveformInformation</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesBefore,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbSamplesAfter,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/>this-&gt;nbSamplesBefore<sp/>=<sp/>nbSamplesBefore;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/>this-&gt;nbSamplesAfter<sp/>=<sp/>nbSamplesAfter;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW<sp/>;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline lineno="3451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_17214244826f6a7c4d4b60219a43b7c60" kindref="member">TraceView::print</ref>(QPainter&amp;<sp/>printPainter,QPaintDeviceMetrics&amp;<sp/>metrics,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>whiteBackground){<sp/></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)<sp/>by<sp/>copying<sp/>it<sp/>into<sp/>the<sp/>printer<sp/>device<sp/>throught<sp/>the<sp/>painter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/>QRect<sp/>viewportOld<sp/>=<sp/>QRect(viewport.left(),viewport.top(),viewport.width(),viewport.height());</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>left<sp/>margin<sp/>is<sp/>not<sp/>visible<sp/>(the<sp/>user<sp/>zoomed<sp/>without<sp/>taking<sp/>it<sp/>in<sp/>his<sp/>selection),<sp/>the<sp/>viewport<sp/>and<sp/>the<sp/>printer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//have<sp/>the<sp/>same<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>!=<sp/>0)<sp/>viewport<sp/>=<sp/>QRect(printPainter.viewport().left(),printPainter.viewport().top(),printPainter.viewport().width(),printPainter.viewport().height());</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>viewport<sp/>=<sp/>QRect(printPainter.viewport().left()<sp/>+<sp/>xMargin,printPainter.viewport().top(),printPainter.viewport().width()<sp/>-<sp/>xMargin,printPainter.viewport().height());</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Enable<sp/>to<sp/>draw<sp/>all<sp/>the<sp/>points<sp/>without<sp/>down<sp/>sampling<sp/>in<sp/>order<sp/>to<sp/>have<sp/>one<sp/>line<sp/>per<sp/>trace<sp/>and<sp/>not<sp/>a<sp/>multiple<sp/>number<sp/>of<sp/>small<sp/>vertical<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>will<sp/>suppress<sp/>any<sp/>zoom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/>printState<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>((QRect)window);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/>printPainter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>viewport<sp/>(part<sp/>of<sp/>the<sp/>device<sp/>I<sp/>want<sp/>to<sp/>write<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//By<sp/>default,<sp/>the<sp/>viewport<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>device&apos;s<sp/>rectangle<sp/>(contentsRec),<sp/>taking<sp/>a<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//one<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>legends<sp/>will<sp/>not<sp/>ovelap<sp/>the<sp/>traces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/>printPainter.setViewport(viewport);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>background<sp/>with<sp/>the<sp/>background<sp/>color<sp/>and<sp/>ensure<sp/>we<sp/>draw<sp/>the<sp/>same<sp/>portion<sp/>of<sp/>the<sp/>world<sp/>than<sp/>on<sp/>the<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/>QRect<sp/>back<sp/>=<sp/>QRect(r.left(),r.top(),r.width(),r.height());</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>widthRatio<sp/>=<sp/>(static_cast&lt;float&gt;(back.width())/static_cast&lt;float&gt;(metrics.width()));</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.left()<sp/>==<sp/>0)<sp/>back.setLeft(r.left()<sp/>-<sp/>static_cast&lt;long&gt;(xMargin<sp/>*<sp/>widthRatio));</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/>QColor<sp/>colorLegendTmp<sp/>=<sp/><ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref>;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/>QColor<sp/>background=<sp/>backgroundColor();</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(whiteBackground){</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref><sp/>=<sp/>black;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/>setPaletteBackgroundColor(white);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>printPainter.fillRect(back,backgroundColor());</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/>printPainter.setClipRect(back,QPainter::CoordPainter);</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Paint<sp/>all<sp/>the<sp/>traces<sp/>in<sp/>the<sp/>shownChannels<sp/>list<sp/>(in<sp/>the<sp/>double<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/>drawTraces(printPainter);</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reset<sp/>transformation<sp/>due<sp/>to<sp/>setWindow<sp/>and<sp/>setViewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/>printPainter.resetXForm()<sp/>;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>channel<sp/>ids<sp/>and<sp/>amplitude<sp/>on<sp/>the<sp/>left<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(showLabels)<sp/>drawChannelIdsAndGain(printPainter);</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>calibration<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(showCalibrationScale)<sp/>drawCalibrationScale(printPainter);</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/>printPainter.setClipping(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Restore<sp/>the<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(whiteBackground){</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref><sp/>=<sp/>colorLegendTmp;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/>setPaletteBackgroundColor(background);</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Restore<sp/>the<sp/>previous<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>viewport<sp/>=<sp/>QRect(viewportOld.left(),viewportOld.top(),viewportOld.width(),viewportOld.height());</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>printState<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="3516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_12a33dd682edbab311d67deda5253a8a6" kindref="member">TraceView::addEventProvider</ref>(<ref refid="classEventsProvider" kindref="compound">EventsProvider</ref>*<sp/>eventsProvider,QString<sp/>name,<ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>eventColors,</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active,QValueList&lt;int&gt;&amp;<sp/>eventsToShow,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>eventsToSkip){</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/></highlight><highlight class="comment">//Set<sp/>Connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/>connect(eventsProvider,SIGNAL(dataReady(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;,QObject*,QString)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(<ref refid="classTraceView_1ac696dfa3b582557b8bba553b5e10981" kindref="member">dataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;,QObject*,QString)));</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/>connect(eventsProvider,SIGNAL(nextEventDataReady(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(<ref refid="classTraceView_155cf8a5cf7eb8c36e7d73235836223b2" kindref="member">nextEventDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/>connect(eventsProvider,SIGNAL(previousEventDataReady(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,SLOT(<ref refid="classTraceView_148c3fcf78b041f2728f606f1d2d6018e" kindref="member">previousEventDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;,QObject*,QString,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><ref refid="classTraceView_1dfeda22e2719ea704e5780c720986ba3" kindref="member">updateNoneBrowsingEventList</ref>(name,eventsToSkip);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventsToShow.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>events;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownEventsIterator;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownEventsIterator<sp/>=<sp/>eventsToShow.begin();<sp/>shownEventsIterator<sp/>!=<sp/>eventsToShow.end();<sp/>++shownEventsIterator){</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/>events.append(*shownEventsIterator);</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>selectedEvents.insert(name,events);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/>EventData*<sp/>eventData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EventData();</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/>eventsData.insert(name,eventData);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>view<sp/>is<sp/>the<sp/>active<sp/>one,<sp/>load<sp/>the<sp/>event<sp/>data<sp/>for<sp/>the<sp/>current<sp/>start<sp/>time<sp/>and<sp/>time<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/>eventsProvider-&gt;<ref refid="classEventsProvider_1d6dec09f16591b2f53cbddbdc96babb1" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/>eventProviders.insert(name,eventsProvider);</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/>providerItemColors.insert(name,eventColors);</highlight></codeline>
<codeline lineno="3550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_15b1294c7ecf948fe3f3c1c71ea9e9a3a" kindref="member">TraceView::removeEventProvider</ref>(QString<sp/>name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/>selectedEvents.remove(name);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/>eventsNotUsedForBrowsing.remove(name);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/>eventProviders.remove(name);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/>providerItemColors.remove(name);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/>eventsData.remove(name);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active)<sp/>update();</highlight></codeline>
<codeline lineno="3561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1b1be7029208deced848dd5a00e069238" kindref="member">TraceView::showEvents</ref>(QString<sp/>name,QValueList&lt;int&gt;&amp;<sp/>eventsToShow){<sp/></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/>EventData*<sp/>eventData;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/>eventData<sp/>=<sp/>eventsData[name];</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>events;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventsToShow.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownEventsIterator;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownEventsIterator<sp/>=<sp/>eventsToShow.begin();<sp/>shownEventsIterator<sp/>!=<sp/>eventsToShow.end();<sp/>++shownEventsIterator){</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/>events.append(*shownEventsIterator);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/>selectedEvents.insert(name,events);</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventData<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/>eventData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EventData();</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/>eventsData.insert(name,eventData);</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><ref refid="classEventsProvider" kindref="compound">EventsProvider</ref>*<sp/>provider<sp/>=<sp/>eventProviders[name];</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/>provider-&gt;<ref refid="classEventsProvider_1d6dec09f16591b2f53cbddbdc96babb1" kindref="member">requestData</ref>(startTime,endTime,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/>selectedEvents.insert(name,events);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="classTraceView_155428d02398ab02597a5721da780c502" kindref="member">TraceView::updateEvents</ref>(QString<sp/>providerName,QValueList&lt;int&gt;&amp;<sp/>eventsToShow,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/>EventData*<sp/>eventData;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/>eventData<sp/>=<sp/>eventsData[providerName];</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>events;</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/>QValueList&lt;int&gt;::iterator<sp/>shownEventsIterator;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownEventsIterator<sp/>=<sp/>eventsToShow.begin();<sp/>shownEventsIterator<sp/>!=<sp/>eventsToShow.end();<sp/>++shownEventsIterator){</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/>events.append(*shownEventsIterator);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/>selectedEvents.insert(providerName,events);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventData<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/>eventData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EventData();</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/>eventsData.insert(providerName,eventData);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!eventProvidersToUpdate.contains(providerName))<sp/>eventProvidersToUpdate.append(providerName);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active)<sp/>update();</highlight></codeline>
<codeline lineno="3611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1dfeda22e2719ea704e5780c720986ba3" kindref="member">TraceView::updateNoneBrowsingEventList</ref>(QString<sp/>providerName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>eventsToNotBrowse){</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>events;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>eventsToNotBrowse.begin();<sp/>iterator<sp/>!=<sp/>eventsToNotBrowse.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>events.append(*iterator);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/>eventsNotUsedForBrowsing.insert(providerName,events);</highlight></codeline>
<codeline lineno="3620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_14b1905ab18ff46db2d8d4d1f23991843" kindref="member">TraceView::eventColorUpdate</ref>(QString<sp/>name,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW<sp/>;</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/>update();</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_198cea56712568cbbfb84869406eb1e0c" kindref="member">TraceView::showNextEvent</ref>(){<sp/><sp/></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endTime<sp/>==<sp/>recordingLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/></highlight><highlight class="comment">//Only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>events<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()){</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;<sp/>idsToBrowse;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedEvents.begin();<sp/>providersIterator<sp/>!=<sp/>selectedEvents.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())<sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>there<sp/>are<sp/>events<sp/>to<sp/>browse<sp/>through<sp/>taking<sp/>the<sp/>skip<sp/>list<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selectedIds<sp/>=<sp/>selectedEvents[providersIterator.key()];</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>idsToNotUse<sp/>=<sp/>eventsNotUsedForBrowsing[providersIterator.key()];</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownEventsIterator;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownEventsIterator<sp/>=<sp/>selectedIds.begin();<sp/>shownEventsIterator<sp/>!=<sp/>selectedIds.end();<sp/>++shownEventsIterator)</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!idsToNotUse.contains(*shownEventsIterator))<sp/>ids.append(*shownEventsIterator);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ids.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idsToBrowse.insert(providersIterator.key(),ids);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>static_cast&lt;EventData*&gt;(eventsData[providersIterator.key()])-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/>selectedEvents.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/>eventsData.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()<sp/>&amp;&amp;<sp/>idsToBrowse.count()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/>nextEventProvider.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/>nextEventProvider.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids<sp/>=<sp/>idsToBrowse[iterator.currentKey()];</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!static_cast&lt;EventData*&gt;(iterator.current())-&gt;status()<sp/>&amp;&amp;<sp/>ids.size()<sp/>!=<sp/>0)<sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[iterator.currentKey()])-&gt;requestNextEventData(startTime,timeFrameWidth,ids,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_19a4e4ef79aba3d485089c0b5dc29b95e" kindref="member">TraceView::showPreviousEvent</ref>(){</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startTime<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/></highlight><highlight class="comment">//Only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>events<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()){</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;<sp/>idsToBrowse;</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/>QMap&lt;QString,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedEvents.begin();<sp/>providersIterator<sp/>!=<sp/>selectedEvents.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())<sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>there<sp/>are<sp/>events<sp/>to<sp/>browse<sp/>through<sp/>taking<sp/>the<sp/>skip<sp/>list<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selectedIds<sp/>=<sp/>selectedEvents[providersIterator.key()];</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>idsToNotUse<sp/>=<sp/>eventsNotUsedForBrowsing[providersIterator.key()];</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownEventsIterator;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownEventsIterator<sp/>=<sp/>selectedIds.begin();<sp/>shownEventsIterator<sp/>!=<sp/>selectedIds.end();<sp/>++shownEventsIterator)</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!idsToNotUse.contains(*shownEventsIterator))<sp/>ids.append(*shownEventsIterator);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ids.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idsToBrowse.insert(providersIterator.key(),ids);</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>static_cast&lt;EventData*&gt;(eventsData[providersIterator.key()])-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/>QValueList&lt;QString&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/>selectedEvents.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/>eventsData.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedEvents.isEmpty()<sp/>&amp;&amp;<sp/>idsToBrowse.count()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/>previousEventProvider.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/>previousEventProvider.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids<sp/>=<sp/>idsToBrowse[iterator.currentKey()];</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!static_cast&lt;EventData*&gt;(iterator.current())-&gt;status()<sp/>&amp;&amp;<sp/>ids.size()<sp/>!=<sp/>0)<sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[iterator.currentKey()])-&gt;requestPreviousEventData(startTime,timeFrameWidth,ids,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_155cf8a5cf7eb8c36e7d73235836223b2" kindref="member">TraceView::nextEventDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>times,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>ids,QObject*<sp/>initiator,QString<sp/>providerName,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startingTime){</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>no<sp/>event<sp/>has<sp/>been<sp/>found<sp/>the<sp/>return<sp/>startingTime<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>send<sp/>one<sp/>(endTime).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/>EventData*<sp/>eventData<sp/>=<sp/>eventsData[providerName];</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingTime<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>startingTime<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/>eventData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/>eventData-&gt;setData(times,ids);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>eventData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nextEventProvider.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>||<sp/>(nextEventProvider.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>startingTime<sp/>&lt;<sp/>nextEventProvider.second)){</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/>nextEventProvider.first<sp/>=<sp/>providerName;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/>nextEventProvider.second<sp/>=<sp/>startingTime;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>new<sp/>start<sp/>time<sp/>is<sp/>equals<sp/>to<sp/>the<sp/>current<sp/>startTime<sp/>do<sp/>not<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>nextEventProvider.second<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>nextEventProvider.second<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((nextEventProvider.second<sp/>+<sp/>timeFrameWidth<sp/>&gt;<sp/>recordingLength)){</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>start<sp/>time<sp/>=<sp/><sp/>recordingLength<sp/>-<sp/>timeFrameWidth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>traceWidget<sp/>time<sp/>widgets<sp/>and<sp/>retrieve<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time<sp/>for<sp/>all<sp/>the<sp/>providers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/>eventProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(recordingLength<sp/>-<sp/>timeFrameWidth,timeFrameWidth);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/>eventProviderToSkip<sp/>=<sp/>nextEventProvider.first;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>traceWidget<sp/>time<sp/>widgets<sp/>and<sp/>retreive<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time<sp/>for<sp/>all<sp/>the<sp/>providers<sp/>except<sp/>the<sp/>one<sp/>containing<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(nextEventProvider.second,timeFrameWidth);</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>(nextEventProvider.second<sp/>==<sp/>startTime<sp/>||<sp/>nextEventProvider.second<sp/>&gt;<sp/>recordingLength)){</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_148c3fcf78b041f2728f606f1d2d6018e" kindref="member">TraceView::previousEventDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>times,<ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>ids,QObject*<sp/>initiator,QString<sp/>providerName,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startingTime){</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>no<sp/>event<sp/>has<sp/>been<sp/>found<sp/>the<sp/>return<sp/>startingTime<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>send<sp/>one<sp/>(startTime).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>te<sp/>event<sp/>file<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>data<sp/>file,<sp/>the<sp/>startingTime<sp/>can<sp/>be<sp/>over<sp/>the<sp/>recording<sp/>Length,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/></highlight><highlight class="comment">//case<sp/>as<sp/>to<sp/>be<sp/>taken<sp/>into<sp/>account.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/>EventData*<sp/>eventData<sp/>=<sp/>eventsData[providerName];</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingTime<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>startingTime<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/>eventData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/>eventData-&gt;setData(times,ids);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>eventData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousEventProvider.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/>(previousEventProvider.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>startingTime<sp/>&gt;<sp/>previousEventProvider.second<sp/>&amp;&amp;<sp/>startingTime<sp/>!=<sp/>startTime)<sp/>||</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/>(previousEventProvider.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>startingTime<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>previousEventProvider.second<sp/>==<sp/>startTime)<sp/>){</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/>previousEventProvider.first<sp/>=<sp/>providerName;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/>previousEventProvider.second<sp/>=<sp/>startingTime;</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>previousEventProvider.second<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>previousEventProvider.second<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousEventProvider.second<sp/>+<sp/>timeFrameWidth<sp/>&gt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/>eventProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(recordingLength<sp/>-<sp/>timeFrameWidth,timeFrameWidth);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/>eventProviderToSkip<sp/>=<sp/>previousEventProvider.first;</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>traceWidget<sp/>time<sp/>widgets<sp/>and<sp/>retreive<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time<sp/>for<sp/>all<sp/>the<sp/>providers<sp/>except<sp/>the<sp/>one<sp/>containing<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(previousEventProvider.second,timeFrameWidth);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>new<sp/>start<sp/>time<sp/>is<sp/>equals<sp/>to<sp/>the<sp/>current<sp/>one<sp/>or<sp/>superior<sp/>to<sp/>the<sp/>recording<sp/>lenght<sp/>do<sp/>not<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>previousEventProvider.second<sp/>==<sp/>startTime){</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>previousEventProvider.second<sp/>&gt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;<sp/></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/>previousEventProvider.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/>previousEventProvider.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EventData&gt;<sp/>iterator(eventsData);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selectedIds<sp/>=<sp/>selectedEvents[iterator.currentKey()];</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[iterator.currentKey()])-&gt;requestPreviousEventData(startTime,timeFrameWidth,selectedIds,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraceView::drawEvent(QString<sp/>providerName,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedEventId,dataType<sp/>selectedEventIndex,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>highlight){</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/>painter.begin(&amp;doublebuffer);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>r.top();</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>r.bottom();</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getTimes();</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[providerName])-&gt;getIds();</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventId<sp/>==<sp/>selectedEventId<sp/>&amp;&amp;<sp/>index<sp/>==<sp/>selectedEventIndex){</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>colors<sp/>=<sp/>providerItemColors[providerName];<sp/></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>colors-&gt;<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(eventId);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multiColumns){</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>groups<sp/>(one<sp/>by<sp/>column)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupIds.begin();<sp/>iterator<sp/>!=<sp/>groupIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>X<sp/>+<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight){</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),1,Qt::DotLine);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redraw<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(2);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),2,Qt::DotLine);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redraw<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(1);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>Xshift;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//multicolumns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight><highlight class="comment">//single<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abscissa<sp/>=<sp/>static_cast&lt;int&gt;(0.5<sp/>+<sp/>(static_cast&lt;float&gt;(index)<sp/>/<sp/>downSampling));<sp/></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(highlight){</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),1,Qt::DotLine);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redraw<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(2);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//erase<sp/>the<sp/>previous<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(backgroundColor(),2,Qt::DotLine);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redraw<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setColor(color);</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pen.setWidth(1);</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawLine(abscissa,top,abscissa,bottom);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reset<sp/>transformation<sp/>due<sp/>to<sp/>setWindow<sp/>and<sp/>setViewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/>painter.resetXForm()<sp/>;</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Closes<sp/>the<sp/>painter<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)<sp/>by<sp/>copying<sp/>it<sp/>into<sp/>the<sp/>widget<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="3932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_17b7f551c7d27a1462fb9ab11a62b7091" kindref="member">TraceView::channelColorUpdate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>shown<sp/>groups<sp/>to<sp/>find<sp/>if<sp/>channelId<sp/>is<sp/>currently<sp/>displayed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>groupIds<sp/>=<sp/>shownGroupsChannels.keys();</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>groupIds.begin();<sp/>iterator<sp/>!=<sp/>groupIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channelIds<sp/>=<sp/>shownGroupsChannels[*iterator];</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(channelIds.contains(channelId)){</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>channels;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>channels.append(channelId);</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>drawTraces(channels,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>drawTraces(channels,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw<sp/>at<sp/>the<sp/>next<sp/>show<sp/>of<sp/>the<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW<sp/>;</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1313dc0bc4af37a5ab6e16a99a0ae8b25" kindref="member">TraceView::removeEvent</ref>(){</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(selectedEvent.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>currentData<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[selectedEvent.first])-&gt;getTimes();</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;int&gt;</ref>&amp;<sp/>currentIds<sp/>=<sp/>static_cast&lt;EventData*&gt;(eventsData[selectedEvent.first])-&gt;getIds();</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbEvents<sp/>=<sp/>currentData.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbEvents;++i){</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>index<sp/>=<sp/>currentData(1,i);</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId<sp/>=<sp/>currentIds(1,i);</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eventId<sp/>==<sp/>selectedEvent.second<sp/>&amp;&amp;<sp/>index<sp/>==<sp/>selectedEventPosition[0]){</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplingRate<sp/>=<sp/>static_cast&lt;double&gt;(tracesProvider.<ref refid="classTracesProvider_18fad4f54ef71252528e06d3ac2ccecf4" kindref="member">getSamplingRate</ref>())<sp/>/<sp/>1000.0;</highlight><highlight class="comment">//in<sp/>eventProvider<sp/>the<sp/>time<sp/>is<sp/>in<sp/>miliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>(static_cast&lt;double&gt;(index)<sp/>/<sp/>samplingRate)<sp/>+<sp/>static_cast&lt;double&gt;(startTime);</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/>eventBeingModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Notify<sp/>the<sp/>provider<sp/>of<sp/>the<sp/>deletion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;EventsProvider*&gt;(eventProviders[selectedEvent.first])-&gt;<ref refid="classTraceView_1313dc0bc4af37a5ab6e16a99a0ae8b25" kindref="member">removeEvent</ref>(eventId,time);</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>eventBeingModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//notify<sp/>everybody<sp/>of<sp/>the<sp/>deletion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>eventRemoved(selectedEvent.first,eventId,time);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/>previousDragAbscissa<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/>selectedEvent.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/>selectedEvent.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/>startEventDragging<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/></highlight><highlight class="comment">//Redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="3987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_11079f060958e7b60d315120abb9ecc41" kindref="member">TraceView::showNextCluster</ref>(){</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endTime<sp/>==<sp/>recordingLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/></highlight><highlight class="comment">//Only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>clusters<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedClusters.isEmpty()){</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;<sp/>idsToBrowse;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedClusters.begin();<sp/>providersIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())<sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>there<sp/>are<sp/>clusters<sp/>to<sp/>browse<sp/>through<sp/>taking<sp/>the<sp/>skip<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selectedIds<sp/>=<sp/>selectedClusters[providersIterator.key()];</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>idsToNotUse<sp/>=<sp/>clustersNotUsedForBrowsing[QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(providersIterator.key())];</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownClustersIterator;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownClustersIterator<sp/>=<sp/>selectedIds.begin();<sp/>shownClustersIterator<sp/>!=<sp/>selectedIds.end();<sp/>++shownClustersIterator)</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!idsToNotUse.contains(*shownClustersIterator))<sp/>ids.append(*shownClustersIterator);</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ids.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idsToBrowse.insert(providersIterator.key(),ids);</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>static_cast&lt;ClusterData*&gt;(clustersData[QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(providersIterator.key())])-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/>selectedClusters.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/>clustersData.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*toRemoveIterator));</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedClusters.isEmpty()<sp/>&amp;&amp;<sp/>idsToBrowse.count()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/>nextClusterProvider.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/>nextClusterProvider.second<sp/>=<sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/>previousStartTimeInRecordingUnits<sp/>=<sp/>startTimeInRecordingUnits;</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids<sp/>=<sp/>idsToBrowse[iterator.currentKey().toInt()];</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!static_cast&lt;ClusterData*&gt;(iterator.current())-&gt;status()<sp/>&amp;&amp;<sp/>ids.size()<sp/>!=<sp/>0)<sp/>static_cast&lt;ClustersProvider*&gt;(clusterProviders[iterator.currentKey()])-&gt;requestNextClusterData(startTime,timeFrameWidth,ids,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1e3b6b42d339ec0ba5d1678f477c1ef8b" kindref="member">TraceView::showPreviousCluster</ref>(){</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startTime<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/></highlight><highlight class="comment">//Only<sp/>request<sp/>data<sp/>from<sp/>the<sp/>provider<sp/>for<sp/>which<sp/>clusters<sp/>have<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedClusters.isEmpty()){</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>toRemove;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;<sp/>idsToBrowse;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/>QMap&lt;int,<sp/>QValueList&lt;int&gt;<sp/>&gt;::Iterator<sp/>providersIterator;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(providersIterator<sp/>=<sp/>selectedClusters.begin();<sp/>providersIterator<sp/>!=<sp/>selectedClusters.end();<sp/>++providersIterator){</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast</highlight><highlight class="normal">&lt;<sp/>QValueList&lt;int&gt;<sp/>&gt;(providersIterator.data()).isEmpty())<sp/>toRemove.append(providersIterator.key());</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>there<sp/>are<sp/>clusters<sp/>to<sp/>browse<sp/>through<sp/>taking<sp/>the<sp/>skip<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selectedIds<sp/>=<sp/>selectedClusters[providersIterator.key()];</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>idsToNotUse<sp/>=<sp/>clustersNotUsedForBrowsing[QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(providersIterator.key())];</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>shownClustersIterator;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(shownClustersIterator<sp/>=<sp/>selectedIds.begin();<sp/>shownClustersIterator<sp/>!=<sp/>selectedIds.end();<sp/>++shownClustersIterator){</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!idsToNotUse.contains(*shownClustersIterator))<sp/>ids.append(*shownClustersIterator);</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ids.size()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idsToBrowse.insert(providersIterator.key(),ids);</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>static_cast&lt;ClusterData*&gt;(clustersData[QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(providersIterator.key())])-&gt;setStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>toRemoveIterator;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(toRemoveIterator<sp/>=<sp/>toRemove.begin();<sp/>toRemoveIterator<sp/>!=<sp/>toRemove.end();<sp/>++toRemoveIterator){</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/>selectedClusters.remove(*toRemoveIterator);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/>clustersData.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*toRemoveIterator));</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selectedClusters.isEmpty()<sp/>&amp;&amp;<sp/>idsToBrowse.count()<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/>previousClusterProvider.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/>previousClusterProvider.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/>previousStartTimeInRecordingUnits<sp/>=<sp/>startTimeInRecordingUnits;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>ids<sp/>=<sp/>idsToBrowse[iterator.currentKey().toInt()];<sp/></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!static_cast&lt;ClusterData*&gt;(iterator.current())-&gt;status()<sp/>&amp;&amp;<sp/>ids.size()<sp/>!=<sp/>0)<sp/>static_cast&lt;ClustersProvider*&gt;(clusterProviders[iterator.currentKey()])-&gt;requestPreviousClusterData(startTime,timeFrameWidth,ids,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_12859ecbe86562874fe2664093aefefc4" kindref="member">TraceView::nextClusterDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>data,QObject*<sp/>initiator,QString<sp/>providerName,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startingTime,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startingTimeInRecordingUnits){</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>no<sp/>cluster<sp/>has<sp/>been<sp/>found<sp/>the<sp/>return<sp/>startingTime<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>send<sp/>one<sp/>(endTime).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/>ClusterData*<sp/>clusterData<sp/>=<sp/>clustersData[providerName];</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingTime<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>startingTime<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/>clusterData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/>clusterData-&gt;setData(data);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>clusterData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nextClusterProvider.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>||<sp/>(nextClusterProvider.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>startingTimeInRecordingUnits<sp/>&lt;<sp/>startTimeInRecordingUnits)){</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>nextClusterProvider.first<sp/>=<sp/>providerName;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/>nextClusterProvider.second<sp/>=<sp/>startingTime;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/>startTimeInRecordingUnits<sp/>=<sp/>startingTimeInRecordingUnits;</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/>spikeBrowsing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>new<sp/>start<sp/>time<sp/>is<sp/>equals<sp/>to<sp/>the<sp/>current<sp/>startTime<sp/>(in<sp/>recording<sp/>unit)<sp/>do<sp/>not<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>startTimeInRecordingUnits<sp/>!=<sp/>previousStartTimeInRecordingUnits<sp/>&amp;&amp;<sp/>nextClusterProvider.second<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nextClusterProvider.second<sp/>+<sp/>timeFrameWidth<sp/>&gt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>start<sp/>time<sp/>=<sp/><sp/>recordingLength<sp/>-<sp/>timeFrameWidth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>traceWidget<sp/>time<sp/>widgets<sp/>and<sp/>retrieve<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time<sp/>for<sp/>all<sp/>the<sp/>providers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/>clusterProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(recordingLength<sp/>-<sp/>timeFrameWidth,timeFrameWidth);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/>clusterProviderToSkip<sp/>=<sp/>nextClusterProvider.first;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>traceWidget<sp/>time<sp/>widgets<sp/>and<sp/>retrieve<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time<sp/>for<sp/>all<sp/>the<sp/>providers<sp/>except<sp/>the<sp/>one<sp/>containing<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(nextClusterProvider.second,timeFrameWidth);</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>(startTimeInRecordingUnits<sp/>==<sp/>previousStartTimeInRecordingUnits<sp/>||<sp/>nextClusterProvider.second<sp/>&gt;<sp/>recordingLength)){</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/>startTimeInRecordingUnits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1d1dc80ff4b51d2c1c8559276a72480ad" kindref="member">TraceView::previousClusterDataAvailable</ref>(<ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref>&amp;<sp/>data,QObject*<sp/>initiator,QString<sp/>providerName,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startingTime,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startingTimeInRecordingUnits){</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>another<sp/>widget<sp/>was<sp/>the<sp/>initiator<sp/>of<sp/>the<sp/>request,<sp/>ignore<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initiator<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>no<sp/>cluster<sp/>has<sp/>been<sp/>found<sp/>the<sp/>return<sp/>startingTime<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>send<sp/>one<sp/>(startTime).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>file<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>data<sp/>file,<sp/>the<sp/>startingTime<sp/>can<sp/>be<sp/>over<sp/>the<sp/>recording<sp/>Length,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/></highlight><highlight class="comment">//case<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>into<sp/>account.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/>ClusterData*<sp/>clusterData<sp/>=<sp/>clustersData[providerName];</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startingTime<sp/>!=<sp/>startTime<sp/>&amp;&amp;<sp/>startingTime<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/>clusterData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>clusterData-&gt;setData(data);</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>clusterData-&gt;setStatus(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousClusterProvider.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/>(previousClusterProvider.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>startingTimeInRecordingUnits<sp/>&gt;<sp/>startTimeInRecordingUnits<sp/>&amp;&amp;<sp/>startingTimeInRecordingUnits<sp/>!=<sp/>previousStartTimeInRecordingUnits)<sp/>||</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/>(previousClusterProvider.first<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>startingTimeInRecordingUnits<sp/>!=<sp/>previousStartTimeInRecordingUnits<sp/>&amp;&amp;<sp/>startTimeInRecordingUnits<sp/>==<sp/>previousStartTimeInRecordingUnits)){</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/>previousClusterProvider.first<sp/>=<sp/>providerName;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/>previousClusterProvider.second<sp/>=<sp/>startingTime;</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/>startTimeInRecordingUnits<sp/>=<sp/>startingTimeInRecordingUnits;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/>spikeBrowsing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>ready<sp/>=<sp/>iterator.current()-&gt;status();</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ready)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>startTimeInRecordingUnits<sp/>!=<sp/>previousStartTimeInRecordingUnits<sp/>&amp;&amp;<sp/>previousClusterProvider.second<sp/>&lt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(previousClusterProvider.second<sp/>+<sp/>timeFrameWidth<sp/>&gt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/>clusterProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(recordingLength<sp/>-<sp/>timeFrameWidth,timeFrameWidth);</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/>clusterProviderToSkip<sp/>=<sp/>previousClusterProvider.first;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>traceWidget<sp/>time<sp/>widgets<sp/>and<sp/>retrieve<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time<sp/>for<sp/>all<sp/>the<sp/>providers<sp/>except<sp/>the<sp/>one<sp/>containing<sp/>the<sp/>data<sp/>for<sp/>the<sp/>new<sp/>start<sp/>time.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/>emit<sp/>setStartAndDuration(previousClusterProvider.second,timeFrameWidth);</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>new<sp/>start<sp/>time<sp/>(in<sp/>recording<sp/>unit)<sp/>is<sp/>equals<sp/>to<sp/>the<sp/>current<sp/>one<sp/>do<sp/>not<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>startTimeInRecordingUnits<sp/>==<sp/>previousStartTimeInRecordingUnits){</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT)<sp/>setCursor(selectCursor);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ZOOM)<sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>MEASURE)<sp/>setCursor(measureCursor);</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_TIME)<sp/>setCursor(selectTimeCursor);</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SELECT_EVENT)<sp/>setCursor(selectEventCursor);</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>ADD_EVENT)<sp/>setCursor(addEventCursor);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>DRAW_LINE)<sp/>setCursor(drawLineCursor);</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>new<sp/>start<sp/>time<sp/>is<sp/>superior<sp/>to<sp/>the<sp/>recording<sp/>lenght,<sp/>look<sp/>up<sp/>in<sp/>all<sp/>the<sp/>files<sp/>at<sp/>the<sp/>last<sp/>timeFrameWidth<sp/>of<sp/>the<sp/>data<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ready<sp/>&amp;&amp;<sp/>previousClusterProvider.second<sp/>&gt;<sp/>recordingLength){</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/>clusterProviderToSkip<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth<sp/>=<sp/>endTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/>previousClusterProvider.first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>previousClusterProvider.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>QDictIterator&lt;ClusterData&gt;<sp/>iterator(clustersData);</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;iterator.current();++iterator){</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>selectedIds<sp/>=<sp/>selectedClusters[iterator.currentKey().toInt()];</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/>static_cast&lt;ClustersProvider*&gt;(clusterProviders[iterator.currentKey()])-&gt;requestPreviousClusterData(startTime,timeFrameWidth,selectedIds,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,previousStartTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="4202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTraceView_1e80a78c501f0d18730cfde3d6988254b" kindref="member">TraceView::updateClusters</ref>(QString<sp/>name,QValueList&lt;int&gt;&amp;<sp/>clustersToShow,<ref refid="classItemColors" kindref="compound">ItemColors</ref>*<sp/>clusterColors,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/>providerItemColors.remove(name);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/>providerItemColors.insert(name,clusterColors);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><ref refid="classTraceView_11f56cb8787db3d5a73aa9d426a6d2ecd" kindref="member">showClusters</ref>(name,clustersToShow);</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><ref refid="classTraceView_10bf137a71c4604245dad3c58a2f2a0be" kindref="member">updateClusterData</ref>(active);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/traceview.cpp"/>
  </compounddef>
</doxygen>
