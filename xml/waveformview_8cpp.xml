<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="waveformview_8cpp" kind="file">
    <compoundname>waveformview.cpp</compoundname>
    <includes refid="klustersview_8h" local="yes">klustersview.h</includes>
    <includes refid="klustersdoc_8h" local="yes">klustersdoc.h</includes>
    <includes refid="data_8h" local="yes">data.h</includes>
    <includes refid="itemcolors_8h" local="yes">itemcolors.h</includes>
    <includes refid="waveformview_8h" local="yes">waveformview.h</includes>
    <includes refid="waveformthread_8h" local="yes">waveformthread.h</includes>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">qpaintdevice.h</includes>
    <includes local="no">qpointarray.h</includes>
    <includes local="no">qcursor.h</includes>
    <includes local="no">qpaintdevicemetrics.h</includes>
    <includes local="no">kiconloader.h</includes>
    <incdepgraph>
      <node id="3003">
        <label>qpaintdevicemetrics.h</label>
      </node>
      <node id="2977">
        <label>baseframe.h</label>
        <link refid="baseframe_8h-source"/>
        <childnode refid="2948" relation="include">
        </childnode>
        <childnode refid="2975" relation="include">
        </childnode>
        <childnode refid="2978" relation="include">
        </childnode>
        <childnode refid="2979" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
      </node>
      <node id="2986">
        <label>qtimer.h</label>
      </node>
      <node id="2965">
        <label>qregion.h</label>
      </node>
      <node id="2967">
        <label>qfile.h</label>
      </node>
      <node id="2960">
        <label>pair.h</label>
        <link refid="pair_8h-source"/>
        <childnode refid="2961" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
        <childnode refid="2962" relation="include">
        </childnode>
      </node>
      <node id="2996">
        <label>dataprovider.h</label>
        <link refid="dataprovider_8h-source"/>
        <childnode refid="2988" relation="include">
        </childnode>
        <childnode refid="2970" relation="include">
        </childnode>
      </node>
      <node id="2944">
        <label>klustersview.h</label>
        <link refid="klustersview_8h-source"/>
        <childnode refid="2945" relation="include">
        </childnode>
        <childnode refid="2946" relation="include">
        </childnode>
        <childnode refid="2947" relation="include">
        </childnode>
        <childnode refid="2948" relation="include">
        </childnode>
        <childnode refid="2949" relation="include">
        </childnode>
        <childnode refid="2950" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2982" relation="include">
        </childnode>
      </node>
      <node id="2993">
        <label>qiconview.h</label>
      </node>
      <node id="2953">
        <label>qvaluelist.h</label>
      </node>
      <node id="2974">
        <label>viewwidget.h</label>
        <link refid="viewwidget_8h-source"/>
        <childnode refid="2948" relation="include">
        </childnode>
        <childnode refid="2975" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2947" relation="include">
        </childnode>
        <childnode refid="2977" relation="include">
        </childnode>
      </node>
      <node id="2979">
        <label>zoomwindow.h</label>
        <link refid="zoomwindow_8h-source"/>
        <childnode refid="2980" relation="include">
        </childnode>
        <childnode refid="2981" relation="include">
        </childnode>
        <childnode refid="2972" relation="include">
        </childnode>
      </node>
      <node id="2961">
        <label>qstring.h</label>
      </node>
      <node id="2962">
        <label>stdlib.h</label>
      </node>
      <node id="2988">
        <label>qobject.h</label>
      </node>
      <node id="2997">
        <label>channelcolors.h</label>
        <link refid="channelcolors_8h-source"/>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2952" relation="include">
        </childnode>
        <childnode refid="2953" relation="include">
        </childnode>
      </node>
      <node id="2970">
        <label>kurl.h</label>
      </node>
      <node id="3004">
        <label>kiconloader.h</label>
      </node>
      <node id="2980">
        <label>qrect.h</label>
      </node>
      <node id="2971">
        <label>stdexcept</label>
      </node>
      <node id="2987">
        <label>klustersdoc.h</label>
        <link refid="klustersdoc_8h-source"/>
        <childnode refid="2988" relation="include">
        </childnode>
        <childnode refid="2961" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2981" relation="include">
        </childnode>
        <childnode refid="2989" relation="include">
        </childnode>
        <childnode refid="2970" relation="include">
        </childnode>
        <childnode refid="2946" relation="include">
        </childnode>
        <childnode refid="2950" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2990" relation="include">
        </childnode>
        <childnode refid="2995" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="2998" relation="include">
        </childnode>
      </node>
      <node id="2955">
        <label>array.h</label>
        <link refid="array_8h-source"/>
        <childnode refid="2956" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
      </node>
      <node id="2975">
        <label>qframe.h</label>
      </node>
      <node id="2947">
        <label>kstatusbar.h</label>
      </node>
      <node id="2952">
        <label>qcolor.h</label>
      </node>
      <node id="2951">
        <label>qptrlist.h</label>
      </node>
      <node id="2981">
        <label>qpoint.h</label>
      </node>
      <node id="2999">
        <label>waveformview.h</label>
        <link refid="waveformview_8h-source"/>
        <childnode refid="2975" relation="include">
        </childnode>
        <childnode refid="2983" relation="include">
        </childnode>
        <childnode refid="2984" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2953" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2979" relation="include">
        </childnode>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
      </node>
      <node id="2958">
        <label>sortabletable.h</label>
        <link refid="sortabletable_8h-source"/>
        <childnode refid="2955" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
      </node>
      <node id="2943">
        <label>waveformview.cpp</label>
        <link refid="waveformview.cpp"/>
        <childnode refid="2944" relation="include">
        </childnode>
        <childnode refid="2987" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2950" relation="include">
        </childnode>
        <childnode refid="2999" relation="include">
        </childnode>
        <childnode refid="3000" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
        <childnode refid="2972" relation="include">
        </childnode>
        <childnode refid="2962" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3002" relation="include">
        </childnode>
        <childnode refid="2985" relation="include">
        </childnode>
        <childnode refid="2978" relation="include">
        </childnode>
        <childnode refid="3003" relation="include">
        </childnode>
        <childnode refid="3004" relation="include">
        </childnode>
      </node>
      <node id="2963">
        <label>clusteruserinformation.h</label>
        <link refid="clusteruserinformation_8h-source"/>
      </node>
      <node id="3000">
        <label>waveformthread.h</label>
        <link refid="waveformthread_8h-source"/>
        <childnode refid="2999" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2969" relation="include">
        </childnode>
      </node>
      <node id="2994">
        <label>qtooltip.h</label>
      </node>
      <node id="3002">
        <label>qpaintdevice.h</label>
      </node>
      <node id="2945">
        <label>kprinter.h</label>
      </node>
      <node id="2998">
        <label>clustersprovider.h</label>
        <link refid="clustersprovider_8h-source"/>
        <childnode refid="2996" relation="include">
        </childnode>
        <childnode refid="2955" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2988" relation="include">
        </childnode>
      </node>
      <node id="2995">
        <label>tracesprovider.h</label>
        <link refid="tracesprovider_8h-source"/>
        <childnode refid="2996" relation="include">
        </childnode>
        <childnode refid="2955" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2988" relation="include">
        </childnode>
      </node>
      <node id="2973">
        <label>vector</label>
      </node>
      <node id="2991">
        <label>qvariant.h</label>
      </node>
      <node id="2950">
        <label>itemcolors.h</label>
        <link refid="itemcolors_8h-source"/>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2952" relation="include">
        </childnode>
        <childnode refid="2953" relation="include">
        </childnode>
      </node>
      <node id="2978">
        <label>qcursor.h</label>
      </node>
      <node id="2946">
        <label>kdockwidget.h</label>
      </node>
      <node id="2983">
        <label>qpainter.h</label>
      </node>
      <node id="2972">
        <label>math.h</label>
      </node>
      <node id="2948">
        <label>qwidget.h</label>
      </node>
      <node id="2957">
        <label>iostream</label>
      </node>
      <node id="2949">
        <label>qvaluevector.h</label>
      </node>
      <node id="2969">
        <label>qthread.h</label>
      </node>
      <node id="2989">
        <label>qfileinfo.h</label>
      </node>
      <node id="2990">
        <label>clusterPalette.h</label>
        <link refid="clusterPalette_8h-source"/>
        <childnode refid="2991" relation="include">
        </childnode>
        <childnode refid="2948" relation="include">
        </childnode>
        <childnode refid="2992" relation="include">
        </childnode>
        <childnode refid="2993" relation="include">
        </childnode>
        <childnode refid="2994" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
      </node>
      <node id="2985">
        <label>qpointarray.h</label>
      </node>
      <node id="2964">
        <label>qdict.h</label>
      </node>
      <node id="2982">
        <label>correlationview.h</label>
        <link refid="correlationview_8h-source"/>
        <childnode refid="2979" relation="include">
        </childnode>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2960" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2975" relation="include">
        </childnode>
        <childnode refid="2983" relation="include">
        </childnode>
        <childnode refid="2984" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2985" relation="include">
        </childnode>
        <childnode refid="2986" relation="include">
        </childnode>
        <childnode refid="2953" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
      </node>
      <node id="2966">
        <label>qmap.h</label>
      </node>
      <node id="2984">
        <label>qstyle.h</label>
      </node>
      <node id="2968">
        <label>qmutex.h</label>
      </node>
      <node id="3001">
        <label>stdio.h</label>
      </node>
      <node id="2976">
        <label>qpixmap.h</label>
      </node>
      <node id="2956">
        <label>cstring</label>
      </node>
      <node id="2992">
        <label>qvbox.h</label>
      </node>
      <node id="2954">
        <label>data.h</label>
        <link refid="data_8h-source"/>
        <childnode refid="2955" relation="include">
        </childnode>
        <childnode refid="2958" relation="include">
        </childnode>
        <childnode refid="2960" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
        <childnode refid="2963" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2953" relation="include">
        </childnode>
        <childnode refid="2964" relation="include">
        </childnode>
        <childnode refid="2965" relation="include">
        </childnode>
        <childnode refid="2966" relation="include">
        </childnode>
        <childnode refid="2967" relation="include">
        </childnode>
        <childnode refid="2968" relation="include">
        </childnode>
        <childnode refid="2969" relation="include">
        </childnode>
        <childnode refid="2970" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
        <childnode refid="2971" relation="include">
        </childnode>
        <childnode refid="2972" relation="include">
        </childnode>
        <childnode refid="2973" relation="include">
        </childnode>
      </node>
      <node id="2959">
        <label>types.h</label>
        <link refid="types_8h-source"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformview.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Fri<sp/>Sep<sp/>26<sp/>2003</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2003<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan@myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/></highlight><highlight class="comment">//include<sp/>files<sp/>for<sp/>the<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;klustersview.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;klustersdoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;data.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;itemcolors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;waveformview.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;waveformthread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//General<sp/>C,C++<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>files<sp/>for<sp/>Qt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qpaintdevice.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qpointarray.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qcursor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qpaintdevicemetrics.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>files<sp/>for<sp/>kde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kiconloader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WaveformView::XMARGIN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WaveformView::YMARGIN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classWaveformView_18eb441f96c3d47007166f645f1c08e17" kindref="member">WaveformView::WaveformView</ref>(<ref refid="classKlustersDoc" kindref="compound">KlustersDoc</ref>&amp;<sp/>doc,<ref refid="classKlustersView" kindref="compound">KlustersView</ref>&amp;<sp/>view,QColor<sp/>backgroundColor,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acquisitionGain,QValueList&lt;int&gt;<sp/>positions,KStatusBar<sp/>*<sp/>statusBar,QWidget*<sp/>parent,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTimeFrameMode,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeFrameWidth,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nbSpkToDisplay,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overLay,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mean,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowTopLeft<sp/>,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBottomRight,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>border)<sp/>:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classViewWidget" kindref="compound">ViewWidget</ref>(doc,view,backgroundColor,statusBar,parent,name,minSize,maxSize,windowTopLeft,windowBottomRight,border,XMARGIN,YMARGIN)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,meanPresentation(mean),overLayPresentation(overLay),acquisitionGain(acquisitionGain),dataReady(true),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpkToDisplay(nbSpkToDisplay),isZoomed(false),goingToDie(false){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>default<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>mode<sp/>=<sp/>ZOOM;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isTimeFrameMode)presentationMode<sp/>=<sp/>TIME_FRAME;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>presentationMode<sp/>=<sp/>SAMPLE;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>drawing<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData<sp/>=<sp/>doc.<ref refid="classKlustersDoc_196ee8dbf3a50f580d76f024c281f7a45" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>nbSamplesInWaveform<sp/>=<sp/>clusteringData.<ref refid="classData_13a75982a8900c5a5338a46310f9001ce" kindref="member">nbOfSampleInWaveform</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>peakPositionInWaveform<sp/>=<sp/>clusteringData.<ref refid="classData_142b66cc687a130a0f9d1ba8a45d3c945" kindref="member">positionOfPeakInWaveform</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>nbchannels<sp/>=<sp/>clusteringData.<ref refid="classData_15208b27b1ab14d425dbd501fc663d61e" kindref="member">nbOfchannels</ref>();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>widthBorder<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>heightBorder<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>Xstep<sp/>=<sp/>10;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>Xspace<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>shift<sp/>=<sp/>(nbSamplesInWaveform<sp/>-<sp/>1)<sp/>*<sp/>Xstep<sp/>+<sp/>Xspace;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>Yspace<sp/>=<sp/>40;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>YsizeForMaxAmp<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>Yfactor<sp/>=<sp/>static_cast&lt;float&gt;(YsizeForMaxAmp)/static_cast&lt;float&gt;(acquisitionGain);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>gain<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>channelPositions<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[nbchannels];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>first<sp/>one<sp/>in<sp/>the<sp/>file<sp/>will<sp/>be<sp/>the<sp/>first<sp/>one<sp/>(at<sp/>the<sp/>top),<sp/>second<sp/>one<sp/>will<sp/>be<sp/>beneath<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>channels<sp/>are<sp/>counted<sp/>from<sp/>0<sp/>to<sp/>nbchannels<sp/>-<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(positions.isEmpty()){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbchannels;<sp/>++i)<sp/>channelPositions[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbchannels;<sp/>++i)<sp/>channelPositions[i]<sp/>=<sp/>positions[i];<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ordinateMin<sp/>=<sp/>-(2<sp/>*<sp/>heightBorder<sp/>+<sp/>nbchannels<sp/>*<sp/>YsizeForMaxAmp<sp/>+<sp/>(nbchannels<sp/>-<sp/>1)<sp/>*<sp/>Yspace);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>ordinateMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>abscissaMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>X0<sp/>=<sp/>widthBorder;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>Y0<sp/>=<sp/>nbchannels<sp/>*<sp/>YsizeForMaxAmp<sp/>+<sp/>(nbchannels<sp/>-<sp/>1)<sp/>*<sp/>Yspace<sp/>+<sp/>heightBorder<sp/>-<sp/>(YsizeForMaxAmp/2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>isTwoBytesRecording<sp/>=<sp/>clusteringData.<ref refid="classData_1a86d616bbc5224a495b75c66d88ed6ff" kindref="member">isRecordingTwoBytes</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>startTime<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>endTime<sp/>=<sp/>start<sp/>+<sp/>timeFrameWidth;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>maximumTime<sp/>=<sp/>clusteringData.<ref refid="classData_153b086f2ea2fc3d290efd20312b96a9b" kindref="member">maxTime</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>list<sp/>owns<sp/>its<sp/>objects,<sp/>it<sp/>will<sp/>delete<sp/>the<sp/>items<sp/>that<sp/>are<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>threadsToBeKill.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>treads<sp/>will<sp/>be<sp/>delete<sp/>only<sp/>from<sp/><sp/>threadsToBeKill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>updateWindow();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>cursor<sp/>shap<sp/>to<sp/>a<sp/>magnifier<sp/>as<sp/>the<sp/>only<sp/>action<sp/>allowed<sp/>on<sp/>the<sp/>widget<sp/>is<sp/>to<sp/>zoom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>setCursor(zoomCursor);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">WaveformView::~WaveformView(){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]channelPositions;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Ask<sp/>the<sp/>threads<sp/>to<sp/>stop<sp/>as<sp/>soon<sp/>as<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="classWaveformView_1cad6888fcdbfe2d613b1db7f7af56307" kindref="member">willBeKilled</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>until<sp/>all<sp/>the<sp/>threads<sp/>have<sp/>finish<sp/>before<sp/>quiting<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>may<sp/>endup<sp/>in<sp/>a<sp/>crash<sp/>of<sp/>the<sp/>application.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>threadsToBeKill.first();<sp/>waveformThread;<sp/>waveformThread<sp/>=<sp/>threadsToBeKill.next())</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!waveformThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>WaveformView::getWaveforms(){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="classViewWidget_1b8bdf22293e76d9a143fb84488d52fc4" kindref="member">doc</ref>.<ref refid="classKlustersDoc_196ee8dbf3a50f580d76f024c281f7a45" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_147ef80336653077fd80c8c29e2870bbc" kindref="member">WaveformView::isThreadsRunning</ref>(){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(threadsToBeKill.count()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1d458ee0391b5f3963ce273002d018e89" kindref="member">WaveformView::singleColorUpdate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>the<sp/>cluster<sp/>id<sp/>to<sp/>the<sp/>clusterUpdateList,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>will<sp/>be<sp/>updated<sp/>during<sp/>the<sp/>next<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><ref refid="classViewWidget_1bccba002ff28008b32f8082553f6fca8" kindref="member">clusterUpdateList</ref>.append(clusterId);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>UPDATE;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classViewWidget_1bccba002ff28008b32f8082553f6fca8" kindref="member">clusterUpdateList</ref>.append(clusterId);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformView::askForWaveformInformation(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>the<sp/>widget<sp/>is<sp/>not<sp/>about<sp/>to<sp/>be<sp/>deleted,<sp/>request<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!goingToDie){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>thread<sp/>to<sp/>get<sp/>the<sp/>waveform<sp/>data<sp/>for<sp/>that<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>getWaveforms();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>threadsToBeKill.append(waveformThread);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>waveformThread-&gt;<ref refid="classWaveformThread_164bd1145918c25f5866a3ddc88f189d6" kindref="member">getWaveformInformation</ref>(clusterId,presentationMode);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformView::askForWaveformInformation(QValueList&lt;int&gt;<sp/>clusterIds){<sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>the<sp/>widget<sp/>is<sp/>not<sp/>about<sp/>to<sp/>be<sp/>deleted,<sp/>request<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!goingToDie){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>thread<sp/>to<sp/>get<sp/>the<sp/>waveform<sp/>data<sp/>for<sp/>that<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>getWaveforms();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>threadsToBeKill.append(waveformThread);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>waveformThread-&gt;<ref refid="classWaveformThread_164bd1145918c25f5866a3ddc88f189d6" kindref="member">getWaveformInformation</ref>(clusterIds,presentationMode);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1b2178befa4ebaa4bad4a8485ca061c81" kindref="member">WaveformView::addClusterToView</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active<sp/>&amp;&amp;<sp/>overLayPresentation){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH){</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><ref refid="classViewWidget_1bccba002ff28008b32f8082553f6fca8" kindref="member">clusterUpdateList</ref>.append(clusterId);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>UPDATE;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classViewWidget_1bccba002ff28008b32f8082553f6fca8" kindref="member">clusterUpdateList</ref>.append(clusterId);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>thread<sp/>to<sp/>get<sp/>the<sp/>waveform<sp/>data<sp/>for<sp/>that<sp/>cluster<sp/>specifying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//triggering<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>askForWaveformInformation(clusterId);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected,<sp/>if<sp/>need<sp/>it,<sp/>for<sp/>all<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active<sp/>&amp;&amp;<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1950d13da5d849f790ffbe12e1edbebad" kindref="member">WaveformView::removeClusterFromView</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected,<sp/>if<sp/>need<sp/>it,<sp/>for<sp/>all<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active<sp/>&amp;&amp;<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1692ee48dd0b0c618df287c4946397ea6" kindref="member">WaveformView::addNewClusterToView</ref>(QValueList&lt;int&gt;&amp;<sp/>fromClusters,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected,<sp/>if<sp/>need<sp/>it,<sp/>for<sp/>all<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active<sp/>&amp;&amp;<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1a532692a9e1ca9fb770fed7c23debe38" kindref="member">WaveformView::spikesRemovedFromClusters</ref>(QValueList&lt;int&gt;&amp;<sp/>fromClusters,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){<sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected,<sp/>if<sp/>need<sp/>it,<sp/>for<sp/>all<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active<sp/>&amp;&amp;<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1cb7017405c897a3e6619ca2f5a77eebb" kindref="member">WaveformView::spikesAddedToCluster</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){<sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>drawContentsMode<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected,<sp/>if<sp/>need<sp/>it,<sp/>for<sp/>all<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active<sp/>&amp;&amp;<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1513e23710228dadcdf2974cfcb48fb60" kindref="member">WaveformView::customEvent</ref>(QCustomEvent*<sp/>event){<sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/></highlight><highlight class="comment">//Event<sp/>sent<sp/>by<sp/>a<sp/>WaveformThread<sp/>to<sp/>inform<sp/>that<sp/>the<sp/>data<sp/>are<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;type()<sp/>==<sp/>QEvent::User<sp/>+<sp/>200){<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread_1_1GetWaveformsEvent" kindref="compound">WaveformThread::GetWaveformsEvent</ref>*<sp/>waveformsEvent<sp/>=<sp/>(<ref refid="classWaveformThread_1_1GetWaveformsEvent" kindref="compound">WaveformThread::GetWaveformsEvent</ref>*)<sp/>event;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>event<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>waveformsEvent-&gt;parentThread();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>meanRequested<sp/>=<sp/>waveformThread-&gt;<ref refid="classWaveformThread_1db3d88a8fba1af0aa46be83bf86a724f" kindref="member">isMeanRequested</ref>();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>to<sp/>be<sp/>sure<sp/>the<sp/>thread<sp/>has<sp/>return<sp/>from<sp/>his<sp/>run<sp/>method.<sp/>Even<sp/>if<sp/>the<sp/>send<sp/>of<sp/>the<sp/>event<sp/>is<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//action<sp/>of<sp/>the<sp/>run<sp/>method<sp/>it<sp/>seems<sp/>that<sp/>the<sp/>event<sp/>loop<sp/>can<sp/>be<sp/>pretty<sp/>fast<sp/>and<sp/>the<sp/>run<sp/>has<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>when<sp/>the<sp/>event<sp/>is<sp/>received<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!waveformThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Only<sp/>one<sp/>cluster<sp/>was<sp/>concern<sp/>by<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformThread-&gt;<ref refid="classWaveformThread_16038b0759da2bb6f7509bc3c3e65369c" kindref="member">isSingleTriggeringCluster</ref>()){</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>data<sp/>have<sp/>be<sp/>retrieved<sp/>and<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation<sp/>calculated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>||<sp/>(!meanPresentation<sp/>&amp;&amp;<sp/>meanRequested)){</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>the<sp/>waveformThread,<sp/>this<sp/>is<sp/>done<sp/>by<sp/>removing<sp/>it<sp/>from<sp/>threadsToBeKill<sp/>as<sp/>auto-deletion<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>threadsToBeKill.remove(waveformThread);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>&amp;&amp;<sp/>!goingToDie){</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Each<sp/>time<sp/>a<sp/>cluster<sp/>is<sp/>added<sp/>to<sp/>the<sp/>view<sp/>or<sp/>modified,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>window<sp/>is<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isZoomed)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setCursor(zoomCursor);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>widget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>data<sp/>have<sp/>be<sp/>retrieved<sp/>but<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation<sp/>have<sp/>not<sp/>be<sp/>calculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!meanPresentation<sp/>&amp;&amp;<sp/>!meanRequested){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>widget<sp/>is<sp/>not<sp/>about<sp/>to<sp/>be<sp/>deleted,<sp/>launch<sp/>as<sp/>thread<sp/>to<sp/>do<sp/>calculate<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//And<sp/>draw<sp/>the<sp/>waveforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculating<sp/>it<sp/>now<sp/>will<sp/>speed<sp/>up<sp/>the<sp/>next<sp/>call<sp/>to<sp/>a<sp/>mean<sp/>presentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!goingToDie){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformThread-&gt;<ref refid="classWaveformThread_1cd99c883f36b3482255647e5e73b8d61" kindref="member">getMean</ref>(presentationMode);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Each<sp/>time<sp/>a<sp/>cluster<sp/>is<sp/>added<sp/>to<sp/>the<sp/>view<sp/>or<sp/>modified,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>window<sp/>is<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isZoomed)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setCursor(zoomCursor);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>widget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>update();<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>the<sp/>waveformThread,<sp/>this<sp/>is<sp/>done<sp/>by<sp/>removing<sp/>it<sp/>from<sp/>threadsToBeKill<sp/>as<sp/>auto-deletion<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>threadsToBeKill.remove(waveformThread);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Several<sp/>clusters<sp/>were<sp/>concern<sp/>by<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>data<sp/>have<sp/>be<sp/>retrieved<sp/>and<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation<sp/>calculated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>||<sp/>(!meanPresentation<sp/>&amp;&amp;<sp/>meanRequested)){</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(threadsToDisregard.contains(waveformThread))<sp/>threadsToDisregard.remove(waveformThread);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>the<sp/>waveformThread,<sp/>this<sp/>is<sp/>done<sp/>by<sp/>removing<sp/>it<sp/>from<sp/>threadsToBeKill<sp/>as<sp/>auto-deletion<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>threadsToBeKill.remove(waveformThread);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setCursor(zoomCursor);<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>&amp;&amp;<sp/>!goingToDie){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Each<sp/>time<sp/>a<sp/>cluster<sp/>is<sp/>added<sp/>to<sp/>the<sp/>view<sp/>or<sp/>modified,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>window<sp/>is<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isZoomed)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setCursor(zoomCursor);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>widget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>data<sp/>have<sp/>be<sp/>retrieved<sp/>but<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation<sp/>have<sp/>not<sp/>be<sp/>calculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!meanPresentation<sp/>&amp;&amp;<sp/>!meanRequested){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!goingToDie){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformThread-&gt;<ref refid="classWaveformThread_1cd99c883f36b3482255647e5e73b8d61" kindref="member">getMean</ref>(presentationMode);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Each<sp/>time<sp/>a<sp/>cluster<sp/>is<sp/>added<sp/>to<sp/>the<sp/>view<sp/>or<sp/>modified,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>window<sp/>is<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isZoomed)<sp/>updateWindow();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setCursor(zoomCursor);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>widget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>update();<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>threadsToBeKill.remove(waveformThread);<sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/></highlight><highlight class="comment">//Event<sp/>sent<sp/>by<sp/>a<sp/>WaveformThread<sp/>to<sp/>inform<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available<sp/>for<sp/>the<sp/>cluster<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/></highlight><highlight class="comment">//Disregard<sp/>the<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(event-&gt;type()<sp/>==<sp/>QEvent::User<sp/>+<sp/>250){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread_1_1NoWaveformDataEvent" kindref="compound">WaveformThread::NoWaveformDataEvent</ref>*<sp/>waveformsEvent<sp/>=<sp/>(<ref refid="classWaveformThread_1_1NoWaveformDataEvent" kindref="compound">WaveformThread::NoWaveformDataEvent</ref>*)<sp/>event;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>parent<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>waveformsEvent-&gt;parentThread();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>to<sp/>be<sp/>sure<sp/>the<sp/>thread<sp/>has<sp/>return<sp/>from<sp/>his<sp/>run<sp/>method.<sp/>Even<sp/>if<sp/>the<sp/>send<sp/>of<sp/>the<sp/>event<sp/>is<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//action<sp/>of<sp/>the<sp/>run<sp/>method<sp/>it<sp/>seems<sp/>that<sp/>the<sp/>event<sp/>loop<sp/>can<sp/>be<sp/>pretty<sp/>fast<sp/>and<sp/>the<sp/>run<sp/>has<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>when<sp/>the<sp/>event<sp/>is<sp/>received<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!waveformThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(threadsToDisregard.contains(waveformThread))threadsToDisregard.remove(waveformThread);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>the<sp/>waveformThread,<sp/>this<sp/>is<sp/>done<sp/>by<sp/>removing<sp/>it<sp/>from<sp/>threadsToBeKill<sp/>as<sp/>auto-deletion<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>threadsToBeKill.remove(waveformThread);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//setCursor(zoomCursor);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_12bffb346795b06cdc236c01697e6ff3c" kindref="member">WaveformView::drawContents</ref>(QPainter<sp/>*p){</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE<sp/>||<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REDRAW)<sp/>&amp;&amp;<sp/>dataReady){</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>QRect<sp/>contentsRec<sp/>=<sp/>contentsRect();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>viewport<sp/>=<sp/>QRect(contentsRec.left(),contentsRec.top(),contentsRec.width(),contentsRec.height()<sp/>-<sp/>10);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Resize<sp/>the<sp/>double<sp/>buffer<sp/>with<sp/>the<sp/>width<sp/>and<sp/>the<sp/>height<sp/>of<sp/>the<sp/>widget(QFrame)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><ref refid="classViewWidget_1091c72490041f8e45689b1dc4d693d5e" kindref="member">doublebuffer</ref>.resize(contentsRec.width(),contentsRec.height());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>painter<sp/>to<sp/>paint<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>QPainter<sp/>painter;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>painter.begin(&amp;<ref refid="classViewWidget_1091c72490041f8e45689b1dc4d693d5e" kindref="member">doublebuffer</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)<ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>painter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>viewport<sp/>(part<sp/>of<sp/>the<sp/>device<sp/>I<sp/>want<sp/>to<sp/>write<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//By<sp/>default,<sp/>the<sp/>viewport<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>device&apos;s<sp/>rectangle<sp/>(contentsRec),<sp/>taking<sp/>a<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//one<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>legends<sp/>(cluster<sp/>ids)<sp/>will<sp/>not<sp/>ovelap<sp/>to<sp/>much<sp/>a<sp/>waveform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>painter.setViewport(viewport);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REDRAW){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>double<sp/>buffer<sp/>with<sp/>the<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><ref refid="classViewWidget_1091c72490041f8e45689b1dc4d693d5e" kindref="member">doublebuffer</ref>.fill(backgroundColor());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Paint<sp/>all<sp/>the<sp/>waveforms<sp/>in<sp/>the<sp/>shownclusters<sp/>list<sp/>(in<sp/>the<sp/>double<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/>drawWaveforms(painter,<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>update<sp/>mode<sp/>applies<sp/>only<sp/>when<sp/>the<sp/>color<sp/>of<sp/>a<sp/>cluster<sp/>has<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE){</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Paint<sp/>the<sp/>waveforms<sp/>for<sp/>the<sp/>clusters<sp/>contained<sp/>in<sp/>clusterUpdateList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>drawWaveforms(painter,<ref refid="classViewWidget_1bccba002ff28008b32f8082553f6fca8" kindref="member">clusterUpdateList</ref>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>clusterUpdateList<sp/>list<sp/>for<sp/>the<sp/>next<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><ref refid="classViewWidget_1bccba002ff28008b32f8082553f6fca8" kindref="member">clusterUpdateList</ref>.clear();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reset<sp/>transformation<sp/>due<sp/>to<sp/>setWindow<sp/>and<sp/>setViewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>painter.resetXForm()<sp/>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>cluster<sp/>Ids<sp/>below<sp/>the<sp/>waveforms<sp/>if<sp/>they<sp/>are<sp/>not<sp/>in<sp/>overlay<sp/>presentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!overLayPresentation)<sp/>drawClusterIds(painter);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Closes<sp/>the<sp/>painter<sp/>on<sp/>the<sp/>double<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Back<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REFRESH;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>drawContentsMode<sp/>==<sp/>REFRESH,<sp/>we<sp/>reuse<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)<sp/>by<sp/>copying<sp/>it<sp/>into<sp/>the<sp/>widget<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/>p-&gt;drawPixmap(0,<sp/>0,<sp/><ref refid="classViewWidget_1091c72490041f8e45689b1dc4d693d5e" kindref="member">doublebuffer</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/>setCursor(<ref refid="classBaseFrame_1a6054da9012b308d2c041ec63df5b5cd" kindref="member">zoomCursor</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformView::drawWaveforms(QPainter&amp;<sp/>painter,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList&lt;int&gt;&amp;<sp/>clusterList){</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//the<sp/>clusters<sp/>will<sp/>be<sp/>presented<sp/>by<sp/>increasing<sp/>ids,<sp/>to<sp/>do<sp/>so<sp/>the<sp/>lists<sp/>have<sp/>to<sp/>be<sp/>sorted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>shownClusters;<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>clusters<sp/>=<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusters.begin();<sp/>iterator<sp/>!=<sp/>clusters.end();<sp/>++iterator)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/>shownClusters.append(*iterator);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>qHeapSort(shownClusters);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>clusterListSorted;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterList.begin();<sp/>iterator<sp/>!=<sp/>clusterList.end();<sp/>++iterator)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>clusterListSorted.append(*iterator);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>qHeapSort(clusterListSorted);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>the<sp/>clusters<sp/>to<sp/>be<sp/>drawn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::const_iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>&amp;<sp/>clusterColors<sp/>=<sp/><ref refid="classViewWidget_1b8bdf22293e76d9a143fb84488d52fc4" kindref="member">doc</ref>.<ref refid="classKlustersDoc_16cae6993a1d1aadb8d9350095c83d580" kindref="member">clusterColors</ref>();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData<sp/>=<sp/><ref refid="classViewWidget_1b8bdf22293e76d9a143fb84488d52fc4" kindref="member">doc</ref>.<ref refid="classKlustersDoc_196ee8dbf3a50f580d76f024c281f7a45" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>it<sp/>is<sp/>an<sp/>update<sp/>that<sp/>means<sp/>that<sp/>there<sp/>some<sp/>clusters<sp/>to<sp/>redraw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>presentation<sp/>is<sp/>side<sp/>by<sp/>side<sp/>and<sp/>the<sp/>position<sp/>of<sp/>those<sp/>clusters<sp/>in<sp/>the<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//has<sp/>to<sp/>been<sp/>find<sp/>in<sp/>order<sp/>to<sp/>redraw<sp/>them<sp/>at<sp/>the<sp/>correct<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specificPosition<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>UPDATE<sp/>&amp;&amp;<sp/>!overLayPresentation)specificPosition<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>ordinate<sp/>of<sp/>the<sp/>system<sp/>coordinate<sp/>center<sp/>for<sp/>the<sp/>current<sp/>channel<sp/>of<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Y;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterShift;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overLayPresentation)<sp/>clusterShift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>clusterShift<sp/>=<sp/>shift;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusterListSorted.begin();<sp/>clusterIterator<sp/>!=<sp/>clusterListSorted.end();<sp/>++clusterIterator){<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(specificPosition){</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>shownClusters.findIndex(*clusterIterator);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>X0<sp/>+<sp/>index<sp/>*<sp/>shift;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>color<sp/>associated<sp/>with<sp/>the<sp/>cluster<sp/>and<sp/>set<sp/>the<sp/>color<sp/>to<sp/>use<sp/>to<sp/>this<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QPen<sp/>pen(clusterColors.<ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">color</ref>(*clusterIterator));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>iterator<sp/>on<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classData_1_1WaveformIterator" kindref="compound">Data::WaveformIterator</ref>*<sp/>waveformIterator;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(presentationMode<sp/>==<sp/>SAMPLE)<sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_1cfcd133c11391b4e66102fff646a9784" kindref="member">sampleWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),nbSpkToDisplay);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_160e8f9e603623eef642ef5279b7d1d6b" kindref="member">timeFrameWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),startTime,endTime);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>over<sp/>the<sp/>waveforms<sp/>of<sp/>the<sp/>cluster<sp/>and<sp/>draw<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation){</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_1904126344aa4080298a4d3feeb596219" kindref="member">isMeanAvailable</ref>())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>mean;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>max;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>min;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamplesInWaveform;<sp/>++i){</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbchannels;<sp/>++j){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>Y0<sp/>-<sp/>channelPositions[j]<sp/>*<sp/>(YsizeForMaxAmp<sp/>+<sp/>Yspace);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>meanValue<sp/>=<sp/>waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_10268ea19c4407afab87b0bb834ddacb6" kindref="member">nextMeanValue</ref>();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>point<sp/>is<sp/>drawn<sp/>in<sp/>the<sp/>QT<sp/>coordinate<sp/>system<sp/>where<sp/>the<sp/>Y<sp/>axis<sp/>in<sp/>oriented<sp/>downwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>value<sp/>receive<sp/>from<sp/>the<sp/>iterator<sp/>is<sp/>already<sp/>inverted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean.putPoints((j*nbSamplesInWaveform)<sp/>+<sp/>i,<sp/>1,<sp/>X<sp/>+<sp/>x,-Y<sp/>+<sp/>static_cast&lt;long&gt;(meanValue<sp/>*<sp/>Yfactor));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stDeviation<sp/>=<sp/>waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_14c777259903b3c999c4af9c83357955a" kindref="member">nextStDeviationValue</ref>();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min.putPoints((j*nbSamplesInWaveform)<sp/>+<sp/>i,<sp/>1,<sp/>X<sp/>+<sp/>x,-Y<sp/>+<sp/>static_cast&lt;long&gt;((meanValue<sp/>-<sp/>stDeviation)<sp/>*<sp/>Yfactor));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max.putPoints((j*nbSamplesInWaveform)<sp/>+<sp/>i,<sp/>1,<sp/>X<sp/>+<sp/>x,-Y<sp/>+<sp/>static_cast&lt;long&gt;((meanValue<sp/>+<sp/>stDeviation)<sp/>*<sp/>Yfactor));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;k<sp/>&lt;<sp/>nbchannels;++k){</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>mean<sp/>with<sp/>a<sp/>solid<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setStyle(Qt::SolidLine);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(mean,k<sp/>*<sp/>nbSamplesInWaveform,nbSamplesInWaveform);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>2<sp/>standard<sp/>deviations<sp/>with<sp/>a<sp/>dash<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pen.setStyle(Qt::DotLine);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.setPen(pen);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(min,k<sp/>*<sp/>nbSamplesInWaveform,nbSamplesInWaveform);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(max,k<sp/>*<sp/>nbSamplesInWaveform,nbSamplesInWaveform);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>all<sp/>the<sp/>selected<sp/>waveforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>are<sp/>store<sp/>as<sp/>follow:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//spike<sp/>after<sp/>spike<sp/>and<sp/>for<sp/>each<sp/>spike<sp/>sample<sp/>after<sp/>sample<sp/>and<sp/>for<sp/>each<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//channel<sp/>after<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_102418425ef12a2a0a21a2b34ba9c486a" kindref="member">areSpikesAvailable</ref>())</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nbOfSpikes<sp/>=<sp/>waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_102bf0fded8b55ec2df65870e00e5d604" kindref="member">nbOfSpikes</ref>();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbOfSpikes;<sp/>++i){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QPointArray<sp/>spike(nbchannels<sp/>*<sp/>nbSamplesInWaveform);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbSamplesInWaveform;<sp/>++i){</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbchannels;<sp/>++j){</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>Y0<sp/>-<sp/>channelPositions[j]<sp/>*<sp/>(YsizeForMaxAmp<sp/>+<sp/>Yspace);<sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>point<sp/>is<sp/>drawn<sp/>in<sp/>the<sp/>QT<sp/>coordinate<sp/>system<sp/>where<sp/>the<sp/>Y<sp/>axis<sp/>in<sp/>oriented<sp/>downwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>value<sp/>receive<sp/>from<sp/>the<sp/>iterator<sp/>is<sp/>already<sp/>inverted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spike.setPoint((j*nbSamplesInWaveform)<sp/>+<sp/>i,<sp/>X<sp/>+<sp/>x,-Y<sp/>+<sp/>static_cast&lt;long&gt;(waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_1ab21dddf3ac8580e23dc97a4210a10a4" kindref="member">nextSpike</ref>()<sp/>*<sp/>Yfactor));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>Xstep;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;k<sp/>&lt;<sp/>nbchannels;++k){</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawPolyline(spike,k<sp/>*<sp/>nbSamplesInWaveform,nbSamplesInWaveform);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>the<sp/>waveform<sp/>iterator<sp/>received<sp/>for<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>waveformIterator;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reinitialize<sp/>the<sp/>Y,the<sp/>starting<sp/>ordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>Y0<sp/>-<sp/>channelPositions[0]<sp/>*<sp/>(YsizeForMaxAmp<sp/>+<sp/>Yspace);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Shift<sp/>X<sp/>to<sp/>the<sp/>starting<sp/>abscissa<sp/>of<sp/>the<sp/>next<sp/>cluster<sp/>if<sp/>there<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>find<sp/>the<sp/>specific<sp/>position<sp/>of<sp/>the<sp/>next<sp/>cluster<sp/>(case<sp/>treated<sp/>at<sp/>the<sp/>beging<sp/>of<sp/>the<sp/>loop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!specificPosition)X<sp/>+=<sp/>clusterShift;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformView::updateWindow(){<sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbOfClusters<sp/>=<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>window<sp/>if<sp/>the<sp/>clusters<sp/>are<sp/>side<sp/>by<sp/>side<sp/>or<sp/>any<sp/>case<sp/>if<sp/>there<sp/>is<sp/>only<sp/>one<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!overLayPresentation){</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>abscissaMax<sp/>=<sp/>2<sp/>*<sp/>widthBorder<sp/>+<sp/>nbOfClusters<sp/>*<sp/>(nbSamplesInWaveform<sp/>-1)<sp/>*<sp/>Xstep<sp/>+<sp/>(nbOfClusters<sp/>-<sp/>1)<sp/>*<sp/>Xspace;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref><sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(QRect(QPoint(abscissaMin,ordinateMin),QPoint(abscissaMax,ordinateMax)));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW<sp/>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>abscissaMax<sp/>=<sp/>2<sp/>*<sp/>widthBorder<sp/>+<sp/>(nbSamplesInWaveform<sp/>-1)<sp/>*<sp/>Xstep;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_15b9fe7f64b7737c193c4427a5ab8c271" kindref="member">window</ref><sp/>=<sp/><ref refid="classZoomWindow" kindref="compound">ZoomWindow</ref>(QRect(QPoint(abscissaMin,ordinateMin),QPoint(abscissaMax,ordinateMax)));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>drawing<sp/>mode<sp/>if<sp/>needed<sp/>(if<sp/>UPDATE,<sp/>no<sp/>change<sp/>is<sp/>need<sp/>it).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REFRESH)<ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW<sp/>;<sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1657c429d63f1e45b76ed32f38070b36f" kindref="member">WaveformView::setMeanPresentation</ref>(){</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/>meanPresentation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;<sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/>dataReady<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){<sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>thread<sp/>to<sp/>get<sp/>the<sp/>waveform<sp/>data<sp/>for<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>getWaveforms();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>threadsToBeKill.append(waveformThread);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>waveformThread-&gt;<ref refid="classWaveformThread_1cd99c883f36b3482255647e5e73b8d61" kindref="member">getMean</ref>(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>(),presentationMode);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1a7b3bdbbe954b870072ec84346634dbc" kindref="member">WaveformView::setAllWaveformsPresentation</ref>(){</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>meanPresentation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_142b5bcc2580f2bb9fcd1a8b233a920fa" kindref="member">WaveformView::setSampleMode</ref>(){</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>presentationMode<sp/>=<sp/>SAMPLE;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_112d58947f8ab2a17ac0c1e60b9dbd5e7" kindref="member">WaveformView::setTimeFrameMode</ref>(){</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>presentationMode<sp/>=<sp/>TIME_FRAME;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_137e86070421d04bf63d6dad18d911f96" kindref="member">WaveformView::setTimeFrame</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>width){</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/>startTime<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/>endTime<sp/>=<sp/>start<sp/>+<sp/>width;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endTime<sp/>&gt;<sp/>maximumTime)<sp/>endTime<sp/>=<sp/>maximumTime;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1441631df05b5cf8befc8fc7eb401b586" kindref="member">WaveformView::setDisplayNbSpikes</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nbSpikes){</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>nbSpkToDisplay<sp/>=<sp/><sp/>nbSpikes;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaveformView::drawClusterIds(QPainter&amp;<sp/>painter){</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/>shownClusters;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/>QValueList&lt;int&gt;::const_iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/>QValueList&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>clusters<sp/>=<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusters.begin();<sp/>iterator<sp/>!=<sp/>clusters.end();<sp/>++iterator)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>shownClusters.append(*iterator);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/>qHeapSort(shownClusters);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/>QFont<sp/>f(</highlight><highlight class="stringliteral">&quot;Helvetica&quot;</highlight><highlight class="normal">,8);<sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/>painter.setFont(f);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/>painter.setPen(<ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref>);<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>color<sp/>for<sp/>the<sp/>legends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>absciss<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>abscissa<sp/>of<sp/>the<sp/>legend<sp/>for<sp/>the<sp/>current<sp/>waveform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/>uint<sp/>X<sp/>=<sp/>widthBorder;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>ordinate<sp/>of<sp/>the<sp/>legend<sp/>for<sp/>the<sp/>current<sp/>waveform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/>uint<sp/>Y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>shownClusters.begin();<sp/>iterator<sp/>!=<sp/>shownClusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//the<sp/>abscissa<sp/>is<sp/>increase<sp/>by<sp/>the<sp/>font<sp/>size<sp/>to<sp/>adjust<sp/>for<sp/>conversion<sp/>from<sp/>world<sp/>coordinates<sp/>to<sp/>viewport<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>painter.drawText(<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(X,-Y).x()<sp/>+<sp/>8,<ref refid="classBaseFrame_12b50027b15770de7f37b59917152c69b" kindref="member">worldToViewport</ref>(X,-Y).y()<sp/>+<sp/>8,QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>X<sp/>+=<sp/>shift;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1adc33eefc8bc1028c50fad78fff32b70" kindref="member">WaveformView::updateDrawing</ref>(){</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redrawn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>==<sp/>REDRAW){</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1ac95f93e9771eb65588127af48b0a546" kindref="member">WaveformView::clustersRenumbered</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active){</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redrawn.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>widget<sp/>is<sp/>in<sp/>the<sp/>active<sp/>view,<sp/>it<sp/>is<sp/>done<sp/>immediately<sp/>otherswise<sp/>it<sp/>will<sp/>be<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/></highlight><highlight class="comment">//when<sp/>the<sp/>view<sp/>willbecome<sp/>active<sp/>(updateDrawing<sp/>will<sp/>be<sp/>called).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>active){</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_192564b468eca5af50d1f2347d9be2108" kindref="member">WaveformView::mouseDoubleClickEvent</ref><sp/>(QMouseEvent<sp/>*e){</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/></highlight><highlight class="comment">//Trigger<sp/>parent<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><ref refid="classBaseFrame_161ed8b87d4046aa64b74855f200b4e1b" kindref="member">ViewWidget::mouseDoubleClickEvent</ref>(e);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0)){</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData<sp/>=<sp/><ref refid="classViewWidget_1b8bdf22293e76d9a143fb84488d52fc4" kindref="member">doc</ref>.<ref refid="classKlustersDoc_196ee8dbf3a50f580d76f024c281f7a45" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::const_iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>clusters<sp/>=<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusters.begin();<sp/>clusterIterator<sp/>!=<sp/>clusters.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><ref refid="classData_1_1WaveformIterator" kindref="compound">Data::WaveformIterator</ref>*<sp/>waveformIterator;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(presentationMode<sp/>==<sp/>SAMPLE)<sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_1cfcd133c11391b4e66102fff646a9784" kindref="member">sampleWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),nbSpkToDisplay);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_160e8f9e603623eef642ef5279b7d1d6b" kindref="member">timeFrameWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),startTime,endTime);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>&amp;&amp;<sp/>(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_1904126344aa4080298a4d3feeb596219" kindref="member">isMeanAvailable</ref>()))<sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_102418425ef12a2a0a21a2b34ba9c486a" kindref="member">areSpikesAvailable</ref>())<sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformsNotAvailable){</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/>askForWaveformInformation(clusters);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1479b44b080958401a8a99df609890dc7" kindref="member">WaveformView::mouseReleaseEvent</ref>(QMouseEvent*<sp/>e){</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/></highlight><highlight class="comment">//Trigger<sp/>parent<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><ref refid="classBaseFrame_17b6086bb37e3ad0c56a8b8eb166b3d9e" kindref="member">ViewWidget::mouseReleaseEvent</ref>(e);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((e-&gt;button()<sp/>&amp;<sp/>QMouseEvent::LeftButton)<sp/>&amp;&amp;<sp/>(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0)){</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData<sp/>=<sp/><ref refid="classViewWidget_1b8bdf22293e76d9a143fb84488d52fc4" kindref="member">doc</ref>.<ref refid="classKlustersDoc_196ee8dbf3a50f580d76f024c281f7a45" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::const_iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>clusters<sp/>=<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusters.begin();<sp/>clusterIterator<sp/>!=<sp/>clusters.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><ref refid="classData_1_1WaveformIterator" kindref="compound">Data::WaveformIterator</ref>*<sp/>waveformIterator;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(presentationMode<sp/>==<sp/>SAMPLE)<sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_1cfcd133c11391b4e66102fff646a9784" kindref="member">sampleWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),nbSpkToDisplay);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_160e8f9e603623eef642ef5279b7d1d6b" kindref="member">timeFrameWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),startTime,endTime);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>&amp;&amp;<sp/>(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_1904126344aa4080298a4d3feeb596219" kindref="member">isMeanAvailable</ref>()))<sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_102418425ef12a2a0a21a2b34ba9c486a" kindref="member">areSpikesAvailable</ref>())<sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformsNotAvailable){</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/>askForWaveformInformation(clusters);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1c5bd4d585eabe0cc12cb773315b9b82f" kindref="member">WaveformView::resizeEvent</ref>(QResizeEvent*<sp/>e){</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_1dda2f5f4c168321c208349db2e7b5ed9" kindref="member">drawContentsMode</ref><sp/>=<sp/>REDRAW;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData<sp/>=<sp/><ref refid="classViewWidget_1b8bdf22293e76d9a143fb84488d52fc4" kindref="member">doc</ref>.<ref refid="classKlustersDoc_196ee8dbf3a50f580d76f024c281f7a45" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::const_iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>clusters<sp/>=<sp/><ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>();</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusters.begin();<sp/>clusterIterator<sp/>!=<sp/>clusters.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><ref refid="classData_1_1WaveformIterator" kindref="compound">Data::WaveformIterator</ref>*<sp/>waveformIterator;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(presentationMode<sp/>==<sp/>SAMPLE)<sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_1cfcd133c11391b4e66102fff646a9784" kindref="member">sampleWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),nbSpkToDisplay);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>waveformIterator<sp/>=<sp/>clusteringData.<ref refid="classData_160e8f9e603623eef642ef5279b7d1d6b" kindref="member">timeFrameWaveformIterator</ref>(static_cast&lt;dataType&gt;(*clusterIterator),startTime,endTime);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(meanPresentation<sp/>&amp;&amp;<sp/>(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_1904126344aa4080298a4d3feeb596219" kindref="member">isMeanAvailable</ref>()))<sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformIterator-&gt;<ref refid="classData_1_1WaveformIterator_102418425ef12a2a0a21a2b34ba9c486a" kindref="member">areSpikesAvailable</ref>())<sp/>waveformsNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformsNotAvailable){</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/>askForWaveformInformation(clusters);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1cad6888fcdbfe2d613b1db7f7af56307" kindref="member">WaveformView::willBeKilled</ref>(){<sp/><sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!goingToDie){</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>goingToDie<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inform<sp/>the<sp/>running<sp/>threads<sp/>to<sp/>stop<sp/>processing<sp/>as<sp/>soon<sp/>as<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classWaveformThread" kindref="compound">WaveformThread</ref>*<sp/>waveformThread<sp/>=<sp/>threadsToBeKill.first();<sp/>waveformThread;<sp/>waveformThread<sp/>=<sp/>threadsToBeKill.next())</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/>waveformThread-&gt;<ref refid="classWaveformThread_172393adc73ad43438c11c7fc9d622775" kindref="member">stopProcessing</ref>();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1be060383727a599f7390b14cdd13354a" kindref="member">WaveformView::print</ref>(QPainter&amp;<sp/>printPainter,QPaintDeviceMetrics&amp;<sp/>metrics,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>whiteBackground){</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>double<sp/>buffer<sp/>(pixmap)<sp/>by<sp/>copying<sp/>it<sp/>into<sp/>the<sp/>printer<sp/>device<sp/>throught<sp/>the<sp/>painter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>QRect<sp/>viewportOld<sp/>=<sp/>QRect(viewport.left(),viewport.top(),viewport.width(),viewport.height());</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>viewport<sp/>=<sp/>QRect(printPainter.viewport().left(),printPainter.viewport().top(),printPainter.viewport().width(),printPainter.viewport().height()-10);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>window<sp/>(part<sp/>of<sp/>the<sp/>world<sp/>I<sp/>want<sp/>to<sp/>show)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>QRect<sp/>r((QRect)window);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>printPainter.setWindow(r.left(),r.top(),r.width()-1,r.height()-1);</highlight><highlight class="comment">//hack<sp/>because<sp/>Qt<sp/>QRect<sp/>is<sp/>used<sp/>differently<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>viewport<sp/>(part<sp/>of<sp/>the<sp/>device<sp/>I<sp/>want<sp/>to<sp/>write<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//By<sp/>default,<sp/>the<sp/>viewport<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>device&apos;s<sp/>rectangle<sp/>(contentsRec),<sp/>taking<sp/>a<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//one<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>legends<sp/>(cluster<sp/>ids)<sp/>will<sp/>not<sp/>ovelap<sp/>to<sp/>much<sp/>a<sp/>waveform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>printPainter.setViewport(viewport);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>background<sp/>with<sp/>the<sp/>background<sp/>color<sp/>and<sp/>ensure<sp/>we<sp/>draw<sp/>the<sp/>same<sp/>portion<sp/>of<sp/>the<sp/>world<sp/>than<sp/>on<sp/>the<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>QRect<sp/>back<sp/>=<sp/>QRect(r.left(),r.top(),r.width(),r.height()+10);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>QColor<sp/>colorLegendTmp<sp/>=<sp/><ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>QColor<sp/>background=<sp/>backgroundColor();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(whiteBackground){</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref><sp/>=<sp/>black;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/>setPaletteBackgroundColor(white);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>printPainter.fillRect(back,backgroundColor());</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>printPainter.setClipRect(back,QPainter::CoordPainter);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Paint<sp/>all<sp/>the<sp/>waveforms<sp/>in<sp/>the<sp/>shownclusters<sp/>list<sp/>(in<sp/>the<sp/>double<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>drawWaveforms(printPainter,<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reset<sp/>transformation<sp/>due<sp/>to<sp/>setWindow<sp/>and<sp/>setViewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>printPainter.resetXForm();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Draw<sp/>the<sp/>cluster<sp/>Ids<sp/>below<sp/>the<sp/>waveforms<sp/>if<sp/>they<sp/>are<sp/>not<sp/>in<sp/>overlay<sp/>presentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!overLayPresentation)<sp/>drawClusterIds(printPainter);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>printPainter.setClipping(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Restore<sp/>the<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(whiteBackground){</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><ref refid="classBaseFrame_146ae781de9307957e8a1eb0a5f5a64c6" kindref="member">colorLegend</ref><sp/>=<sp/>colorLegendTmp;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/>setPaletteBackgroundColor(background);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Restore<sp/>the<sp/>previous<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>viewport<sp/>=<sp/>QRect(viewportOld.left(),viewportOld.top(),viewportOld.width(),viewportOld.height());<sp/><sp/></highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1151074205d582e9c6f54254a36309dc5" kindref="member">WaveformView::increaseAmplitude</ref>(){</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Decreases<sp/>the<sp/>ordinate<sp/>scale<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//an<sp/>enlargement<sp/>of<sp/>the<sp/>waveforms<sp/>in<sp/>the<sp/>ordinate<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>traceVspace<sp/>/<sp/>((4/3)^gain<sp/>*<sp/>acquisitionGain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>gain++;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>Yfactor<sp/>=<sp/>static_cast&lt;float&gt;(YsizeForMaxAmp)/static_cast&lt;float&gt;(pow(0.75,gain)<sp/>*<sp/>acquisitionGain);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_1de9539d1e742a7a86d6e1ab20a22a269" kindref="member">WaveformView::decreaseAmplitude</ref>(){</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Increases<sp/>the<sp/>ordinate<sp/>scale<sp/>resulting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//an<sp/>reduction<sp/>of<sp/>the<sp/>waveforms<sp/>in<sp/>the<sp/>ordinate<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//factor<sp/>=<sp/>traceVspace<sp/>/<sp/>((4/3)^gain<sp/>*<sp/>acquisitionGain)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>gain--;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>Yfactor<sp/>=<sp/>static_cast&lt;float&gt;(YsizeForMaxAmp)/static_cast&lt;float&gt;(pow(0.75,gain)<sp/>*<sp/>acquisitionGain);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_16299fc423410500b7aa16cf75666b63e" kindref="member">WaveformView::setOverLayPresentation</ref>(){</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/>overLayPresentation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>updateWindow();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>update();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWaveformView_161348f3bfd0a196f5618732e15083762" kindref="member">WaveformView::setSideBySidePresentation</ref>(){</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/>overLayPresentation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/>isZoomed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//Hack<sp/>because<sp/>all<sp/>the<sp/>tabs<sp/>share<sp/>the<sp/>same<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>updateWindow();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>update();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>to<sp/>be<sp/>collected<sp/>if<sp/>need<sp/>it<sp/>and<sp/>everything<sp/>has<sp/>to<sp/>be<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>().size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(Qt::WaitCursor);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>askForWaveformInformation(<ref refid="classViewWidget_166610cd0dfae797713df3acb439033cc" kindref="member">view</ref>.<ref refid="classKlustersView_1ee0d5fb1697d8aefcdf7a0f817b13eba" kindref="member">clusters</ref>());</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/waveformview.cpp"/>
  </compounddef>
</doxygen>
