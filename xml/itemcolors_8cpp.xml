<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="itemcolors_8cpp" kind="file">
    <compoundname>itemcolors.cpp</compoundname>
    <includes refid="itemcolors_8h" local="yes">itemcolors.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1236">
        <label>qvaluelist.h</label>
      </node>
      <node id="1235">
        <label>qcolor.h</label>
      </node>
      <node id="1234">
        <label>qptrlist.h</label>
      </node>
      <node id="1233">
        <label>itemcolors.h</label>
        <link refid="itemcolors_8h-source"/>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1235" relation="include">
        </childnode>
        <childnode refid="1236" relation="include">
        </childnode>
      </node>
      <node id="1237">
        <label>iostream</label>
      </node>
      <node id="1232">
        <label>itemcolors.cpp</label>
        <link refid="itemcolors.cpp"/>
        <childnode refid="1233" relation="include">
        </childnode>
        <childnode refid="1237" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemcolors.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Tue<sp/>Sep<sp/>16<sp/>2004</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2003<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan@myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>application<sp/>specific<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;itemcolors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//C,<sp/>C++<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">ItemColors::ItemColors():itemList(),colorChanged(false){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>list<sp/>owns<sp/>the<sp/>objects,<sp/>it<sp/>will<sp/>delete<sp/>the<sp/>items<sp/>that<sp/>are<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>itemList.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">ItemColors::~ItemColors(){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;~ItemColors()&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ItemColors::ItemColors(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classItemColors" kindref="compound">ItemColors</ref>&amp;<sp/>origin):colorChanged(origin.colorChanged){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Insert<sp/>into<sp/>itemList<sp/>a<sp/>deep<sp/>copy<sp/>of<sp/>all<sp/>the<sp/>elements<sp/>of<sp/>origin.itemList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>ItemColor*<sp/>itemColor;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>QPtrList&lt;ItemColor&gt;<sp/>originItemList<sp/>=<sp/><sp/>origin.<ref refid="classItemColors_1c09e9177297dc32ba547b61e90ce3d5d" kindref="member">itemList</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(itemColor<sp/>=<sp/>originItemList.first();<sp/>itemColor;<sp/>itemColor<sp/>=<sp/>originItemList.next()){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>itemList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ItemColor(*itemColor));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">QColor<sp/><ref refid="classItemColors_15331e934e03ba6a5bb2cae1eae5d75bc" kindref="member">ItemColors::color</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,<sp/>SelectionMode<sp/>mode){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>theItemColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>BY_INDEX)<sp/>theItemColor<sp/>=<sp/>itemList.at(static_cast&lt;uint&gt;(identifier));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>BY_ITEM_NUMBER)<sp/>theItemColor<sp/>=<sp/>itemColor(identifier);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>case<sp/>no<sp/>ItemColor<sp/>have<sp/>been<sp/>find<sp/>(should<sp/>not<sp/>happen),<sp/>return<sp/>black.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theItemColor<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QColor(Qt::black);<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theItemColor-&gt;color;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_1cd8b2f4b4ab0f6f59bb9d7173bb2f3d7" kindref="member">ItemColors::setColor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,<sp/>QColor<sp/>color,<sp/>SelectionMode<sp/>mode){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>theItemColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>BY_INDEX)<sp/>theItemColor<sp/>=<sp/>itemList.at(static_cast&lt;uint&gt;(identifier));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>BY_ITEM_NUMBER)<sp/>theItemColor<sp/>=<sp/>itemColor(identifier);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>theItemColor-&gt;color<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classItemColors_11e843f3a9dc5e7473aa6e60668776259" kindref="member">ItemColors::itemId</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(itemList.at(static_cast&lt;uint&gt;(index)))-&gt;<ref refid="classItemColors_11e843f3a9dc5e7473aa6e60668776259" kindref="member">itemId</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">QString<sp/><ref refid="classItemColors_1d6106a973d0d779f1d90a3d6413c3750" kindref="member">ItemColors::itemLabel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(itemList.at(static_cast&lt;uint&gt;(index)))-&gt;label;<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">QString<sp/><ref refid="classItemColors_175f3487df5bc1abc46df29698381e485" kindref="member">ItemColors::itemLabelById</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(itemColorIndex(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(itemList.at(static_cast&lt;uint&gt;(itemColorIndex(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))))-&gt;label;<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classItemColors_1c14bf1392ed92cd06510247b7c579de2" kindref="member">ItemColors::contains</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(itemColorIndex(itemId)<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classItemColors_1d1205053a2109dd30dec9d91a4ac1cd0" kindref="member">ItemColors::isColorChanged</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,<sp/>SelectionMode<sp/>mode){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>theItemColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>BY_INDEX)<sp/>theItemColor<sp/>=<sp/>itemList.at(static_cast&lt;uint&gt;(identifier));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>BY_ITEM_NUMBER)<sp/>theItemColor<sp/>=<sp/>itemColor(identifier);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theItemColor-&gt;isChanged;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_14992dcd7a41b0b186c50c1dae6223d7e" kindref="member">ItemColors::setColorChanged</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed,<sp/>SelectionMode<sp/>mode){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>theItemColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>BY_INDEX)<sp/>theItemColor<sp/>=<sp/>itemList.at(static_cast&lt;uint&gt;(identifier));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>BY_ITEM_NUMBER)<sp/>theItemColor<sp/>=<sp/>itemColor(identifier);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>theItemColor-&gt;isChanged<sp/>=<sp/>changed;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>colorChanged<sp/>if<sp/>necessary<sp/>(the<sp/>change<sp/>status<sp/>is<sp/>true<sp/>and<sp/>colorChanged<sp/>is<sp/>not<sp/>already<sp/>true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(changed<sp/>&amp;&amp;<sp/>!colorChanged)<sp/>colorChanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">uint<sp/><ref refid="classItemColors_1ad18853c399635eba74382945cbe0955" kindref="member">ItemColors::append</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId,<sp/>QColor<sp/>color){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>itemList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ItemColor(itemId,color));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemList.count();</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">uint<sp/><ref refid="classItemColors_1ad18853c399635eba74382945cbe0955" kindref="member">ItemColors::append</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId,QString<sp/>label,QColor<sp/>color){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>itemList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ItemColor(itemId,color,label));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemList.count();</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_1fe00eda17d35be0d60bce0b6a78c7488" kindref="member">ItemColors::insert</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId,<sp/>QColor<sp/>color,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>itemList.insert(index,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ItemColor(itemId,color));</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_1fe00eda17d35be0d60bce0b6a78c7488" kindref="member">ItemColors::insert</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId,QString<sp/>label,QColor<sp/>color,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>itemList.insert(index,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ItemColor(itemId,color,label));</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classItemColors_12ab1cc59206fd12f4a4cf7d88a823f66" kindref="member">ItemColors::remove</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>identifier,<sp/>SelectionMode<sp/>mode){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>BY_INDEX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemList.remove(identifier);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>BY_ITEM_NUMBER){</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemList.remove(itemColorIndex(identifier));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//unknow<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">ItemColors::ItemColor*<sp/>ItemColors::itemColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>on<sp/>the<sp/>list<sp/>until<sp/>the<sp/>item<sp/>is<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>QPtrListIterator&lt;ItemColors::ItemColor&gt;<sp/>iterator(itemList);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>itemColor<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((itemColor<sp/>=<sp/>iterator.current())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemColor-&gt;itemId<sp/>==<sp/>itemId)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemColor;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight><highlight class="comment">//Normally<sp/>never<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ItemColors::itemColorIndex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemId)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>on<sp/>the<sp/>list<sp/>until<sp/>the<sp/>item<sp/>is<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>QPtrListIterator&lt;ItemColors::ItemColor&gt;<sp/>iterator(itemList);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>itemColor;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((itemColor<sp/>=<sp/>iterator.current())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemColor-&gt;itemId<sp/>==<sp/>itemId)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight><highlight class="comment">//Normally<sp/>never<sp/>reach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">QValueList&lt;int&gt;<sp/><ref refid="classItemColors_1c192b8cf920d42a4a9385ea5b900a267" kindref="member">ItemColors::colorChangedItemList</ref>(){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>changedList;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>ItemColor*<sp/>itemColor;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itemColor<sp/>=<sp/>itemList.first();<sp/>itemColor;<sp/>itemColor<sp/>=<sp/>itemList.next()){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(itemColor-&gt;isChanged)<sp/>changedList.append(itemColor-&gt;itemId);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changedList;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_17e0a91ad96e51d9e59b0cd4b2f1f67dd" kindref="member">ItemColors::resetAllColorStatus</ref>(){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="classItemColors_14992dcd7a41b0b186c50c1dae6223d7e" kindref="member">setColorChanged</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>changedList;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>ItemColor*<sp/>itemColor;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itemColor<sp/>=<sp/>itemList.first();<sp/>itemColor;<sp/>itemColor<sp/>=<sp/>itemList.next()){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(itemColor-&gt;isChanged)<sp/>itemColor-&gt;isChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_13f93c952e7bf8cae24e2a05a71452bf4" kindref="member">ItemColors::changeItemId</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newItemId){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>theItemColor<sp/>=<sp/>itemList.at(static_cast&lt;uint&gt;(index));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>theItemColor-&gt;itemId<sp/>=<sp/>newItemId;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classItemColors_17ec5592ee1998122b19bffcf9f2c0089" kindref="member">ItemColors::changeItemLabel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,QString<sp/>newItemLabel){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>ItemColors::ItemColor*<sp/>theItemColor<sp/>=<sp/>itemList.at(static_cast&lt;uint&gt;(index));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>theItemColor-&gt;label<sp/>=<sp/>newItemLabel;<sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/itemcolors.cpp"/>
  </compounddef>
</doxygen>
