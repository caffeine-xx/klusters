<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="data_8cpp" kind="file">
    <compoundname>data.cpp</compoundname>
    <includes refid="data_8h" local="yes">data.h</includes>
    <includes refid="minmaxthread_8h" local="yes">minmaxthread.h</includes>
    <includes refid="waveformview_8h" local="yes">waveformview.h</includes>
    <includes refid="autosavethread_8h" local="yes">autosavethread.h</includes>
    <includes refid="klustersxmlreader_8h" local="yes">klustersxmlreader.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">qtextstream.h</includes>
    <includes local="no">qstringlist.h</includes>
    <includes local="no">qstring.h</includes>
    <includes local="no">qregexp.h</includes>
    <includes local="no">klocale.h</includes>
    <includes local="no">iomanip</includes>
    <includes refid="timer_8h" local="yes">timer.h</includes>
    <incdepgraph>
      <node id="844">
        <label>baseframe.h</label>
        <link refid="baseframe_8h-source"/>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
      </node>
      <node id="870">
        <label>qregexp.h</label>
      </node>
      <node id="823">
        <label>qregion.h</label>
      </node>
      <node id="872">
        <label>iomanip</label>
      </node>
      <node id="825">
        <label>qfile.h</label>
      </node>
      <node id="816">
        <label>pair.h</label>
        <link refid="pair_8h-source"/>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
      </node>
      <node id="859">
        <label>dataprovider.h</label>
        <link refid="dataprovider_8h-source"/>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
      </node>
      <node id="862">
        <label>klustersxmlreader.h</label>
        <link refid="klustersxmlreader_8h-source"/>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="866" relation="include">
        </childnode>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
      </node>
      <node id="856">
        <label>qiconview.h</label>
      </node>
      <node id="821">
        <label>qvaluelist.h</label>
      </node>
      <node id="841">
        <label>viewwidget.h</label>
        <link refid="viewwidget_8h-source"/>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
      </node>
      <node id="838">
        <label>zoomwindow.h</label>
        <link refid="zoomwindow_8h-source"/>
        <childnode refid="839" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
      </node>
      <node id="817">
        <label>qstring.h</label>
      </node>
      <node id="818">
        <label>stdlib.h</label>
      </node>
      <node id="848">
        <label>qobject.h</label>
      </node>
      <node id="860">
        <label>channelcolors.h</label>
        <link refid="channelcolors_8h-source"/>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
      <node id="828">
        <label>kurl.h</label>
      </node>
      <node id="839">
        <label>qrect.h</label>
      </node>
      <node id="829">
        <label>stdexcept</label>
      </node>
      <node id="865">
        <label>libxml/parser.h</label>
      </node>
      <node id="847">
        <label>klustersdoc.h</label>
        <link refid="klustersdoc_8h-source"/>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="858" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="861" relation="include">
        </childnode>
      </node>
      <node id="811">
        <label>array.h</label>
        <link refid="array_8h-source"/>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
      </node>
      <node id="843">
        <label>kstatusbar.h</label>
      </node>
      <node id="834">
        <label>qframe.h</label>
      </node>
      <node id="852">
        <label>qcolor.h</label>
      </node>
      <node id="820">
        <label>qptrlist.h</label>
      </node>
      <node id="840">
        <label>qpoint.h</label>
      </node>
      <node id="833">
        <label>waveformview.h</label>
        <link refid="waveformview_8h-source"/>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="835" relation="include">
        </childnode>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
      </node>
      <node id="814">
        <label>sortabletable.h</label>
        <link refid="sortabletable_8h-source"/>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
      </node>
      <node id="819">
        <label>clusteruserinformation.h</label>
        <link refid="clusteruserinformation_8h-source"/>
      </node>
      <node id="871">
        <label>klocale.h</label>
      </node>
      <node id="832">
        <label>minmaxthread.h</label>
        <link refid="minmaxthread_8h-source"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="827" relation="include">
        </childnode>
      </node>
      <node id="857">
        <label>qtooltip.h</label>
      </node>
      <node id="809">
        <label>data.cpp</label>
        <link refid="data.cpp"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="868" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="870" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="873" relation="include">
        </childnode>
      </node>
      <node id="846">
        <label>autosavethread.h</label>
        <link refid="autosavethread_8h-source"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
      </node>
      <node id="861">
        <label>clustersprovider.h</label>
        <link refid="clustersprovider_8h-source"/>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
      </node>
      <node id="858">
        <label>tracesprovider.h</label>
        <link refid="tracesprovider_8h-source"/>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
      </node>
      <node id="831">
        <label>vector</label>
      </node>
      <node id="854">
        <label>qvariant.h</label>
      </node>
      <node id="851">
        <label>itemcolors.h</label>
        <link refid="itemcolors_8h-source"/>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
      <node id="850">
        <label>kdockwidget.h</label>
      </node>
      <node id="845">
        <label>qcursor.h</label>
      </node>
      <node id="835">
        <label>qpainter.h</label>
      </node>
      <node id="868">
        <label>qtextstream.h</label>
      </node>
      <node id="830">
        <label>math.h</label>
      </node>
      <node id="873">
        <label>timer.h</label>
        <link refid="timer_8h-source"/>
        <childnode refid="874" relation="include">
        </childnode>
      </node>
      <node id="842">
        <label>qwidget.h</label>
      </node>
      <node id="874">
        <label>sys/time.h</label>
      </node>
      <node id="813">
        <label>iostream</label>
      </node>
      <node id="866">
        <label>libxml/xpath.h</label>
      </node>
      <node id="827">
        <label>qthread.h</label>
      </node>
      <node id="849">
        <label>qfileinfo.h</label>
      </node>
      <node id="864">
        <label>libxml/tree.h</label>
      </node>
      <node id="867">
        <label>libxml/xpathInternals.h</label>
      </node>
      <node id="853">
        <label>clusterPalette.h</label>
        <link refid="clusterPalette_8h-source"/>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="855" relation="include">
        </childnode>
        <childnode refid="856" relation="include">
        </childnode>
        <childnode refid="857" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
      </node>
      <node id="822">
        <label>qdict.h</label>
      </node>
      <node id="824">
        <label>qmap.h</label>
      </node>
      <node id="836">
        <label>qstyle.h</label>
      </node>
      <node id="826">
        <label>qmutex.h</label>
      </node>
      <node id="863">
        <label>stdio.h</label>
      </node>
      <node id="837">
        <label>qpixmap.h</label>
      </node>
      <node id="812">
        <label>cstring</label>
      </node>
      <node id="869">
        <label>qstringlist.h</label>
      </node>
      <node id="855">
        <label>qvbox.h</label>
      </node>
      <node id="810">
        <label>data.h</label>
        <link refid="data_8h-source"/>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="826" relation="include">
        </childnode>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
      </node>
      <node id="815">
        <label>types.h</label>
        <link refid="types_8h-source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="">
      <memberdef kind="define" id="data_8cpp_1f115d7bd06a046214188c4ca1044bc62" prot="public" static="no">
        <name>_FILE_OFFSET_BITS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lynn/CMBN/Klusters/klusters/src/data.cpp" line="26" bodyfile="/home/lynn/CMBN/Klusters/klusters/src/data.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="data_8cpp_15b79f57f28c8999a5343afe512a2c768" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nbUndo</definition>
        <argsstring></argsstring>
        <name>nbUndo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lynn/CMBN/Klusters/klusters/src/data.cpp" line="43" bodyfile="/home/lynn/CMBN/Klusters/klusters/src/main.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="">
      <memberdef kind="define" id="data_8cpp_1f115d7bd06a046214188c4ca1044bc62" prot="public" static="no">
        <name>_FILE_OFFSET_BITS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lynn/CMBN/Klusters/klusters/src/data.cpp" line="26" bodyfile="/home/lynn/CMBN/Klusters/klusters/src/data.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="">
      <memberdef kind="variable" id="data_8cpp_15b79f57f28c8999a5343afe512a2c768" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nbUndo</definition>
        <argsstring></argsstring>
        <name>nbUndo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lynn/CMBN/Klusters/klusters/src/data.cpp" line="43" bodyfile="/home/lynn/CMBN/Klusters/klusters/src/main.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Wed<sp/>Sep<sp/>17<sp/>2003</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2003<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan@myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//Application<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;data.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minmaxthread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;waveformview.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;autosavethread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;klustersxmlreader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//C<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>_LARGEFILE_SOURCE<sp/>already<sp/>defined<sp/>in<sp/>/usr/include/features.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_FILE_OFFSET_BITS<sp/>64</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//Qt<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qtextstream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qstringlist.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qstring.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qregexp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//kde<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;klocale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Required<sp/>for<sp/>formated<sp/>I/O.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbUndo;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">Data::Data():nbSpikes(0),traceViewVariablesAvailable(false),undoRedoInProcess(false),clusterZeroJustModified(false){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>minMaxThread<sp/>=<sp/>minMaxCalculator();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>spikesByCluster<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>clusterInfoMap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>QMap&lt;int,ClusterUserInformation&gt;<sp/>clusterUserInformationMap<sp/>=<sp/>QMap&lt;int,ClusterUserInformation&gt;();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>lists<sp/>own<sp/>the<sp/>objects,<sp/>they<sp/>will<sp/>delete<sp/>the<sp/>items<sp/>that<sp/>are<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>clusterInfoMapUndoList.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>clusterInfoMapRedoList.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>spikesByClusterUndoList.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>spikesByClusterRedoList.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>waveformDict.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>correlationDict.setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">Data::~Data(){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>minMaxThread;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delete<sp/>the<sp/>pointers<sp/>to<sp/>the<sp/>tables<sp/>and<sp/>maps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>spikesByCluster;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clusterInfoMap;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="classMinMaxThread" kindref="compound">MinMaxThread</ref>*<sp/>Data::minMaxCalculator(){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classMinMaxThread" kindref="compound">MinMaxThread</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_164e73cfdb133d5090bdacc36aef30c15" kindref="member">Data::configure</ref>(QFile&amp;<sp/>parFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>electrodeGroupID,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><ref refid="classKlustersXmlReader" kindref="compound">KlustersXmlReader</ref><sp/>reader<sp/>=<sp/><ref refid="classKlustersXmlReader" kindref="compound">KlustersXmlReader</ref>();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reader.<ref refid="classKlustersXmlReader_1f1c83d6e527cef2fd0cebf9f41ef426c" kindref="member">parseFile</ref>(parFile,KlustersXmlReader::PARAMETER)){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Load<sp/>the<sp/>info<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>nbBits<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_1351a9934bb1599df22cf5e9532cb1e43" kindref="member">getResolution</ref>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>samplingRate<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_151ee30050331b6b0f29a664333baa48d" kindref="member">getSamplingRate</ref>();<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>channels<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_14c0121c8c32c72d0ba70b5c2c57f879b" kindref="member">getNbChannelsByGroup</ref>(electrodeGroupID);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>channels.begin();<sp/>it<sp/>!=<sp/>channels.end();<sp/>++it)<sp/>currentChannels.append(*it);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>nbChannels<sp/>=<sp/>currentChannels.size();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>nbSamplesInWaveform<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_19b3fe8d2f53fa5cf2405e10eb323a4c6" kindref="member">getNbSamples</ref>(electrodeGroupID);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>peakPositionInWaveform<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_17cd9ef6dcce948e7f92cd5b546ca2a94" kindref="member">getPeakSampleIndex</ref>(electrodeGroupID);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>nbFeaturesbyChannel<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_17efbc3776fabd83b126c6aa70652359f" kindref="member">getNbFeatures</ref>(electrodeGroupID);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>totalNbChannels<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_1a9ee5e74870a19a59ed6a06f29c94877" kindref="member">getNbChannels</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Variables<sp/>used<sp/>by<sp/>the<sp/>traceView</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>voltageRange<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_17cf1cdcd65a04ccd98c7a47a0e279feb" kindref="member">getVoltageRange</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>amplification<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_18b27e29d7b49de0466ef69f08103826e" kindref="member">getAmplification</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>initialOffset<sp/>=<sp/>reader.<ref refid="classKlustersXmlReader_153f101ab15add69915e45e079cfb6e7f" kindref="member">getOffset</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(voltageRange<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>amplification<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>totalNbChannels<sp/>!=<sp/>0)<sp/>traceViewVariablesAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cluster<sp/>user<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>reader.<ref refid="classKlustersXmlReader_136fb2a96ae95ffdd6d68974793f1e4c5" kindref="member">getClusterUserInformation</ref>(electrodeGroupID,clusterUserInformationMap);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>reader.<ref refid="classKlustersXmlReader_115badaa4c6ebd596d15dae903ce9ad0c" kindref="member">closeFile</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/><sp/>one<sp/>of<sp/>the<sp/>elements<sp/>was<sp/>not<sp/>in<sp/>the<sp/>parameter<sp/>file,<sp/>its<sp/>value<sp/>would<sp/>have<sp/>been<sp/>assigned<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbBits<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>parameter<sp/>file<sp/>(base.xml),<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>is<sp/>missing.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(samplingRate<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>parameter<sp/>file<sp/>(base.xml),<sp/>the<sp/>sampling<sp/>rate<sp/>is<sp/>missing.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(channels.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>no<sp/>channels<sp/>defined<sp/>for<sp/>this<sp/>electrode<sp/>group.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbChannels<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>parameter<sp/>file<sp/>(base.xml),<sp/>the<sp/>number<sp/>of<sp/>channels<sp/>could<sp/>not<sp/>be<sp/>determined.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSamplesInWaveform<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>parameter<sp/>file<sp/>(base.xml),<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>per<sp/>waveform<sp/>is<sp/>missing.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(peakPositionInWaveform<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>parameter<sp/>file<sp/>(base.xml),<sp/>the<sp/>position<sp/>of<sp/>the<sp/>waveform<sp/>peak<sp/>is<sp/>missing.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbFeaturesbyChannel<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>parameter<sp/>file<sp/>(base.xml),<sp/>the<sp/>number<sp/>of<sp/>features<sp/>per<sp/>channel<sp/>is<sp/>missings.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>sampling<sp/>rate<sp/>is<sp/>given<sp/>in<sp/>seconds<sp/>and<sp/>the<sp/>sampling<sp/>interval<sp/>used<sp/>in<sp/>Klusters<sp/>is<sp/>in<sp/>microseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>samplingInterval<sp/>=<sp/>1000000<sp/>*<sp/>static_cast&lt;double&gt;(1.0/samplingRate);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;The<sp/>parameter<sp/>file<sp/>(base.xml)<sp/>could<sp/>not<sp/>be<sp/>parsed.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_164e73cfdb133d5090bdacc36aef30c15" kindref="member">Data::configure</ref>(QFile&amp;<sp/>parXFile,QFile&amp;<sp/>parFile,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>QTextStream<sp/>parX(&amp;parXFile);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>QTextStream<sp/>par(&amp;parFile);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>QValueList<sp/>&lt;QStringList&gt;<sp/>parXData;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>QValueList<sp/>&lt;QStringList&gt;<sp/>parData;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>QString<sp/>line;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(line<sp/>=<sp/>parX.readLine();<sp/>!line.isNull();line<sp/>=<sp/>parX.readLine()){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>parXData.append(QStringList::split(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,line));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>lineCounter<sp/>++;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>parX<sp/>file<sp/>has<sp/>to<sp/>contain<sp/>at<sp/>leat<sp/>9<sp/>lines,<sp/>otherwise<sp/>there<sp/>is<sp/>a<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lineCounter<sp/>!=<sp/>9){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>general<sp/>parameter<sp/>file<sp/>(base.par),<sp/>the<sp/>number<sp/>of<sp/>lines<sp/>should<sp/>be<sp/>9.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>totalNbChannels<sp/>=<sp/>parXData[0][0].toInt();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>nbChannels<sp/>=<sp/>parXData[0][1].toInt();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nbChannels;++i){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>channelIds.append(parXData[1][i].toInt());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>nbRefactorySample<sp/>=<sp/>parXData[2][0].toInt();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>RMSIntWindowLenght<sp/>=<sp/>parXData[2][1].toInt();<sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>firingRate<sp/>=<sp/>parXData[3][0].toFloat();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>nbSamplesInWaveform<sp/>=<sp/>parXData[4][0].toInt();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>peakPositionInWaveform<sp/>=<sp/>parXData[4][1].toInt();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>windowLenghtToRealign<sp/>=<sp/>parXData[5][0].toInt();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>peakPositionToRealign<sp/>=<sp/>parXData[5][1].toInt();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>nbSampleBeforePeak<sp/>=<sp/>parXData[6][0].toInt();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>nbSampleAfterPeak<sp/>=<sp/>parXData[6][1].toInt();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>nbFeaturesbyChannel<sp/>=<sp/>parXData[7][0].toInt();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>nbSamplesByPCA<sp/>=<sp/>parXData[7][1].toInt();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>HighPassFilterFreq<sp/>=<sp/>parXData[8][0].toFloat();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>lineCounter<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(line<sp/>=<sp/>par.readLine();<sp/>!line.isNull();line<sp/>=<sp/>par.readLine()){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>parData.append(QStringList::split(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,line));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>lineCounter<sp/>++;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>par<sp/>file<sp/>has<sp/>to<sp/>contain<sp/>at<sp/>leat<sp/>3<sp/>lines,<sp/>otherwise<sp/>there<sp/>is<sp/>a<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lineCounter<sp/>&lt;<sp/>3){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>specific<sp/>parameter<sp/>file<sp/>(base.par.n),<sp/>there<sp/>are<sp/>less<sp/>than<sp/>3<sp/>lines.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>nbBits<sp/>=<sp/>parData[0][1].toInt();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>samplingInterval<sp/>=<sp/>(parData[1][0].toDouble());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>nbTotalElectrodes<sp/>=<sp/>parData[2][0].toInt();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_186310888eced8e33b0e1a87ca4b73226" kindref="member">Data::loadClusters</ref>(FILE*<sp/>clusterFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Load<sp/>all<sp/>the<sp/>file<sp/>in<sp/>a<sp/>buffer<sp/>then<sp/>read<sp/>dataType<sp/>by<sp/>dataType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>file<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>fseeko(clusterFile<sp/>,<sp/>0<sp/>,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>lSize<sp/>=<sp/>ftello(clusterFile);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>rewind(clusterFile);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>first<sp/>line<sp/>contains<sp/>the<sp/>number<sp/>of<sp/>clusters,<sp/>skip<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>following<sp/>line<sp/>(&apos;start&apos;<sp/>will<sp/>point<sp/>to<sp/>the<sp/>second<sp/>line)<sp/>to<sp/>start<sp/>reading<sp/>the<sp/>cluster<sp/>ids.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstLineBufferSize<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>firstLineBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[firstLineBufferSize];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>fgets(firstLineBuffer,firstLineBufferSize,clusterFile);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]firstLineBuffer;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>ftello(clusterFile);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>to<sp/>contain<sp/>the<sp/>whole<sp/>file<sp/>minus<sp/>the<sp/>first<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[lSize-start];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>file<sp/>into<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>fread(buffer,1,lSize-start,clusterFile);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Determine<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>using<sp/>the<sp/>length<sp/>of<sp/>the<sp/>binary<sp/>spike<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleSize;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(nbBits){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>32:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/></highlight><highlight class="comment">//not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>bits<sp/>is<sp/>not<sp/>supported.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>nbSpikes<sp/>=<sp/><sp/>spkFileLength<sp/>/<sp/>static_cast&lt;long&gt;(static_cast&lt;long&gt;(nbChannels)<sp/>*<sp/>static_cast&lt;long&gt;(nbSamplesInWaveform)<sp/>*<sp/>static_cast&lt;long&gt;(sampleSize));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Effectively<sp/>create<sp/>the<sp/>table<sp/>containing<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>spikesByCluster-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);<sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>buffer<sp/>is<sp/>read<sp/>and<sp/>each<sp/>dataType<sp/>is<sp/>build<sp/>char<sp/>by<sp/>char<sp/>into<sp/>a<sp/>string.<sp/>When<sp/>the<sp/>char<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//is<sp/>not<sp/>[1-9]<sp/>(&lt;=&gt;<sp/>blank<sp/>space<sp/>or<sp/>a<sp/>new<sp/>line),<sp/>the<sp/>string<sp/>is<sp/>converted<sp/>into<sp/>a<sp/>dataType<sp/>and<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//into<sp/>the<sp/>second<sp/>row<sp/>of<sp/>spikesByCluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//string<sp/>of<sp/>character<sp/>which<sp/>will<sp/>contains<sp/>the<sp/>current<sp/>seek<sp/>dataType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>dataType<sp/>upperLimit<sp/>=<sp/>nbSpikes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>dataType<sp/>k<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clusterID[255];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><sp/>lSize-start;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>end<sp/>;<sp/>++i<sp/>){</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>buffer[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>clusterID[l++]<sp/>=<sp/>buffer[i];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterID[l]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByCluster)(2,k++)<sp/>=<sp/>atol(clusterID);</highlight><highlight class="comment">//Warning<sp/>if<sp/>the<sp/>typedef<sp/>dataType<sp/>changes,<sp/>change<sp/>will<sp/>have<sp/>to<sp/>be<sp/>make<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(k<sp/>&gt;<sp/>upperLimit)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>loadClusters,<sp/><sp/>nbSpikes:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nbSpikes<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>k:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;k&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>spkFileLength<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;spkFileLength&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>nbChannels<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nbChannels&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>nbSamplesInWaveform<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nbSamplesInWaveform&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>sampleSize<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;sampleSize&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...){</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]buffer;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;An<sp/>error<sp/>happened<sp/>while<sp/>loading<sp/>the<sp/>clusters<sp/>into<sp/>memory.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]buffer;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>number<sp/>of<sp/>clusters<sp/>read<sp/>did<sp/>not<sp/>correspond<sp/>to<sp/>nbSpikes,<sp/>there<sp/>is<sp/>a<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(k<sp/>!=<sp/>upperLimit){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>spikes<sp/>read<sp/>in<sp/>the<sp/>cluster<sp/>file<sp/>does<sp/>not<sp/>correspond<sp/>to<sp/>number<sp/>of<sp/>spikes<sp/>computed.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_11778e2f260f69a61b483b20d283bcdfa" kindref="member">Data::loadFeatures</ref>(FILE*<sp/>featureFile,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Load<sp/>all<sp/>the<sp/>file<sp/>in<sp/>a<sp/>buffer<sp/>then<sp/>read<sp/>dataType<sp/>by<sp/>dataType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lSize;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>file<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>fseeko(featureFile<sp/>,<sp/>0<sp/>,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>lSize<sp/>=<sp/>ftello(featureFile);<sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>rewind(featureFile);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>to<sp/>contain<sp/>the<sp/>whole<sp/>file<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[lSize];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>file<sp/>into<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>fread(buffer,1,lSize,featureFile);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/></highlight><highlight class="comment">//Read<sp/>the<sp/>number<sp/>of<sp/>dimensions<sp/>from<sp/>the<sp/>first<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstLineBufferSize<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>string[255];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>start<sp/>&lt;<sp/>firstLineBufferSize<sp/>;<sp/>++start){</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[start]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>buffer[start]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>string[j++]<sp/>=<sp/>buffer[start];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbDimensions<sp/>=<sp/>atoi(string);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Effectively<sp/>create<sp/>the<sp/>tables<sp/>containing<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>features.setSize(nbSpikes,nbDimensions);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>buffer<sp/>is<sp/>read<sp/>and<sp/>each<sp/>dataType<sp/>is<sp/>build<sp/>char<sp/>by<sp/>char<sp/>into<sp/>a<sp/>string.<sp/>When<sp/>the<sp/>char<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//is<sp/>not<sp/>-/[1-9]<sp/>(&lt;=&gt;<sp/>blank<sp/>space<sp/>or<sp/>a<sp/>new<sp/>line),<sp/>the<sp/>string<sp/>is<sp/>converted<sp/>into<sp/>a<sp/>dataType<sp/>and<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//into<sp/>features.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>string<sp/>of<sp/>character,feature,<sp/>will<sp/>contains<sp/>the<sp/>current<sp/>seek<sp/>dataType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>feature[255];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>dataType<sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start<sp/>;<sp/>i<sp/>&lt;<sp/>lSize<sp/>;<sp/>++i<sp/>){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>buffer[i]<sp/>&amp;&amp;<sp/>buffer[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>)<sp/>feature[l++]<sp/>=<sp/>buffer[i];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>feature[l]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>features[k++]<sp/>=<sp/>atol(feature);</highlight><highlight class="comment">//Warning<sp/>if<sp/>the<sp/>typedef<sp/>dataType<sp/>changes,<sp/>change<sp/>will<sp/>have<sp/>to<sp/>be<sp/>make<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]buffer;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;An<sp/>error<sp/>happened<sp/>while<sp/>loading<sp/>the<sp/>features<sp/>into<sp/>memory.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]buffer;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>loadFeatures,<sp/><sp/>k:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;k&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nbSpikes<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nbSpikes&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nbDimensions<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nbDimensions&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>number<sp/>of<sp/>features<sp/>read<sp/>did<sp/>not<sp/>correspond<sp/>to<sp/>nbSpikes*nbDimensions,<sp/>there<sp/>is<sp/>a<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(k<sp/>!=<sp/>(nbSpikes<sp/>*<sp/>nbDimensions)){<sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>features<sp/>read<sp/>in<sp/>the<sp/>feature<sp/>file<sp/>does<sp/>not<sp/>correspond<sp/>to<sp/>number<sp/>of<sp/>spikes<sp/>times<sp/>the<sp/>number<sp/>of<sp/>dimensions.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">Data::initialize</ref>(FILE*<sp/>featureFile,FILE*<sp/>clusterFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_186310888eced8e33b0e1a87ca4b73226" kindref="member">loadClusters</ref>(clusterFile,spkFileLength,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_11778e2f260f69a61b483b20d283bcdfa" kindref="member">loadFeatures</ref>(featureFile,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>first<sp/>row<sp/>of<sp/>spikesByCluster<sp/>with<sp/>the<sp/>row<sp/>index<sp/>of<sp/>the<sp/>spike,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//knowing<sp/>that<sp/>for<sp/>the<sp/>moment<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>table<sp/>are<sp/>sorted<sp/>by<sp/>spike<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes;<sp/>++<sp/>i)<sp/>(*spikesByCluster)(1,i)<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>QMap&lt;dataType,dataType&gt;<sp/>clusters;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>max<sp/>=<sp/>nbSpikes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Count<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>for<sp/>each<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>max;<sp/>++i){</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>(*spikesByCluster)(2,i);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>clusters[clusterId]++;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>positions,<sp/>for<sp/>each<sp/>clusterId<sp/>the<sp/>value<sp/>is<sp/>set<sp/>to<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>cluster<sp/>user<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>clusters<sp/>will<sp/>be<sp/>sorted<sp/>by<sp/>clusterId<sp/>in<sp/>spikesByCluster.<sp/>Initialize<sp/>clusterInfoMap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>QMap&lt;dataType,dataType&gt;<sp/>positions;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>QMap&lt;dataType,dataType&gt;::Iterator<sp/><ref refid="classData_185adc3b2ca498fa8ddf9a69a42be2f17" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusters.begin();<sp/>iterator<sp/>!=<sp/>clusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>positions[clusterId]<sp/>=<sp/><sp/>index;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classClusterUserInformation" kindref="compound">ClusterUserInformation</ref><sp/>vClusterUserInformation<sp/>=<sp/>clusterUserInformationMap[static_cast&lt;int&gt;(clusterId)];<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMap-&gt;insert(clusterId,ClusterInfo(index,iterator.data(),vClusterUserInformation.<ref refid="classClusterUserInformation_15e19b94aecc283a66ed5571ccbcd3aa9" kindref="member">getStructure</ref>(),vClusterUserInformation.<ref refid="classClusterUserInformation_1f1356b991ec311513c4c104643072842" kindref="member">getType</ref>(),vClusterUserInformation.<ref refid="classClusterUserInformation_1158c59384e683d2423f5afe257232adc" kindref="member">getId</ref>(),vClusterUserInformation.<ref refid="classClusterUserInformation_1d7c7249b8e0f799a483b3870458ce22e" kindref="member">getQuality</ref>(),vClusterUserInformation.<ref refid="classClusterUserInformation_1f653336a6c9fa37e4e4afb4776a9cd4f" kindref="member">getNotes</ref>()));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>iterator.data();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>clusterUserInformationMap<sp/>which<sp/>only<sp/>ne<sp/>used<sp/>from<sp/>now<sp/>on<sp/>to<sp/>store<sp/>the<sp/>information<sp/>before<sp/>writting<sp/>it<sp/>to<sp/>the<sp/>xml<sp/>parameter<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterUserInformationMap.clear();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>tmp<sp/>with<sp/>the<sp/>data<sp/>sorted<sp/>by<sp/>cluster<sp/>and<sp/>by<sp/>time<sp/>(&lt;=&gt;<sp/>position<sp/>in<sp/>the<sp/>fet<sp/>file)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>max;<sp/>++i){</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>(*spikesByCluster)(2,i);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>position<sp/>=<sp/>positions[clusterId];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>positionInFet<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,position)<sp/>=<sp/>positionInFet;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(2,position)<sp/>=<sp/>clusterId;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>positions[clusterId]<sp/>++;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Delete<sp/>spikesByCluster<sp/>and<sp/>assign<sp/>to<sp/>the<sp/>pointer<sp/>the<sp/>value<sp/>of<sp/>spikesByClusterTemp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>spikesByCluster;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/>spikesByCluster<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/>spikesByCluster<sp/>=<sp/><sp/>spikesByClusterTemp;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>for<sp/>each<sp/>dimension<sp/>and<sp/>store<sp/>them<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dimensionMinima<sp/>and<sp/>dimensionMaxima<sp/>respectively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>modifiedClusters;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="classData_10a7f0270eb95e9b880a66406ff5b6e83" kindref="member">minMaxDimensionCalculation</ref>(modifiedClusters);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">Data::initialize</ref>(FILE*<sp/>featureFile,FILE*<sp/>clusterFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString<sp/>spkFileName,QFile&amp;<sp/>parXFile,QFile&amp;<sp/>parFile,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>this-&gt;spkFileName<sp/>=<sp/>spkFileName;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_164e73cfdb133d5090bdacc36aef30c15" kindref="member">configure</ref>(parXFile,<sp/>parFile,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">initialize</ref>(featureFile,clusterFile,spkFileLength,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">Data::initialize</ref>(FILE*<sp/>featureFile,FILE*<sp/>clusterFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString<sp/>spkFileName,QFile&amp;<sp/>parFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>electrodeGroupID,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>this-&gt;spkFileName<sp/>=<sp/>spkFileName;<sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_164e73cfdb133d5090bdacc36aef30c15" kindref="member">configure</ref>(parFile,electrodeGroupID,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">initialize</ref>(featureFile,clusterFile,spkFileLength,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">Data::initialize</ref>(FILE*<sp/>featureFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Determine<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>using<sp/>the<sp/>length<sp/>of<sp/>the<sp/>binary<sp/>spike<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleSize;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(nbBits){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>32:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleSize<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isTwoBytesRecording<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/></highlight><highlight class="comment">//not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errorInformation<sp/>=<sp/>i18n(</highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>bits<sp/>is<sp/>not<sp/>supported.&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>nbSpikes<sp/>=<sp/><sp/>spkFileLength<sp/>/<sp/>static_cast&lt;long&gt;(static_cast&lt;long&gt;(nbChannels)<sp/>*<sp/>static_cast&lt;long&gt;(nbSamplesInWaveform)<sp/>*<sp/>static_cast&lt;long&gt;(sampleSize));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>spikesByCluster-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//As<sp/>the<sp/>cluster<sp/>file<sp/>does<sp/>not<sp/>exist<sp/>assign<sp/>all<sp/>the<sp/>spikes<sp/>to<sp/>cluster<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes;<sp/>++<sp/>i)<sp/>(*spikesByCluster)(2,i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_11778e2f260f69a61b483b20d283bcdfa" kindref="member">loadFeatures</ref>(featureFile,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>the<sp/>first<sp/>row<sp/>of<sp/>spikesByCluster<sp/>with<sp/>the<sp/>row<sp/>index<sp/>of<sp/>the<sp/>spike,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//knowing<sp/>that<sp/>for<sp/>the<sp/>moment<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>table<sp/>are<sp/>sorted<sp/>by<sp/>spike<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes;<sp/>++<sp/>i)<sp/>(*spikesByCluster)(1,i)<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>clusterInfoMap-&gt;insert(1,<sp/>ClusterInfo(1,nbSpikes));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>for<sp/>each<sp/>dimension<sp/>and<sp/>store<sp/>them<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dimensionMinima<sp/>and<sp/>dimensionMaxima<sp/>respectively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>modifiedClusters;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="classData_10a7f0270eb95e9b880a66406ff5b6e83" kindref="member">minMaxDimensionCalculation</ref>(modifiedClusters);<sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">Data::initialize</ref>(FILE*<sp/>featureFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString<sp/>spkFileName,QFile&amp;<sp/>parXFile,QFile&amp;<sp/>parFile,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>this-&gt;spkFileName<sp/>=<sp/>spkFileName;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_164e73cfdb133d5090bdacc36aef30c15" kindref="member">configure</ref>(parXFile,<sp/>parFile,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">initialize</ref>(featureFile,spkFileLength,errorInformation)){</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">Data::initialize</ref>(FILE*<sp/>featureFile,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>spkFileLength,QString<sp/>spkFileName,QFile&amp;<sp/>parFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>electrodeGroupID,QString&amp;<sp/>errorInformation){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>this-&gt;spkFileName<sp/>=<sp/>spkFileName;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_164e73cfdb133d5090bdacc36aef30c15" kindref="member">configure</ref>(parFile,electrodeGroupID,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_159cca5e03f03923ec16838736fb37c53" kindref="member">initialize</ref>(featureFile,spkFileLength,errorInformation))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_10a7f0270eb95e9b880a66406ff5b6e83" kindref="member">Data::minMaxDimensionCalculation</ref>(QValueList&lt;int&gt;<sp/>modifiedClusters){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>an<sp/>undo<sp/>or<sp/>redo<sp/>has<sp/>started<sp/>or<sp/>the<sp/>cluster<sp/>0<sp/>has<sp/>been<sp/>changed<sp/>again,<sp/>do<sp/>not<sp/>do<sp/>any<sp/>calculation,<sp/>it<sp/>will<sp/>be<sp/>done<sp/>on<sp/>the<sp/>new<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(undoRedoInProcess<sp/>||<sp/>clusterZeroJustModified)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>mutex<sp/>protects<sp/>spikesByCluster<sp/>and<sp/>clusterInfoMap<sp/>so<sp/>that<sp/>only<sp/>one<sp/>thread<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//access<sp/>them<sp/>at<sp/>the<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>ClusterInfoMap<sp/>clusterInfoMapTemp;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>spikesByClusterTemp(*spikesByCluster);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapTemp.insert(iterator.key(),iterator.data());<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>dimensionMaximaTemp(nbDimensions,1);<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>dimensionMinimaTemp(nbDimensions,1);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>dataType<sp/>max,min;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersGivingMinimum.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbDimensions;<sp/>++i){</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>clustersGivingMinimum.append(0);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>clustersGivingMaximum.append(0);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>for<sp/>each<sp/>dimension<sp/>and<sp/>store<sp/>them<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dimensionMinima<sp/>and<sp/>dimensionMaxima<sp/>respectively.<sp/>The<sp/>cluster<sp/>0<sp/>is<sp/>not<sp/>taken<sp/>into<sp/>account.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension<sp/>=<sp/>1;<sp/>dimension&lt;nbDimensions;<sp/>++dimension){<sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>an<sp/>undo<sp/>or<sp/>redo<sp/>has<sp/>started<sp/>or<sp/>the<sp/>cluster<sp/>0<sp/>has<sp/>been<sp/>changed<sp/>again,<sp/>stop<sp/>the<sp/>calculation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(undoRedoInProcess<sp/>||<sp/>clusterZeroJustModified)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/>max<sp/>=<sp/>min<sp/>=<sp/>features(1,dimension);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>clusterIdMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>clusterIdMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(modifiedClusters.contains(clustersGivingMinimum[dimension<sp/>-<sp/>1])<sp/>||<sp/>modifiedClusters.contains(clustersGivingMaximum[dimension<sp/>-<sp/>1]))<sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!init<sp/>&amp;&amp;<sp/>!modifiedClusters.isEmpty()<sp/>&amp;&amp;<sp/>!modifiedClusters.contains(0)){</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionMinimaTemp(dimension,1)<sp/>=<sp/>dimensionMinima(dimension,1);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionMaximaTemp(dimension,1)<sp/>=<sp/>dimensionMaxima(dimension,1);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMapTemp.begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMapTemp.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>(lastPosition);++i){</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>spikePosition<sp/>=<sp/>spikesByClusterTemp(1,i);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>currentSpike<sp/>=<sp/>features(spikePosition,dimension);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSpike<sp/>&lt;<sp/>min){</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>currentSpike;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterIdMin<sp/>=<sp/>clusterId;<sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSpike<sp/>&gt;<sp/>max){</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterIdMax<sp/>=<sp/>clusterId;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>currentSpike;<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>an<sp/>undo<sp/>or<sp/>redo<sp/>has<sp/>started<sp/>or<sp/>the<sp/>cluster<sp/>0<sp/>has<sp/>been<sp/>changed<sp/>again,<sp/>stop<sp/>the<sp/>calculation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(undoRedoInProcess<sp/>||<sp/>clusterZeroJustModified)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionMinimaTemp(dimension,1)<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionMaximaTemp(dimension,1)<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>clustersGivingMinimum[dimension<sp/>-<sp/>1]<sp/>=<sp/>clusterIdMin;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>clustersGivingMaximum[dimension<sp/>-<sp/>1]<sp/>=<sp/>clusterIdMax;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>time<sp/>is<sp/>done<sp/>seperatly<sp/>because<sp/>the<sp/>minimum<sp/>is<sp/>the<sp/>first<sp/>spike<sp/>and<sp/>the<sp/>maximun<sp/>the<sp/>last<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>dimensionMinimaTemp(nbDimensions,1)<sp/>=<sp/>features(1,nbDimensions);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>dimensionMaximaTemp(nbDimensions,1)<sp/>=<sp/>features(nbSpikes,nbDimensions);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>dimensionMinima<sp/>and<sp/>dimensionMaxima</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>dimensionMaxima.setSize(nbDimensions,1);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>dimensionMinima.setSize(nbDimensions,1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i&lt;=nbDimensions;++i){</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/>dimensionMinima(i,1)<sp/>=<sp/>dimensionMinimaTemp(i,1);<sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/>dimensionMaxima(i,1)<sp/>=<sp/>dimensionMaximaTemp(i,1);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>minMaxDimensionCalculation<sp/>end&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">dataType<sp/><ref refid="classData_1ca425081a5a87a41f442f27114bd1e18" kindref="member">Data::createNewCluster</ref>(QRegion&amp;<sp/>region,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList<sp/>&lt;int&gt;&amp;<sp/>clustersOfOrigin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensionX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensionY,<sp/>QValueList<sp/>&lt;int&gt;&amp;<sp/>fromClusters,QValueList<sp/>&lt;int&gt;&amp;<sp/>emptyClusters){</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>new<sp/>cluster<sp/>number<sp/>to<sp/>the<sp/>biggest<sp/>existing<sp/>number<sp/>plus<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>dataType<sp/>newClusterId<sp/>=<sp/>(*spikesByCluster)(2,nbSpikes)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInNewCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>last<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>cluster<sp/>contributing<sp/>to<sp/>the<sp/>new<sp/>cluster.<sp/>This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>lastPositions;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>nbOfspikes;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>dataType<sp/>lowerInsertionIndex<sp/>=<sp/>nbSpikes;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>clustersOfOrigin<sp/>does<sp/>not<sp/>contains<sp/>the<sp/>current<sp/>cluster,<sp/>this<sp/>cluster<sp/>is<sp/>let<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>its<sp/>information<sp/>is<sp/>simply<sp/>copy<sp/>as<sp/>is<sp/>from<sp/>spikesByCluster<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersOfOrigin.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>deal<sp/>with<sp/>the<sp/>clusters<sp/>which<sp/>may<sp/>contain<sp/>spikes<sp/>to<sp/>add<sp/>to<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;=&gt;<sp/>spike<sp/>in<sp/>the<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>last<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastPositions.append(nbSpikesInNewCluster<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>updatedClusterPosition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>existUntouchSpike<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>newNbSpikesOfCluster<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPositionLessOne<sp/>=<sp/><sp/>lastPosition<sp/>-1;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>static_cast&lt;dataType&gt;((*spikesByCluster)(1,i));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.contains(</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPoint(static_cast&lt;dataType&gt;(features(featuresRowIndex,dimensionX)),</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;dataType&gt;(features(featuresRowIndex,dimensionY))))){</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>spike<sp/>to<sp/>the<sp/>new<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>at<sp/>the<sp/>end<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>lowerInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,lowerInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--lowerInsertionIndex;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbSpikesInNewCluster;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--newNbSpikesOfCluster;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>position<sp/>of<sp/>this<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(existUntouchSpike){</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>existUntouchSpike<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updatedClusterPosition<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Keep<sp/>the<sp/>spike<sp/>in<sp/>the<sp/>current<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>and<sp/>the<sp/>cluster<sp/>number<sp/>at<sp/>the<sp/>top<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>upperInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,upperInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(2,upperInsertionIndex)<sp/>=<sp/>(*spikesByCluster)(2,i);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++upperInsertionIndex;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>(lastPositionLessOne)){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&lt;<sp/>nbSpikesOfCluster){</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster<sp/>-<sp/>newNbSpikesOfCluster);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>fromClusters<sp/>if<sp/>at<sp/>least<sp/>one<sp/>spike<sp/>from<sp/>that<sp/>cluster<sp/>was<sp/>in<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fromClusters.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//No<sp/>spike<sp/>has<sp/>been<sp/>move<sp/>to<sp/>the<sp/>new<sp/>cluster,<sp/>remove<sp/>the<sp/>last<sp/>entry<sp/>in<sp/>lastPositions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>lastPositions.pop_back();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>current<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>is<sp/>more<sp/>than<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&gt;0)clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(updatedClusterPosition,newNbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>emptyClusters.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>some<sp/>spikes<sp/>have<sp/>been<sp/>taken<sp/>from<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>clusterZeroJustModified<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inform<sp/>it<sp/>that<sp/>it<sp/>has<sp/>to<sp/>stop<sp/>(the<sp/>computation<sp/>will<sp/>be<sp/>done<sp/>again<sp/>on<sp/>the<sp/>new<sp/>data).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fromClusters.contains(0))<sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>dataType<sp/>startInsertion<sp/>=<sp/><sp/>lowerInsertionIndex<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbSpikesInNewCluster;++i)<sp/>(*spikesByClusterTemp)(2,startInsertion<sp/>+<sp/>i)<sp/>=<sp/>newClusterId;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpikesInNewCluster<sp/>&gt;<sp/>0){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(newClusterId,ClusterInfo(lowerInsertionIndex<sp/>+<sp/>1,nbSpikesInNewCluster));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>sortCluster(clusterInfoMapTemp,spikesByClusterTemp,newClusterId,lastPositions,nbOfspikes,-1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>some<sp/>spikes<sp/>have<sp/>been<sp/>taken<sp/>from<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>the<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//will<sp/>wait<sp/>until<sp/>it<sp/>finishes<sp/>before<sp/>starting<sp/>the<sp/>thread<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fromClusters.contains(0)){</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(fromClusters);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>clusters<sp/>which<sp/>gave<sp/>the<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>fromClusters.begin();<sp/>iterator<sp/>!=<sp/>fromClusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*iterator)){</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*iterator].isInProcess()){<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*iterator);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*iterator];</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*iterator,waveformStatusCopy);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*iterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*iterator),currentClusterList);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*iterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newClusterId;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>0<sp/>if<sp/>no<sp/>new<sp/>cluster<sp/>have<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//safe<sp/>as<sp/>cluster<sp/>0<sp/>(artifact)<sp/>can<sp/>never<sp/>be<sp/>created<sp/>that<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal">QMap&lt;int,int&gt;<sp/><ref refid="classData_1f15efbe824cf8f15cf1a75e90f2a8272" kindref="member">Data::createNewClusters</ref>(QRegion&amp;<sp/>region,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList<sp/>&lt;int&gt;&amp;<sp/>clustersOfOrigin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensionX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensionY,QValueList<sp/>&lt;int&gt;&amp;<sp/>emptyClusters){</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>QMap&lt;int,int&gt;<sp/>fromToClusterIds;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>QMap&lt;int,int&gt;<sp/>fromToNewClusterIds;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>ClusterInfoMap<sp/>clusterInfoMapTemp;<sp/></highlight><highlight class="comment">//used<sp/>in<sp/>the<sp/>first<sp/>part<sp/>of<sp/>the<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbNewClusters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbMaxNewClusters<sp/>=<sp/>clustersOfOrigin.size();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>new<sp/>cluster<sp/>number<sp/>to<sp/>the<sp/>biggest<sp/>existing<sp/>number<sp/>plus<sp/>nbMaxNewClusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>number<sp/>will<sp/>be<sp/>decremented<sp/>before<sp/>being<sp/>used,<sp/>and<sp/>the<sp/>number<sp/>will<sp/>be<sp/>corrected<sp/>at<sp/>the<sp/>end<sp/>once<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//number<sp/>of<sp/>really<sp/>created<sp/>clusters<sp/>will<sp/>be<sp/>known<sp/>(the<sp/>biggest<sp/>clusterId<sp/>is<sp/>store<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>spikesByClusterTemp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>dataType<sp/>newClusterId<sp/>=<sp/>(*spikesByCluster)(2,nbSpikes)<sp/>+<sp/>nbMaxNewClusters;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>cluster<sp/>contributing<sp/>to<sp/>a<sp/>new<sp/>cluster.<sp/>This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>QValueList&lt;<sp/>QValueList&lt;dataType&gt;<sp/>&gt;<sp/>firstPositions;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>QValueList&lt;<sp/>QValueList&lt;dataType&gt;<sp/>&gt;<sp/>nbOfspikes;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>dataType<sp/>lowerInsertionIndex<sp/>=<sp/>nbSpikes;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>clustersOfOrigin<sp/>does<sp/>not<sp/>contains<sp/>the<sp/>current<sp/>cluster,<sp/>this<sp/>cluster<sp/>is<sp/>let<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>its<sp/>information<sp/>is<sp/>simply<sp/>copy<sp/>as<sp/>is<sp/>from<sp/>spikesByCluster<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersOfOrigin.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp.insert(clusterId,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>deal<sp/>with<sp/>the<sp/>clusters<sp/>which<sp/>may<sp/>contain<sp/>spikes<sp/>to<sp/>add<sp/>to<sp/>a<sp/>new<sp/>cluster<sp/>&lt;=&gt;<sp/>spike<sp/>in<sp/>the<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>a<sp/>cluster<sp/>contain<sp/>spikes<sp/>in<sp/>the<sp/>region,<sp/>a<sp/>new<sp/>cluster<sp/>is<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesInNewCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>updatedClusterPosition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>existUntouchSpike<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>newNbSpikesOfCluster<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPositionLessOne<sp/>=<sp/><sp/>lastPosition<sp/>-1;<sp/><sp/></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>last<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>the<sp/>new<sp/>cluster<sp/>contributing<sp/>to<sp/>the<sp/>new<sp/>cluster.<sp/>This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentFirstPositions;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentNbOfspikes;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>last<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>current<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>currentFirstPositions.append(1);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.contains(</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPoint(features(featuresRowIndex,dimensionX),</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features(featuresRowIndex,dimensionY)))){</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>spike<sp/>to<sp/>the<sp/>new<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>at<sp/>the<sp/>end<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>lowerInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,lowerInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--lowerInsertionIndex;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbSpikesInNewCluster;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNbSpikesOfCluster<sp/>--;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>position<sp/>of<sp/>this<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(existUntouchSpike){</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>existUntouchSpike<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updatedClusterPosition<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Keep<sp/>the<sp/>spike<sp/>in<sp/>the<sp/>current<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>and<sp/>the<sp/>cluster<sp/>number<sp/>at<sp/>the<sp/>top<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>upperInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,upperInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(2,upperInsertionIndex)<sp/>=<sp/>(*spikesByCluster)(2,i);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++upperInsertionIndex;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>(lastPositionLessOne)){</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>current<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>is<sp/>more<sp/>than<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>the<sp/>spikes<sp/>back<sp/>to<sp/>spikesByCluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&gt;<sp/>0){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp.insert(clusterId,ClusterInfo(updatedClusterPosition,newNbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>emptyClusters.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>at<sp/>least<sp/>one<sp/>spike<sp/>from<sp/>that<sp/>cluster<sp/>was<sp/>in<sp/>the<sp/>region,<sp/>a<sp/>new<sp/>cluster<sp/>will<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpikesInNewCluster<sp/>&gt;<sp/>0){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentNbOfspikes.append(nbSpikesInNewCluster);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>to<sp/>later<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstPositions.append(currentFirstPositions);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.append(currentNbOfspikes);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbNewClusters;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>fromToClusterIds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fromToClusterIds.insert(static_cast&lt;int&gt;(clusterId),static_cast&lt;int&gt;(newClusterId));</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>cluster<sp/>with<sp/>a<sp/>temporarily<sp/>clusterId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp.insert(newClusterId,ClusterInfo(lowerInsertionIndex<sp/>+<sp/>1,nbSpikesInNewCluster));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//decrement<sp/>the<sp/>cluster<sp/>id<sp/>for<sp/>the<sp/>next<sp/>cluster<sp/>to<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--newClusterId;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>some<sp/>spikes<sp/>have<sp/>been<sp/>taken<sp/>from<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>clusterZeroJustModified<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inform<sp/>it<sp/>that<sp/>it<sp/>has<sp/>to<sp/>stop<sp/>(the<sp/>computation<sp/>will<sp/>be<sp/>done<sp/>again<sp/>on<sp/>the<sp/>new<sp/>data).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fromToClusterIds.contains(0))<sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap(clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>information<sp/>on<sp/>the<sp/>new<sp/>clusters,renumber<sp/>them<sp/>with<sp/>the<sp/>good<sp/>number<sp/>now<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>know<sp/>how<sp/>many<sp/>clusters<sp/>have<sp/>been<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbNewClusters<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/><sp/>nbMaxNewClusters<sp/>-<sp/>nbNewClusters;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>keys<sp/>=<sp/>fromToClusterIds.keys();</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>fromToClusterIds<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>keys.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i){</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldCluster<sp/>=<sp/>keys[i];</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterToCreate<sp/>=<sp/>fromToClusterIds[oldCluster];</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newClusterId<sp/>=<sp/>clusterToCreate<sp/>-<sp/>shift;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fromToNewClusterIds.insert(oldCluster,newClusterId);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClusterInfo<sp/>clusterInfo<sp/>=<sp/>clusterInfoMapTemp[clusterToCreate];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>clusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>clusterInfo.nbSpikes();<sp/></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp2-&gt;remove(clusterToCreate);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp2-&gt;insert(newClusterId,clusterInfo);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbSpikesOfCluster;++i)<sp/>(*spikesByClusterTemp)(2,firstSpikePosition<sp/>+<sp/>i)<sp/>=<sp/>newClusterId;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>clusters,<sp/>the<sp/>information<sp/>to<sp/>do<sp/>so<sp/>have<sp/>been<sp/>store<sp/>in<sp/>the<sp/>2<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//firstPositions<sp/>and<sp/>nbOfspikes<sp/>by<sp/>increasing<sp/>Id<sp/>of<sp/>the<sp/>cluster<sp/>of<sp/>origin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key,<sp/>here<sp/>from<sp/>fromToNewClusterIds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>QMap&lt;int,int&gt;::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>fromToNewClusterIds.begin();<sp/>iterator<sp/>!=<sp/>fromToNewClusterIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sortCluster(clusterInfoMapTemp2,spikesByClusterTemp,iterator.data(),firstPositions[i],nbOfspikes[i],-1);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp2);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>some<sp/>spikes<sp/>have<sp/>been<sp/>taken<sp/>from<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>the<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//will<sp/>wait<sp/>until<sp/>it<sp/>finishes<sp/>before<sp/>starting<sp/>the<sp/>thread<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fromToNewClusterIds.contains(0)){</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(fromToNewClusterIds.keys());</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>clusters<sp/>which<sp/>gave<sp/>the<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>QMap&lt;int,int&gt;::Iterator<sp/>fromToNewClusterIdsIterator;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(fromToNewClusterIdsIterator<sp/>=<sp/>fromToNewClusterIds.begin();<sp/>fromToNewClusterIdsIterator<sp/>!=<sp/>fromToNewClusterIds.end();<sp/>++fromToNewClusterIdsIterator){</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId<sp/>=<sp/>fromToNewClusterIdsIterator.key();<sp/></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(clusterId)){</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[clusterId].isInProcess()){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterId));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[clusterId];</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(clusterId,waveformStatusCopy);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(clusterId)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(clusterId),currentClusterList);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(clusterId),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fromToNewClusterIds;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/>The<sp/>deletion<sp/>of<sp/>spikes<sp/>from<sp/>a<sp/>cluster<sp/>means<sp/>moving<sp/>those<sp/>spikes<sp/>from<sp/>a<sp/>given<sp/>cluster</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/>to<sp/>either<sp/>the<sp/>cluster<sp/>0<sp/>or<sp/>the<sp/>cluster<sp/>one.</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/><sp/>The<sp/>main<sp/>algorithm<sp/>is<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/>Create<sp/>a<sp/>temporarily<sp/>spikesByClusterTemp<sp/>and<sp/>clusterInfoMapTemp<sp/>where<sp/>the<sp/>new<sp/>configuration<sp/>will<sp/>be<sp/>store</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/>If<sp/>possible<sp/>copy<sp/>the<sp/>cluster<sp/>0<sp/>and<sp/>the<sp/>destination<sp/>cluster<sp/>into<sp/>the<sp/>temporarily<sp/>variables.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/>Loop<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>id<sp/>in<sp/>decreasing<sp/>order,<sp/>except<sp/>the<sp/>cluster<sp/>0<sp/>and<sp/>the<sp/>destination<sp/>cluster<sp/>(if<sp/>it<sp/>is<sp/>the<sp/>cluster<sp/>1).</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/>If<sp/>the<sp/>cluster<sp/>is<sp/>not<sp/>concern<sp/>(not<sp/>currently<sp/>in<sp/>the<sp/>view)<sp/>copy<sp/>it<sp/>as<sp/>it<sp/>is.<sp/>Otherwise<sp/>loop<sp/>on<sp/>each<sp/>of<sp/>its<sp/>spike</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/>to<sp/>test<sp/>if<sp/>it<sp/>is<sp/>in<sp/>the<sp/>region,<sp/>if<sp/>so<sp/>copy<sp/>it<sp/>a<sp/>the<sp/>top<sp/>of<sp/>spikesByClusterTemp<sp/>(where<sp/>the<sp/>destination<sp/>cluster<sp/>is<sp/>beeing<sp/>build)</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/>otherwise,<sp/>copy<sp/>it<sp/>at<sp/>the<sp/>bottom.<sp/>Create<sp/>the<sp/>entry<sp/>of<sp/>the<sp/>current<sp/>cluster<sp/>into<sp/>clusterInfoMapTemp</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/>Create<sp/>the<sp/>entry<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>destination<sp/>into<sp/>clusterInfoMapTemp</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/>There<sp/>are<sp/>special<sp/>cases<sp/>which<sp/>have<sp/>to<sp/>be<sp/>taken<sp/>into<sp/>account:</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/>Cluster<sp/>0<sp/>or<sp/>cluster<sp/>1<sp/>does<sp/>not<sp/>exist.</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/>Cluster<sp/>one<sp/>is<sp/>the<sp/>destination<sp/>and<sp/>cluster<sp/>0<sp/>can<sp/>contain<sp/>spikes<sp/>to<sp/>be<sp/>deleted.</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_1f589304b761299662cb72c4ae8356076" kindref="member">Data::deleteSpikesFromClusters</ref>(QRegion&amp;<sp/>region,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QValueList<sp/>&lt;int&gt;&amp;<sp/>clustersOfOrigin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destinationCluster,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensionX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensionY,<sp/>QValueList<sp/>&lt;int&gt;&amp;<sp/>fromClusters,QValueList<sp/>&lt;int&gt;&amp;<sp/>emptyClusters){</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>last<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>cluster<sp/>contributing<sp/>to<sp/>the<sp/>new<sp/>cluster<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike<sp/>and<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>spikes<sp/>for<sp/>the<sp/>current<sp/>cluster<sp/>destination<sp/>(cluster<sp/>0<sp/>or<sp/>cluster<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>nbOfspikes;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>dataType<sp/>firstPosition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>dataType<sp/>number<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>dataType<sp/>lowerInsertionIndex<sp/>=<sp/>nbSpikes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInNewCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>dataType<sp/>nbNewSpikesInNewCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>dataType<sp/>lastSpikePositionForCurrentClusterPlus1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>dataType<sp/>firstSpikePositionForNewCluster<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//First<sp/>process<sp/>the<sp/>case<sp/>of<sp/>cluster<sp/>zero<sp/>and<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Zero<sp/>has<sp/>to<sp/>be<sp/>take<sp/>care<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(destinationCluster<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>cluster<sp/>0<sp/>as<sp/>it<sp/>is<sp/>if<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(0)){</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[0];</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>first<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firstPosition<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster<sp/>one<sp/>with<sp/>the<sp/>information<sp/>coming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//from<sp/>the<sp/>current<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firstSpikePositionForNewCluster<sp/>=<sp/>firstSpikePosition;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesInNewCluster<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterPlus1<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(destinationCluster<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(0)){</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[0];</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>the<sp/>cluster<sp/>0<sp/>as<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersOfOrigin.contains(0)){</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(0,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike<sp/>of<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firstSpikePositionForNewCluster<sp/>=<sp/>nbSpikesOfCluster<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>points<sp/>which<sp/>are<sp/>not<sp/>in<sp/>the<sp/>region<sp/>at<sp/>the<sp/>top<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>points<sp/>which<sp/>are<sp/>in<sp/>the<sp/>region<sp/>at<sp/>a<sp/>lower<sp/>index<sp/>starting<sp/>at<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>of<sp/>the<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>newNbSpikesOfCluster<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>zeroLowerInsertionIndex<sp/>=<sp/><sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPositionLessOne<sp/>=<sp/><sp/>lastPosition<sp/>-1;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.contains(</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPoint(features(featuresRowIndex,dimensionX),</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features(featuresRowIndex,dimensionY)))){</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>spike<sp/>to<sp/>the<sp/>new<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>at<sp/>the<sp/>end<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>lowerInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,zeroLowerInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--zeroLowerInsertionIndex;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbSpikesInNewCluster;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbNewSpikesInNewCluster;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--newNbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Keep<sp/>the<sp/>spike<sp/>in<sp/>the<sp/>current<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>and<sp/>the<sp/>cluster<sp/>number<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>lowerInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,upperInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(2,upperInsertionIndex)<sp/>=<sp/>(*spikesByCluster)(2,i);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++upperInsertionIndex;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>(lastPositionLessOne)){<sp/><sp/></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&lt;<sp/>nbSpikesOfCluster){</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>last<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positions.append(nbSpikesOfCluster<sp/>-<sp/>newNbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster<sp/>-<sp/>newNbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>fromClusters<sp/>if<sp/>at<sp/>least<sp/>one<sp/>spike<sp/>from<sp/>cluster<sp/>0<sp/>was<sp/>in<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fromClusters.append(0);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>current<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>is<sp/>more<sp/>than<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&gt;0)clusterInfoMapTemp-&gt;insert(0,ClusterInfo(1,newNbSpikesOfCluster));</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>emptyClusters.append(0);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>coming<sp/>from<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbNewSpikesInNewCluster;++i)<sp/>(*spikesByClusterTemp)(2,upperInsertionIndex<sp/>+<sp/>i)<sp/>=<sp/>destinationCluster;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>firstSpikePositionForNewCluster<sp/>=<sp/><sp/>upperInsertionIndex;</highlight><highlight class="comment">//when<sp/>the<sp/>last<sp/>spike<sp/>has<sp/>been<sp/>tested<sp/>upperInsertionIndex<sp/>=<sp/><sp/>zeroLowerInsertionIndex+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterPlus1<sp/>=<sp/>upperInsertionIndex<sp/>=<sp/>firstSpikePositionForNewCluster<sp/>+<sp/>nbSpikesInNewCluster;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reset<sp/>nbNewSpikesInNewCluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbNewSpikesInNewCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>of<sp/>exists<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(1)){</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[1];</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>first<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>firstPosition<sp/>=<sp/>nbSpikesInNewCluster<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>number<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>new<sp/>cluster<sp/>one<sp/>with<sp/>the<sp/>information<sp/>coming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//from<sp/>the<sp/>current<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSpikesInNewCluster<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterPlus1<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/></highlight><highlight class="comment">//process<sp/>all<sp/>the<sp/>other<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters<sp/>in<sp/>decreasing<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>clusters<sp/>=<sp/>clusterInfoMap-&gt;keys();</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>qHeapSort(clusters);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbClusters<sp/>=<sp/>clusters.size();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nbClusters<sp/>-<sp/>1;<sp/>i<sp/>&gt;=0<sp/>;<sp/>--i){</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>clusters[i];</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>destinationCluster<sp/>||<sp/>clusterId<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>(*clusterInfoMap)[clusterId].firstSpikePosition();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>(*clusterInfoMap)[clusterId].nbSpikes();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>user<sp/>information<sp/>of<sp/>the<sp/>different<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/>structure<sp/>=<sp/>(*clusterInfoMap)[clusterId].getStructure();</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/><sp/>type<sp/>=<sp/>(*clusterInfoMap)[clusterId].getType();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/><sp/>iD<sp/>=<sp/>(*clusterInfoMap)[clusterId].getId();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/><sp/>quality<sp/>=<sp/>(*clusterInfoMap)[clusterId].getQuality();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/><sp/>notes<sp/>=<sp/>(*clusterInfoMap)[clusterId].getNotes();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>clustersOfOrigin<sp/>does<sp/>not<sp/>contains<sp/>the<sp/>current<sp/>cluster,<sp/>this<sp/>cluster<sp/>is<sp/>let<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>its<sp/>information<sp/>is<sp/>simply<sp/>copy<sp/>as<sp/>is<sp/>from<sp/>spikesByCluster<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersOfOrigin.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lowerInsertionIndex<sp/>-=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,lowerInsertionIndex),</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,lowerInsertionIndex),</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(lowerInsertionIndex,nbSpikesOfCluster,structure,type,iD,quality,notes));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>deal<sp/>with<sp/>the<sp/>clusters<sp/>which<sp/>may<sp/>contain<sp/>spikes<sp/>to<sp/>add<sp/>to<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;=&gt;<sp/>spike<sp/>in<sp/>the<sp/>region.<sp/>Look<sp/>up<sp/>the<sp/>spikes<sp/>staring<sp/>from<sp/>the<sp/>last<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>newNbSpikesOfCluster<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>lastPosition;--i){</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.contains(</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPoint(features(featuresRowIndex,dimensionX),</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features(featuresRowIndex,dimensionY)))){</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>spike<sp/>to<sp/>the<sp/>new<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>at<sp/>the<sp/>end<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>lowerInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,upperInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++upperInsertionIndex;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbSpikesInNewCluster;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbNewSpikesInNewCluster;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--newNbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Keep<sp/>the<sp/>spike<sp/>in<sp/>the<sp/>current<sp/>cluster<sp/>&lt;=&gt;<sp/>add<sp/>the<sp/>row<sp/>index<sp/>and<sp/>the<sp/>cluster<sp/>number<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>spikesByCluster<sp/>at<sp/>the<sp/>lowerInsertionIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--lowerInsertionIndex;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(1,lowerInsertionIndex)<sp/>=<sp/>featuresRowIndex;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*spikesByClusterTemp)(2,lowerInsertionIndex)<sp/>=<sp/>(*spikesByCluster)(2,i);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>(firstSpikePosition)){</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&lt;<sp/>nbSpikesOfCluster){</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>last<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positions.append(nbSpikesInNewCluster);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster<sp/>-<sp/>newNbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>destination<sp/>cluster<sp/>is<sp/>cluster<sp/>0,the<sp/>max<sp/>and<sp/>min<sp/>dimensions<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>clusterZeroJustModified<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//inform<sp/>it<sp/>that<sp/>it<sp/>has<sp/>to<sp/>stop<sp/>(the<sp/>computation<sp/>will<sp/>be<sp/>done<sp/>again<sp/>on<sp/>the<sp/>new<sp/>data).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(destinationCluster<sp/>==<sp/>0)<sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>fromClusters<sp/>if<sp/>at<sp/>least<sp/>one<sp/>spike<sp/>from<sp/>that<sp/>cluster<sp/>was<sp/>in<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fromClusters.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>current<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>is<sp/>more<sp/>than<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbSpikesOfCluster<sp/>&gt;0)clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(lowerInsertionIndex,newNbSpikesOfCluster,structure,type,iD,quality,notes));</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>emptyClusters.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbNewSpikesInNewCluster;++i)<sp/>(*spikesByClusterTemp)(2,lastSpikePositionForCurrentClusterPlus1<sp/>+<sp/>i)<sp/>=<sp/>destinationCluster;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpikesInNewCluster<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersOfOrigin.contains(destinationCluster)){</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>fromClusters<sp/>for<sp/>the<sp/>cluster<sp/>destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fromClusters.append(destinationCluster);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(destinationCluster,ClusterInfo(firstSpikePositionForNewCluster,nbSpikesInNewCluster));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>sortCluster(clusterInfoMapTemp,spikesByClusterTemp,destinationCluster,positions,nbOfspikes,firstPosition,number);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>spikes<sp/>have<sp/>been<sp/>sent<sp/>to<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>the<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//will<sp/>wait<sp/>until<sp/>it<sp/>finishes<sp/>before<sp/>starting<sp/>the<sp/>thread<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(destinationCluster<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(fromClusters);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>clusters<sp/>which<sp/>gave<sp/>the<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,<sp/>otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>fromClusters.begin();<sp/>iterator<sp/>!=<sp/>fromClusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*iterator)){</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*iterator].isInProcess()){<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*iterator);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*iterator];</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*iterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*iterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*iterator),currentClusterList);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*iterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_127c9d33b69ed05b579ba18dffc61bd8f" kindref="member">Data::moveClustersToArtefact</ref>(QValueList<sp/>&lt;int&gt;&amp;<sp/>clustersToDelete){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>clustersToDelete<sp/>is<sp/>not<sp/>empty,<sp/>the<sp/>cluster<sp/>0<sp/>will<sp/>be<sp/>modified<sp/>and<sp/>the<sp/>max<sp/>and<sp/>min<sp/>dimensions<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>clusterZeroJustModified<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inform<sp/>it<sp/>that<sp/>it<sp/>has<sp/>to<sp/>stop<sp/>(the<sp/>computation<sp/>will<sp/>be<sp/>done<sp/>again<sp/>on<sp/>the<sp/>new<sp/>data).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToDelete.size()<sp/>!=<sp/>0)<sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>cluster<sp/>contributing<sp/>to<sp/>the<sp/>new<sp/>cluster.<sp/>This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>nbOfspikes;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>0<sp/>exits<sp/>copy<sp/>the<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInNewClusterZero;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInCurrentClusterZero;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>dataType<sp/>lastSpikePositionForCurrentClusterZeroPlus1;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(0)){</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[0];</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster<sp/>0<sp/>with<sp/>the<sp/>information<sp/>coming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//from<sp/>the<sp/>current<sp/>one<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSpikesInNewClusterZero<sp/>=<sp/>nbSpikesInCurrentClusterZero<sp/>=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterZeroPlus1<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>first<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>original<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>positions.append(1);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>original<sp/>cluster<sp/>0v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cluster<sp/>0<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSpikesInNewClusterZero<sp/>=<sp/>nbSpikesInCurrentClusterZero<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterZeroPlus1<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Move<sp/>the<sp/>clusters<sp/>contain<sp/>in<sp/>clustersToDelete<sp/>to<sp/>cluster<sp/>0<sp/>and<sp/>leave<sp/>the<sp/>others<sp/>as<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>moveClusters(clustersToDelete,spikesByClusterTemp,clusterInfoMapTemp,upperInsertionIndex,nbSpikesInNewClusterZero,0,positions,nbOfspikes);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster<sp/>0,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>new<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>dataType<sp/>nbNewSpikesInClusterZero<sp/>=<sp/>nbSpikesInNewClusterZero<sp/>-<sp/>nbSpikesInCurrentClusterZero;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbNewSpikesInClusterZero;++i)<sp/>(*spikesByClusterTemp)(2,lastSpikePositionForCurrentClusterZeroPlus1<sp/>+<sp/>i)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>entry<sp/>for<sp/>cluster<sp/>0<sp/>in<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>clusterInfoMapTemp-&gt;insert(0,ClusterInfo(1,nbSpikesInNewClusterZero));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>sortCluster(clusterInfoMapTemp,spikesByClusterTemp,0,positions,nbOfspikes,1,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>max<sp/>and<sp/>min<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;wait<sp/>for<sp/>minMaxThread<sp/>to<sp/>finish&quot;</highlight><highlight class="normal">&lt;&lt;endl;};</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(clustersToDelete);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>clusters<sp/>which<sp/>gave<sp/>the<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,<sp/>otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clustersToDelete.begin();<sp/>iterator<sp/>!=<sp/>clustersToDelete.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*iterator)){</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*iterator].isInProcess()){<sp/><sp/></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*iterator);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*iterator];</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*iterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*iterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*iterator),currentClusterList);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*iterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>cluster<sp/>0<sp/>if<sp/>clustersToDelete<sp/>is<sp/>not<sp/>empty<sp/>&lt;=&gt;<sp/>cluster<sp/>0<sp/>will<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>it,<sp/>otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersToDelete.empty()){</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[0].isInProcess()){<sp/></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformDict.remove(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformStatusMap.remove(0);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[0];</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformStatusMap.insert(0,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(0))<sp/>cleanCorrelation(0,currentClusterList);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_114dcb35c0d9ed3d697fd4e5d05281977" kindref="member">Data::moveClustersToNoise</ref>(QValueList&lt;int&gt;&amp;<sp/>clustersToDelete){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>clustersToDelete<sp/>contains<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min<sp/>dimensions<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>clusterZeroJustModified<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inform<sp/>it<sp/>that<sp/>it<sp/>has<sp/>to<sp/>stop<sp/>(the<sp/>computation<sp/>will<sp/>be<sp/>done<sp/>again<sp/>on<sp/>the<sp/>new<sp/>data).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToDelete.contains(0))<sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>cluster<sp/>contributing<sp/>to<sp/>the<sp/>new<sp/>cluster.<sp/>This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>nbOfspikes;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>0<sp/>exists<sp/>and<sp/>is<sp/>not<sp/>a<sp/>cluster<sp/>to<sp/>delete,<sp/>copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>cluster<sp/>1<sp/>exists<sp/>copy<sp/>the<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>max;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(0)<sp/>&amp;&amp;<sp/>!clustersToDelete.contains(0))<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(1))<sp/>max<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>dataType<sp/>firstSpikePosition;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i&lt;max;++i){</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[i];</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap,<sp/>the<sp/>entry<sp/>for<sp/>cluster<sp/>1<sp/>will<sp/>be<sp/>updated<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(i,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>on<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>original<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>first<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>the<sp/>original<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>positions.append(1);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>original<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster<sp/>one<sp/>with<sp/>the<sp/>information<sp/>coming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//from<sp/>the<sp/>current<sp/>one<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInNewClusterOne;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInCurrentClusterOne;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>dataType<sp/>lastSpikePositionForCurrentClusterOnePlus1;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSpikesInNewClusterOne<sp/>=<sp/>nbSpikesInCurrentClusterOne<sp/>=<sp/>nbSpikesOfCluster;<sp/></highlight><highlight class="comment">//nbSpikesOfCluster<sp/>currently<sp/>contents<sp/>the<sp/>info<sp/>for<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterOnePlus1<sp/>=<sp/>upperInsertionIndex;<sp/></highlight><highlight class="comment">//upperInsertionIndex<sp/>currently<sp/>contents<sp/>the<sp/>info<sp/>for<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//max<sp/>==<sp/>1<sp/>&lt;=&gt;<sp/>cluster<sp/>1<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSpikesInNewClusterOne<sp/>=<sp/>nbSpikesInCurrentClusterOne<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSpikePositionForCurrentClusterOnePlus1<sp/>=<sp/>upperInsertionIndex;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap,<sp/>the<sp/>entry<sp/>for<sp/>cluster<sp/>1<sp/>will<sp/>be<sp/>updated<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(1,ClusterInfo(upperInsertionIndex,nbSpikesInNewClusterOne));</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Move<sp/>the<sp/>clusters<sp/>contain<sp/>in<sp/>clustersToDelete<sp/>to<sp/>cluster<sp/>1<sp/>and<sp/>leave<sp/>the<sp/>others<sp/>as<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>moveClusters(clustersToDelete,spikesByClusterTemp,clusterInfoMapTemp,upperInsertionIndex,nbSpikesInNewClusterOne,1,positions,nbOfspikes);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster<sp/>1,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>new<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>dataType<sp/>nbNewSpikesInClusterOne<sp/>=<sp/>nbSpikesInNewClusterOne<sp/>-<sp/>nbSpikesInCurrentClusterOne;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbNewSpikesInClusterOne;++i)<sp/>(*spikesByClusterTemp)(2,lastSpikePositionForCurrentClusterOnePlus1<sp/>+<sp/>i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>new<sp/>clusterInfoMap<sp/>for<sp/>the<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>ClusterInfo<sp/>clusterOneInfo<sp/>=<sp/>(*clusterInfoMapTemp)[1];</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>clusterOneInfo.setNbSpikes(nbSpikesInNewClusterOne);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>clusterInfoMapTemp-&gt;insert(1,clusterOneInfo);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>sortCluster(clusterInfoMapTemp,spikesByClusterTemp,1,positions,nbOfspikes,1,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>max<sp/>and<sp/>min<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToDelete.contains(0)){</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;wait<sp/>for<sp/>minMaxThread<sp/>to<sp/>finish&quot;</highlight><highlight class="normal">&lt;&lt;endl;<sp/>};</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>modifiedClusters;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(modifiedClusters);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>clusters<sp/>which<sp/>gave<sp/>the<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,<sp/>otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clustersToDelete.begin();<sp/>iterator<sp/>!=<sp/>clustersToDelete.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*iterator)){</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*iterator].isInProcess()){<sp/></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*iterator);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*iterator];</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*iterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*iterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*iterator),currentClusterList);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*iterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>cluster<sp/>1<sp/>if<sp/>clustersToDelete<sp/>is<sp/>not<sp/>empty<sp/>&lt;=&gt;<sp/>cluster<sp/>1<sp/>will<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>it,<sp/>otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersToDelete.empty()){</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[1].isInProcess()){<sp/></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformDict.remove(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformStatusMap.remove(1);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[1];</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>waveformStatusMap.insert(1,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(1))<sp/>cleanCorrelation(1,currentClusterList);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(1,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal">dataType<sp/><ref refid="classData_13cde887238b043350882943481e4ac16" kindref="member">Data::groupClusters</ref>(QValueList&lt;int&gt;&amp;<sp/>clustersToGroup){</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>clusters<sp/>to<sp/>group<sp/>contain<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>clusterZeroJustModified<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inform<sp/>it<sp/>that<sp/>it<sp/>has<sp/>to<sp/>stop<sp/>(the<sp/>computation<sp/>will<sp/>be<sp/>done<sp/>again<sp/>on<sp/>the<sp/>new<sp/>data).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToGroup.contains(0))<sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>new<sp/>cluster<sp/>number<sp/>to<sp/>the<sp/>biggest<sp/>existing<sp/>number<sp/>plus<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>dataType<sp/>newClusterId<sp/>=<sp/>(*spikesByCluster)(2,nbSpikes)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesInNewCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>cluster<sp/>contributing<sp/>to<sp/>the<sp/>new<sp/>cluster.<sp/>This<sp/>will<sp/>be<sp/>used<sp/>to<sp/>sort<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>nbOfspikes;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>user<sp/>information<sp/>of<sp/>the<sp/>different<sp/>clusters<sp/>to<sp/>be<sp/>grouped<sp/>will<sp/>be<sp/>concatenated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>QString<sp/>newStructure;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>QString<sp/>newType;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>QString<sp/>newID;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>QString<sp/>newQuality;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>QString<sp/>newNotes;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>dataType<sp/>lowerInsertionIndex<sp/>=<sp/>nbSpikes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Variable<sp/>used<sp/>to<sp/>determined<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>clustersToGroup<sp/>does<sp/>not<sp/>contains<sp/>the<sp/>current<sp/>cluster,<sp/>this<sp/>cluster<sp/>is<sp/>let<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>its<sp/>information<sp/>is<sp/>simply<sp/>copy<sp/>as<sp/>is<sp/>from<sp/>spikesByCluster<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersToGroup.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>deal<sp/>with<sp/>the<sp/>clusters<sp/>which<sp/>are<sp/>to<sp/>be<sp/>grouped<sp/>and<sp/>need<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,lowerInsertionIndex<sp/>-<sp/>nbSpikesOfCluster),</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesInNewCluster<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lowerInsertionIndex<sp/>-=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>first<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>positions.append(nbSpikesInNewCluster);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Take<sp/>care<sp/>of<sp/>the<sp/>user<sp/>information<sp/>about<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first){</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newStructure<sp/>+=<sp/>iterator.data().getStructure();</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newType<sp/>+=<sp/>iterator.data().getType();</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newID<sp/>+=<sp/>iterator.data().getId();</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newQuality<sp/>+=<sp/>iterator.data().getQuality();</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNotes<sp/>+=<sp/>iterator.data().getNotes();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newStructure<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>iterator.data().getStructure();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newType<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>iterator.data().getType();</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newID<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>iterator.data().getId();</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newQuality<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>iterator.data().getQuality();</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNotes<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>iterator.data().getNotes();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//For<sp/>the<sp/>new<sp/>cluster,<sp/>only<sp/>the<sp/>row<sp/>index<sp/>has<sp/>been<sp/>inserted<sp/>in<sp/>spikesByClusterTemp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>the<sp/>cluster<sp/>number<sp/>is<sp/>updated<sp/>at<sp/>once<sp/>for<sp/>all<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbSpikesInNewCluster;++i)<sp/>(*spikesByClusterTemp)(2,lowerInsertionIndex<sp/>+<sp/>i)<sp/>=<sp/>newClusterId;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>in<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>clusterInfoMapTemp-&gt;insert(newClusterId,ClusterInfo(lowerInsertionIndex,nbSpikesInNewCluster,newStructure,newType,newID,newQuality,newNotes));<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>sortCluster(clusterInfoMapTemp,spikesByClusterTemp,newClusterId,positions,nbOfspikes,1);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>grouping,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);<sp/></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>clusters<sp/>to<sp/>group<sp/>contain<sp/>the<sp/>cluster<sp/>0,<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToGroup.contains(0)){</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(clustersToGroup);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>clusters<sp/>which<sp/>gave<sp/>the<sp/>spikes<sp/>for<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,<sp/>otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToGroupIterator;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToGroupIterator<sp/>=<sp/>clustersToGroup.begin();<sp/>clustersToGroupIterator<sp/>!=<sp/>clustersToGroup.end();<sp/>++clustersToGroupIterator){</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*clustersToGroupIterator)){</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*clustersToGroupIterator].isInProcess()){</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*clustersToGroupIterator));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*clustersToGroupIterator);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*clustersToGroupIterator];</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*clustersToGroupIterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToGroupIterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*clustersToGroupIterator),currentClusterList);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*clustersToGroupIterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newClusterId;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::prepareUndo(<ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp,ClusterInfoMap*<sp/>clusterInfoMapTemp){</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>current<sp/>spikesByCluster<sp/>in<sp/>the<sp/>undo<sp/>list<sp/>and<sp/>make<sp/>the<sp/>temporary<sp/>becomes<sp/>the<sp/>current<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>spikesByClusterUndoList.prepend(spikesByCluster);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>current<sp/>map<sp/>in<sp/>the<sp/>undo<sp/>list<sp/>and<sp/>make<sp/>the<sp/>temporary<sp/>become<sp/>the<sp/>current<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>clusterInfoMapUndoList.prepend(clusterInfoMap);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>clusterInfoMap<sp/>=<sp/>clusterInfoMapTemp;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>spikesByCluster<sp/>=<sp/>spikesByClusterTemp;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>number<sp/>of<sp/>undo<sp/>has<sp/>been<sp/>reach<sp/>remove<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>undo<sp/>list<sp/>(first<sp/>inserted)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentSpikesByClusterNbUndo<sp/>=<sp/>spikesByClusterUndoList.count();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSpikesByClusterNbUndo<sp/>&gt;<sp/>nbUndo)<sp/>spikesByClusterUndoList.remove(currentSpikesByClusterNbUndo<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>number<sp/>of<sp/>undo<sp/>has<sp/>been<sp/>reach<sp/>remove<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>undo<sp/>list<sp/>(first<sp/>inserted)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentClusterInfoNbUndo<sp/>=<sp/>clusterInfoMapUndoList.count();</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentClusterInfoNbUndo<sp/>&gt;<sp/>nbUndo)<sp/>clusterInfoMapUndoList.remove(currentClusterInfoNbUndo<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Clear<sp/>the<sp/>redoLists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>spikesByClusterRedoList.clear();</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/>clusterInfoMapRedoList.clear();</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_15680f0263412c682a3acc03ceb6ad6cc" kindref="member">Data::nbUndoChangedCleaning</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newNbUndo){</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>new<sp/>number<sp/>of<sp/>possible<sp/>undo<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>current<sp/>one,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>the<sp/>undo/redo<sp/>related<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNbUndo<sp/>&lt;<sp/>nbUndo){</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbUndo<sp/>=<sp/>spikesByClusterUndoList.count();</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>current<sp/>number<sp/>of<sp/>undo<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>new<sp/>number<sp/>of<sp/>undo,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>last<sp/>elements<sp/>in<sp/>the<sp/>undo<sp/>lists<sp/>(first<sp/>ones<sp/>inserted).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentNbUndo<sp/>&gt;<sp/>newNbUndo){</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(currentNbUndo<sp/>&gt;<sp/>newNbUndo){</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>spikesByClusterUndoList.remove(currentNbUndo<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapUndoList.remove(currentNbUndo<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>currentNbUndo<sp/>=<sp/>spikesByClusterUndoList.count();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Clear<sp/>the<sp/>redoLists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/>spikesByClusterRedoList.clear();</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/>clusterInfoMapRedoList.clear();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//currentNbUndo<sp/>&lt;<sp/>newNbUndo,<sp/>check<sp/>the<sp/>redo<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//number<sp/>of<sp/>undo<sp/>and<sp/>redo<sp/>must<sp/>be<sp/>&lt;=<sp/>new<sp/>number<sp/>of<sp/>undo.<sp/>Remove<sp/>redo<sp/>elements<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNbRedo<sp/>=<sp/>spikesByClusterRedoList.count();</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((currentNbRedo<sp/>+<sp/>currentNbUndo)<sp/>&gt;<sp/>newNbUndo){</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((currentNbRedo<sp/>+<sp/>currentNbUndo)<sp/>&gt;<sp/>newNbUndo){</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterInfoMapRedoList.remove(currentNbRedo<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>spikesByClusterRedoList.remove(currentNbRedo<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>currentNbRedo<sp/>=<sp/>spikesByClusterRedoList.count();</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::moveClusters(QValueList&lt;int&gt;&amp;<sp/>clustersToDelete,<ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp,ClusterInfoMap*<sp/>clusterInfoMapTemp,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>upperInsertionIndex,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>nbSpikesInNewCluster,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destinationId,QValueList&lt;long&gt;&amp;<sp/>positions,QValueList&lt;long&gt;&amp;<sp/>nbOfspikes){</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//For<sp/>all<sp/>the<sp/>clusters<sp/>to<sp/>delete,<sp/>copy<sp/>the<sp/>first<sp/>row<sp/>of<sp/>spikesByCluster<sp/>into<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//right<sp/>after<sp/>the<sp/>data<sp/>coming<sp/>from<sp/>the<sp/>current<sp/>cluster<sp/>destination<sp/>(0<sp/>or<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToDeleteIterator;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToDeleteIterator<sp/>=<sp/>clustersToDelete.begin();<sp/>clustersToDeleteIterator<sp/>!=<sp/>clustersToDelete.end();<sp/>++clustersToDeleteIterator<sp/>){</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>static_cast&lt;dataType&gt;(*clustersToDeleteIterator);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>destinationId)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[clusterId];</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>first<sp/>spike<sp/>position<sp/>for<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/>positions.append(nbSpikesInNewCluster<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>coming<sp/>from<sp/>the<sp/>current<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/>nbOfspikes.append(nbSpikesOfCluster);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/>nbSpikesInNewCluster<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>the<sp/>2<sp/>rows<sp/>for<sp/>all<sp/>the<sp/>other<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters<sp/>starting<sp/>with<sp/>the<sp/>cluster<sp/>following<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>&lt;=<sp/>destinationId)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersToDelete.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_1fe3776913a39b94f1289db081e38f434" kindref="member">Data::undo</ref>(QValueList&lt;int&gt;&amp;<sp/>addedClusters,QValueList&lt;int&gt;&amp;<sp/>updatedClusters){</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/></highlight><highlight class="comment">//Inform<sp/>that<sp/>an<sp/>undo<sp/>is<sp/>in<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/>undoRedoInProcess<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>1&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>addedClusters<sp/>or<sp/>updatedClusters<sp/>contain<sp/>any<sp/>cluster,<sp/>remove<sp/>the<sp/>corresponding<sp/>entry<sp/>in<sp/>waveformDict<sp/>and<sp/>correlationDict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/></highlight><highlight class="comment">//(the<sp/>data<sp/>will<sp/>have<sp/>to<sp/>be<sp/>uploaded<sp/>again)<sp/>if<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/></highlight><highlight class="comment">//otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(addedClusters.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToRemoveIterator;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToRemoveIterator<sp/>=<sp/>addedClusters.begin();<sp/>clustersToRemoveIterator<sp/>!=<sp/>addedClusters.end();<sp/>++clustersToRemoveIterator){</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>addedClusters.size()<sp/>&gt;<sp/>0,<sp/>*clustersToRemoveIterator:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*clustersToRemoveIterator&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*clustersToRemoveIterator)){</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*clustersToRemoveIterator].isInProcess()){</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*clustersToRemoveIterator));</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*clustersToRemoveIterator);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*clustersToRemoveIterator];</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*clustersToRemoveIterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>addedClusters.size()<sp/>&gt;<sp/>0,<sp/>*clustersToRemoveIterator:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*clustersToRemoveIterator&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator):<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator))&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),currentClusterList);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(updatedClusters.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToRemoveIterator;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToRemoveIterator<sp/>=<sp/>updatedClusters.begin();<sp/>clustersToRemoveIterator<sp/>!=<sp/>updatedClusters.end();<sp/>++clustersToRemoveIterator){</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>updatedClusters.size()<sp/>&gt;<sp/>0,<sp/>*clustersToRemoveIterator:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*clustersToRemoveIterator&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*clustersToRemoveIterator)){</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*clustersToRemoveIterator].isInProcess()){</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*clustersToRemoveIterator));</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*clustersToRemoveIterator);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*clustersToRemoveIterator];</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*clustersToRemoveIterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),currentClusterList);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>addedClusters<sp/>and<sp/>updatedClusters<sp/>are<sp/>both<sp/>empty,<sp/>the<sp/>undo<sp/>concern<sp/>the<sp/>renumbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/></highlight><highlight class="comment">//Can<sp/>not<sp/>do<sp/>much,<sp/>all<sp/>the<sp/>data<sp/>will<sp/>have<sp/>to<sp/>be<sp/>reloaded<sp/>(it<sp/>shoud<sp/>not<sp/>happen<sp/>very<sp/>often)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(addedClusters.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>updatedClusters.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Gets<sp/>all<sp/>the<sp/>clustersId<sp/>currently<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>clusters<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>and<sp/>delete<sp/>the<sp/>linke<sp/>information<sp/>if<sp/>possible<sp/>(if<sp/>a<sp/>thread<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//working<sp/>with<sp/>it)<sp/>otherwise,<sp/>modify<sp/>the<sp/>status<sp/>so<sp/>the<sp/>thread<sp/>will<sp/>be<sp/>delete<sp/>the<sp/>onformation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusters.begin();<sp/>iterator<sp/>!=<sp/>clusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>addedClusters.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>updatedClusters.size()<sp/>==<sp/>0,<sp/>*iterator:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*iterator&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(static_cast&lt;int&gt;(*iterator))){</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[static_cast&lt;int&gt;(*iterator)].isInProcess()){</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(static_cast&lt;int&gt;(*iterator));</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[static_cast&lt;int&gt;(*iterator)];</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(static_cast&lt;int&gt;(*iterator),waveformStatusCopy);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(*iterator))<sp/>cleanCorrelation(*iterator,clusters);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(*iterator,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>clusterInfoMapUndoList<sp/>is<sp/>not<sp/>empty,<sp/>make<sp/>the<sp/>current<sp/>clusterInfoMap<sp/>become<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>clusterInfoMapRedoList<sp/>and<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>clusterInfoMapUndoList<sp/>become<sp/>the<sp/>current<sp/>clusterInfoMap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/></highlight><highlight class="comment">//Do<sp/>the<sp/>same<sp/>with<sp/>the<sp/>spikesByCluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMapUndoList.count()&gt;0){</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;clusterInfoMapUndoList.count()&gt;0&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>clusterInfoMapRedoList.prepend(clusterInfoMap);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/>clusterInfoMapUndoList.take(0);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>spikesByClusterRedoList.prepend(spikesByCluster);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/>spikesByClusterUndoList.take(0);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>clusterInfoMap<sp/>=<sp/><sp/>clusterInfoMapTemp;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>2,<sp/>clusterInfoMap<sp/>updated&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>spikesByCluster<sp/>=<sp/><sp/>spikesByClusterTemp;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>3,<sp/>spikesByCluster<sp/>updated&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>last<sp/>action<sp/>implied<sp/>a<sp/>changed<sp/>of<sp/>the<sp/>dimension,<sp/>change<sp/>the<sp/>dimension<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimensionChangedUndo[0]<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>dimensionChangedUndo[0]<sp/>==<sp/>true&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/>undoRedoInProcess<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>modifiedClusters;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(modifiedClusters);<sp/></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/>dimensionChangedRedo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>Data::undo<sp/>end&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_1d9794804ba32827a29e9f41e575275f2" kindref="member">Data::redo</ref>(QValueList&lt;int&gt;&amp;<sp/>addedClusters,QValueList&lt;int&gt;&amp;<sp/>updatedClusters,QValueList&lt;int&gt;&amp;<sp/>deletedClusters){</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/></highlight><highlight class="comment">//Inform<sp/>that<sp/>a<sp/>redo<sp/>is<sp/>in<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/>undoRedoInProcess<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>addedClusters<sp/>or<sp/>updatedClusters<sp/>contain<sp/>any<sp/>cluster,<sp/>remove<sp/>the<sp/>corresponding<sp/>entry<sp/>in<sp/>waveformDict<sp/>and<sp/>correlationDict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/></highlight><highlight class="comment">//(the<sp/>data<sp/>will<sp/>have<sp/>to<sp/>be<sp/>uploaded<sp/>again).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(addedClusters.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToRemoveIterator;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToRemoveIterator<sp/>=<sp/>addedClusters.begin();<sp/>clustersToRemoveIterator<sp/>!=<sp/>addedClusters.end();<sp/>++clustersToRemoveIterator){</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*clustersToRemoveIterator)){</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*clustersToRemoveIterator].isInProcess()){</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*clustersToRemoveIterator));</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*clustersToRemoveIterator);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*clustersToRemoveIterator];</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*clustersToRemoveIterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),currentClusterList);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(updatedClusters.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToRemoveIterator;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToRemoveIterator<sp/>=<sp/>updatedClusters.begin();<sp/>clustersToRemoveIterator<sp/>!=<sp/>updatedClusters.end();<sp/>++clustersToRemoveIterator){</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*clustersToRemoveIterator)){</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*clustersToRemoveIterator].isInProcess()){</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*clustersToRemoveIterator));</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*clustersToRemoveIterator);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*clustersToRemoveIterator];</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*clustersToRemoveIterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),currentClusterList);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deletedClusters.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>clustersToRemoveIterator;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clustersToRemoveIterator<sp/>=<sp/>deletedClusters.begin();<sp/>clustersToRemoveIterator<sp/>!=<sp/>deletedClusters.end();<sp/>++clustersToRemoveIterator){</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*clustersToRemoveIterator)){</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*clustersToRemoveIterator].isInProcess()){</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*clustersToRemoveIterator));</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*clustersToRemoveIterator);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*clustersToRemoveIterator];</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*clustersToRemoveIterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*clustersToRemoveIterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),currentClusterList);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*clustersToRemoveIterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/></highlight><highlight class="comment">//if<sp/>addedClusters<sp/>and<sp/>updatedClusters<sp/>are<sp/>both<sp/>empty,<sp/>the<sp/>undo<sp/>concern<sp/>the<sp/>renumbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/></highlight><highlight class="comment">//Can<sp/>do<sp/>much,<sp/>all<sp/>the<sp/>data<sp/>will<sp/>have<sp/>to<sp/>be<sp/>reloaded<sp/>(it<sp/>shoud<sp/>not<sp/>happen<sp/>very<sp/>often)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(addedClusters.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>updatedClusters.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Gets<sp/>all<sp/>the<sp/>clustersId<sp/>currently<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>clusters<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>all<sp/>the<sp/>clusters<sp/>and<sp/>delete<sp/>the<sp/>linke<sp/>information<sp/>if<sp/>possible<sp/>(if<sp/>a<sp/>thread<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//working<sp/>with<sp/>it)<sp/>otherwise,<sp/>modify<sp/>the<sp/>status<sp/>so<sp/>the<sp/>thread<sp/>will<sp/>be<sp/>delete<sp/>the<sp/>onformation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusters.begin();<sp/>iterator<sp/>!=<sp/>clusters.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(static_cast&lt;int&gt;(*iterator))){</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[static_cast&lt;int&gt;(*iterator)].isInProcess()){</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(static_cast&lt;int&gt;(*iterator));</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[static_cast&lt;int&gt;(*iterator)];</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(static_cast&lt;int&gt;(*iterator),waveformStatusCopy);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(*iterator))<sp/>cleanCorrelation(*iterator,clusters);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(*iterator,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>clusterInfoMapRedoList<sp/>is<sp/>not<sp/>empty,<sp/>make<sp/>the<sp/>current<sp/>clusterInfoMap<sp/>become<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>clusterInfoMapUndoList<sp/>and<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>clusterInfoMapRedoList<sp/>become<sp/>the<sp/>current<sp/>clusterInfoMap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/></highlight><highlight class="comment">//Do<sp/>the<sp/>same<sp/>with<sp/>the<sp/>spikesByCluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMapRedoList.count()&gt;0){</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>clusterInfoMapUndoList.prepend(clusterInfoMap);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/>clusterInfoMapRedoList.take(0);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>spikesByClusterUndoList.prepend(spikesByCluster);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/>spikesByClusterRedoList.take(0);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>clusterInfoMap<sp/>=<sp/><sp/>clusterInfoMapTemp;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>spikesByCluster<sp/>=<sp/><sp/>spikesByClusterTemp;<sp/></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>last<sp/>redo<sp/>implied<sp/>a<sp/>changed<sp/>of<sp/>the<sp/>dimension,<sp/>change<sp/>the<sp/>dimension<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimensionChangedRedo[0]<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/>undoRedoInProcess<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;<sp/>modifiedClusters;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(modifiedClusters);<sp/></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_1d281299e0e8d1a3f8b902d481f90a843" kindref="member">Data::renumber</ref>(QMap&lt;int,int&gt;&amp;<sp/>clusterIdsOldNew,QMap&lt;int,int&gt;&amp;<sp/>clusterIdsNewOld){</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//process<sp/>the<sp/>clusters<sp/>0<sp/>and<sp/>1<sp/>separately<sp/>as,<sp/>if<sp/>they<sp/>exist,<sp/>they<sp/>are<sp/>never<sp/>renumber.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i){</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(i)){</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClusterInfo<sp/>currentClusterInfo<sp/>=<sp/>(*clusterInfoMap)[i];</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>currentClusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>currentClusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(i,ClusterInfo(firstSpikePosition,nbSpikesOfCluster));</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterIdsOldNew.insert(i,i);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterIdsNewOld.insert(i,i);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterNumber<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator)<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>clusters<sp/>0<sp/>and<sp/>1<sp/>have<sp/>been<sp/>processed<sp/>separately<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>0<sp/>||<sp/>clusterId<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Insert<sp/>into<sp/>spikesByClusterTemp<sp/>and<sp/>clusterInfoMapTemp<sp/>with<sp/>the<sp/>new<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>first<sp/>row<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>clusterNumber){</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>second<sp/>row<sp/>as<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//renumber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Insert<sp/>the<sp/>new<sp/>cluster<sp/>id<sp/>in<sp/>the<sp/>second<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nbSpikesOfCluster;++i)<sp/>(*spikesByClusterTemp)(2,firstSpikePosition<sp/>+<sp/>i)<sp/>=<sp/>clusterNumber;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>waveformDict<sp/>or<sp/>correlationDict<sp/>contain<sp/>that<sp/>cluster,<sp/>change<sp/>the<sp/>key<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutex.lock();<sp/><sp/></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[static_cast&lt;int&gt;(clusterId)].isInProcess()){</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waveforms*<sp/>waveforms<sp/>=<sp/>waveformDict.take(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterId));</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformDict.insert(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterNumber),waveforms);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[static_cast&lt;int&gt;(clusterId)];</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(clusterNumber,waveformStatus);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[static_cast&lt;int&gt;(clusterId)];</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(static_cast&lt;int&gt;(clusterId),waveformStatusCopy);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterNumber,ClusterInfo(firstSpikePosition,nbSpikesOfCluster,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes()));</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterIdsOldNew.insert(static_cast&lt;int&gt;(clusterId),clusterNumber);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterIdsNewOld.insert(clusterNumber,static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>++clusterNumber;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Renumber<sp/>the<sp/>correlations,<sp/>this<sp/>is<sp/>not<sp/>done<sp/>in<sp/>the<sp/>loop<sp/>because<sp/>the<sp/>complet<sp/>mapping<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//to<sp/>be<sp/>known<sp/>in<sp/>order<sp/>to<sp/>do<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>renumberCorrelation(clusterIdsOldNew);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_190db3ea8789ef16342840410cf0a12b0" kindref="member">Data::saveClusters</ref>(FILE*<sp/>clusterFile){</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/>RestartTimer();</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>writeStatus<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>spikesByCluster<sp/>by<sp/>spikes<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>mutex<sp/>protects<sp/>spikesByCluster<sp/>and<sp/>clusterInfoMap<sp/>so<sp/>that<sp/>only<sp/>one<sp/>thread<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//access<sp/>them<sp/>at<sp/>the<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>ClusterInfoMap<sp/>clusterInfoMapTemp;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>it;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>spikesByClusterTemp(*spikesByCluster);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overLimit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>it<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++it){</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterInfoMapTemp.insert(it.key(),it.data());</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it.data().nbSpikes()<sp/>&gt;<sp/>250000)<sp/>overLimit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbClusters<sp/>=<sp/>clusterInfoMapTemp.count();</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>line<sp/>of<sp/>the<sp/>file<sp/>contains<sp/>the<sp/>number<sp/>of<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>writeStatus<sp/>=<sp/>fprintf(clusterFile,<sp/></highlight><highlight class="stringliteral">&quot;%i\n&quot;</highlight><highlight class="normal">,nbClusters);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbClusters<sp/>&gt;<sp/>12<sp/>&amp;&amp;<sp/>!overLimit){</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/>spikesByClusterTemp.sort(1);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>all<sp/>the<sp/>clusterIds<sp/>in<sp/>spikes<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes<sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>writeStatus<sp/>=<sp/>fprintf(clusterFile,<sp/></highlight><highlight class="stringliteral">&quot;%i\n&quot;</highlight><highlight class="normal">,static_cast&lt;int&gt;((spikesByClusterTemp)(2,i)));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//second<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbClusters<sp/>&gt;<sp/>1){</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;dataType&gt;<sp/>clusterList<sp/>=<sp/>clusterInfoMapTemp.keys();</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;dataType&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">.setSize(nbSpikes,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>position<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>cluster<sp/>=<sp/>spikesByClusterTemp(2,position);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>value<sp/>=<sp/>spikesByClusterTemp(1,position);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterList.begin();<sp/>iterator<sp/>!=<sp/>clusterList.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>current<sp/>=<sp/>spikesByClusterTemp(1,clusterInfoMapTemp[*iterator].firstSpikePosition());</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current<sp/>&lt;<sp/>value){</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cluster<sp/>=<sp/>*iterator;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,position)<sp/>=<sp/>cluster;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>position<sp/>++;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>clusterInfoMapTemp[cluster].firstSpikePosition()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp[cluster].setFirstSpikePosition(firstSpikePosition);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>clusterInfoMapTemp[cluster].nbSpikes()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp[cluster].setNbSpikes(nbSpikesOfCluster);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpikesOfCluster<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbClusters<sp/>--;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterList.remove(cluster);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp.remove(cluster);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbClusters<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cluster<sp/>=<sp/>clusterList[0];</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>spikesByClusterTemp(1,clusterInfoMapTemp[cluster].firstSpikePosition());</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>all<sp/>the<sp/>clusterIds<sp/>in<sp/>spikes<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes<sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>writeStatus<sp/>=<sp/>fprintf(clusterFile,<sp/></highlight><highlight class="stringliteral">&quot;%i\n&quot;</highlight><highlight class="normal">,static_cast&lt;int&gt;((</highlight><highlight class="keyword">final</highlight><highlight class="normal">)(1,i)));</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//nbClusters&gt;1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//third<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Store<sp/>all<sp/>the<sp/>clusterIds<sp/>in<sp/>spikes<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbSpikes<sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeStatus<sp/>=<sp/>fprintf(clusterFile,<sp/></highlight><highlight class="stringliteral">&quot;%i\n&quot;</highlight><highlight class="normal">,static_cast&lt;int&gt;((spikesByClusterTemp)(2,i)));</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2360"><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;save<sp/>clu<sp/>file:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;Timer()<sp/>&lt;&lt;<sp/>endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(writeStatus<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight></codeline>
<codeline lineno="2363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">Data::spikePositions</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,<ref refid="classSortableTable" kindref="compound">SortableTable</ref>&amp;<sp/>subsetTable){</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Lock<sp/>the<sp/>mutex<sp/>to<sp/>protect<sp/>the<sp/>changes<sp/>as<sp/>a<sp/>whole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>ClusterInfo<sp/>clusterInfo<sp/><sp/>=<sp/>(*clusterInfoMap)[clusterId];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>clusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>clusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>spikesByCluster-&gt;subset(subsetTable,1,firstSpikePosition,firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal">Data::Status<sp/>Data::getSampleWaveformPoints(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,dataType<sp/>nbSpkToDisplay){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>has<sp/>been<sp/>suppress<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/></highlight><highlight class="comment">//return<sp/>this<sp/>information<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId)))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/></highlight><highlight class="comment">//Take<sp/>a<sp/>sample<sp/>of<sp/>the<sp/>spikes<sp/>(displayNbSpikes)<sp/>evenly<sp/>distributed<sp/>on<sp/>all<sp/>the<sp/>recording.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/>QString<sp/>clusterIdString<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterId);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>positionOfSpikes<sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/>Waveforms*<sp/>waveforms;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/></highlight><highlight class="comment">//Does<sp/>this<sp/>cluster<sp/>has<sp/>already<sp/>been<sp/>processed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(clusterId)){<sp/><sp/></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>Status<sp/>status<sp/>=<sp/>waveformStatusMap[clusterId].sampleStatus();</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>IN_PROCESS)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IN_PROCESS;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>waveforms<sp/>=<sp/>waveformDict[clusterIdString];</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//status<sp/>==<sp/>READY<sp/>with<sp/>the<sp/>same<sp/>number<sp/>of<sp/>spikes<sp/>to<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((waveforms-&gt;nbOfSpikesAsked()<sp/>==<sp/>nbSpkToDisplay)<sp/>&amp;&amp;<sp/>(status<sp/>==<sp/>READY))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;<sp/><sp/></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//status<sp/>==<sp/>READY<sp/>with<sp/>a<sp/>different<sp/>number<sp/>of<sp/>spikes<sp/>to<sp/>present,<sp/>recollect<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setSampleStatus(IN_PROCESS);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>there<sp/>not<sp/>a<sp/>mean<sp/>calculation<sp/>in<sp/>process,<sp/>is<sp/>so<sp/>wait<sp/>until<sp/>it<sp/>finishes<sp/>before<sp/>doing<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(waveformStatusMap[clusterId].sampleMeanStatus()<sp/>==<sp/>IN_PROCESS);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>the<sp/>cluster<sp/>has<sp/>not<sp/>been<sp/>removed<sp/>while<sp/>the<sp/>mean<sp/>function<sp/>was<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>so<sp/>the<sp/>entry<sp/>in<sp/>waveformStatusMap<sp/>for<sp/>that<sp/>cluster<sp/>will<sp/>have<sp/>been<sp/>removed<sp/><sp/>in<sp/>the<sp/>mean<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap.contains(clusterId))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setSampleMeanStatus(NOT_AVAILABLE);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>again<sp/>that<sp/>the<sp/>cluster<sp/>has<sp/>not<sp/>been<sp/>removed<sp/>or<sp/>modified<sp/>and<sp/>get<sp/>the<sp/>spikes<sp/>positions<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">spikePositions</ref>(clusterId,positionOfSpikes)<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/></highlight><highlight class="comment">//not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/>as<sp/>the<sp/>thread<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>waveforms-&gt;setNbOfSpikesAsked(nbSpkToDisplay);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>nbSpikesOfCluster<sp/>=<sp/>positionOfSpikes.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>waveforms-&gt;setSize(nbSpikesOfCluster,SAMPLE);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/>waveformStatusMap.insert(clusterId,WaveformStatus(IN_PROCESS));</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isTwoBytesRecording)<sp/>waveforms<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WaveformData&lt;short&gt;(*this);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>waveforms<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WaveformData&lt;long&gt;(*this);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>that<sp/>the<sp/>cluster<sp/>has<sp/>not<sp/>been<sp/>removed<sp/>or<sp/>modified<sp/>and<sp/>get<sp/>the<sp/>spikes<sp/>positions<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">spikePositions</ref>(clusterId,positionOfSpikes)<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/></highlight><highlight class="comment">//not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/>as<sp/>the<sp/>thread<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>waveforms-&gt;setNbOfSpikesAsked(nbSpkToDisplay);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>nbSpikesOfCluster<sp/>=<sp/>positionOfSpikes.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>waveforms-&gt;setSize(nbSpikesOfCluster,SAMPLE);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>waveformDict.insert(clusterIdString,waveforms);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/>FILE*<sp/>spikeFile<sp/>=<sp/>fopen(spkFileName,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spikeFile<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OPEN_ERROR;<sp/><sp/>///The<sp/>openning<sp/>pb<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/></highlight><highlight class="comment">//read<sp/>and<sp/>store<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/>waveforms-&gt;read(positionOfSpikes,nbSpikesOfCluster,spikeFile,nbSpkToDisplay);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/>fclose(spikeFile);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>has<sp/>been<sp/>suppress<sp/>or<sp/>modified<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/></highlight><highlight class="comment">//return<sp/>this<sp/>information<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available<sp/>and<sp/>remove<sp/>the<sp/>collected<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId))<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/><sp/></highlight><highlight class="comment">//not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/>as<sp/>the<sp/>thread<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>in<sp/>waveformStatusMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setSampleStatus(READY);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal">Data::Status<sp/>Data::getTimeFrameWaveformPoints(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,dataType<sp/>start,dataType<sp/>end){<sp/><sp/></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>has<sp/>been<sp/>suppress<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/></highlight><highlight class="comment">//return<sp/>this<sp/>information<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId)))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/></highlight><highlight class="comment">//Take<sp/>all<sp/>the<sp/>spikes<sp/>in<sp/>a<sp/>given<sp/>time<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/>QString<sp/>clusterIdString<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterId);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>positionOfSpikes<sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/>dataType<sp/>startInRecordingUnits<sp/>=<sp/>start<sp/>*<sp/>static_cast&lt;dataType&gt;(static_cast&lt;double&gt;(1000000)<sp/>/<sp/>samplingInterval);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/>dataType<sp/>endInRecordingUnits<sp/>=<sp/><sp/>end<sp/>*<sp/>static_cast&lt;dataType&gt;(static_cast&lt;double&gt;(1000000)<sp/>/<sp/>samplingInterval);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/>dataType<sp/>currentSpikeIndex<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/>Waveforms*<sp/>waveforms;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/></highlight><highlight class="comment">//Does<sp/>this<sp/>cluster<sp/>has<sp/>already<sp/>been<sp/>processed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(clusterId)){</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/>Status<sp/>status<sp/>=<sp/>waveformStatusMap[clusterId].timeFrameStatus();</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>IN_PROCESS)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IN_PROCESS;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/>waveforms<sp/>=<sp/>waveformDict[clusterIdString];</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>dataType<sp/>timeEndIndex<sp/>=<sp/>waveforms-&gt;indexOfTimeEnd();</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>dataType<sp/>timeStart<sp/>=<sp/>waveforms-&gt;startTime();</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/>dataType<sp/>timeEnd<sp/>=<sp/>waveforms-&gt;endTime();</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//status<sp/>==<sp/>READY<sp/>with<sp/>the<sp/>time<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeStart<sp/>==<sp/>start<sp/>&amp;&amp;<sp/>timeEnd<sp/>==<sp/>end<sp/>&amp;&amp;<sp/>status<sp/>==<sp/>READY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setTimeFrameStatus(IN_PROCESS);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>there<sp/>not<sp/>a<sp/>mean<sp/>calculation<sp/>in<sp/>process,<sp/>is<sp/>so<sp/>wait<sp/>until<sp/>it<sp/>finishes<sp/>before<sp/>doing<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(waveformStatusMap[clusterId].timeFrameMeanStatus()<sp/>==<sp/>IN_PROCESS);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>the<sp/>cluster<sp/>has<sp/>not<sp/>been<sp/>removed<sp/>while<sp/>the<sp/>mean<sp/>function<sp/>was<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>so<sp/>the<sp/>entry<sp/>in<sp/>waveformStatusMap<sp/>for<sp/>that<sp/>cluster<sp/>will<sp/>have<sp/>been<sp/>removed<sp/><sp/>in<sp/>the<sp/>mean<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap.contains(clusterId))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setTimeFrameMeanStatus(NOT_AVAILABLE);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>again<sp/>that<sp/>the<sp/>cluster<sp/>has<sp/>not<sp/>been<sp/>removed<sp/>or<sp/>modifed<sp/>and<sp/>get<sp/>the<sp/>spikes<sp/>positions<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">spikePositions</ref>(clusterId,positionOfSpikes)<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/></highlight><highlight class="comment">//not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/>as<sp/>the<sp/>thread<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>nbSpikesOfCluster<sp/>=<sp/>positionOfSpikes.nbOfColumns();</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/>waveforms-&gt;setSize(nbSpikesOfCluster,TIME_FRAME);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//status<sp/>==<sp/>READY<sp/>with<sp/>a<sp/>different<sp/>time<sp/>frame,<sp/>recollect<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Start<sp/>from<sp/>the<sp/>last<sp/>position<sp/>where<sp/>the<sp/>spikes<sp/>have<sp/>been<sp/>taken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(timeEndIndex<sp/>is<sp/>one<sp/>step<sp/>after<sp/>the<sp/>last<sp/>spike<sp/>taken).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start<sp/>==<sp/>timeEnd)<sp/>currentSpikeIndex<sp/>=<sp/><sp/>timeEndIndex;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>waveformStatusMap.insert(clusterId,WaveformStatus(NOT_AVAILABLE,IN_PROCESS));</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isTwoBytesRecording)<sp/>waveforms<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WaveformData&lt;short&gt;(*this);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>waveforms<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WaveformData&lt;long&gt;(*this);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>that<sp/>the<sp/>cluster<sp/>has<sp/>not<sp/>been<sp/>removed<sp/>or<sp/>modified<sp/>and<sp/>get<sp/>the<sp/>spikes<sp/>positions<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">spikePositions</ref>(clusterId,positionOfSpikes)<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/></highlight><highlight class="comment">//not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/>as<sp/>the<sp/>thread<sp/>is<sp/>running.<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>nbSpikesOfCluster<sp/>=<sp/>positionOfSpikes.nbOfColumns();</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>waveforms-&gt;setSize(nbSpikesOfCluster,TIME_FRAME);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>waveformDict.insert(clusterIdString,waveforms);<sp/><sp/></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/></highlight><highlight class="comment">//Look<sp/>for<sp/>the<sp/>starting<sp/>position<sp/>if<sp/>not<sp/>already<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSpikeIndex<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/>dataType<sp/>max<sp/>=<sp/>nbSpikesOfCluster<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>dataType<sp/>currentPositionInFeatures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>dataType<sp/>currentTime<sp/>=<sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(currentSpikeIndex<sp/>=<sp/>1;<sp/>currentSpikeIndex<sp/>&lt;<sp/>max;<sp/>++currentSpikeIndex){</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>currentPositionInFeatures<sp/>=<sp/>positionOfSpikes(1,currentSpikeIndex);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>currentTime<sp/>=<sp/>features(currentPositionInFeatures,nbDimensions);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTime<sp/>&gt;=<sp/>startInRecordingUnits)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/>FILE*<sp/>spikeFile<sp/>=<sp/>fopen(spkFileName,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spikeFile<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OPEN_ERROR;<sp/><sp/>///The<sp/>openning<sp/>pb<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/></highlight><highlight class="comment">//read<sp/>and<sp/>store<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/>waveforms-&gt;read(positionOfSpikes,nbSpikesOfCluster,spikeFile,currentSpikeIndex,endInRecordingUnits);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/>fclose(spikeFile);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>has<sp/>been<sp/>suppress<sp/>or<sp/>modified<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/></highlight><highlight class="comment">//return<sp/>this<sp/>information<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available<sp/>and<sp/>remove<sp/>the<sp/>collected<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId))<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/></highlight><highlight class="comment">//if<sp/>not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>in<sp/>waveforms<sp/>and<sp/>waveformStatusMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/>waveforms-&gt;setStartTime(start);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>waveforms-&gt;setEndTime(end);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>waveforms-&gt;setIndexOfTimeEnd(currentSpikeIndex);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>in<sp/>waveformStatusMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setTimeFrameStatus(READY);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::WaveformData&lt;T&gt;::setSize(dataType<sp/>size,WaveformMode<sp/>waveformMode){</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>=<sp/>waveformMode;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBaseFrame_13bac911fa71469ffae97a2cc1d7c5ac8" kindref="member">mode</ref><sp/>==<sp/>SAMPLE){</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sampleSpikesTable)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]sampleSpikesTable;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>sampleSpikesTable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[size<sp/>*<sp/>nbPtsBySpike];</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sampleMeanTable){</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]sampleMeanTable;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleMeanTable<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]sampleStDeviationTable;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sampleStDeviationTable<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>nbSampleSpikes<sp/>=<sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeFrameSpikesTable)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]timeFrameSpikesTable;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/>timeFrameSpikesTable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[size<sp/>*<sp/>nbPtsBySpike];</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeFrameMeanTable){</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]timeFrameMeanTable;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>timeFrameMeanTable<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]timeFrameStDeviationTable;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>timeFrameStDeviationTable<sp/>=<sp/>0L;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/>nbTimeFrameSpikes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::WaveformData&lt;T&gt;::read(<ref refid="classSortableTable" kindref="compound">SortableTable</ref>&amp;<sp/>positionOfSpikes,dataType<sp/>nbSpikesOfCluster,FILE*<sp/>spikeFile,dataType<sp/>nbSpkToDisplay){</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/></highlight><highlight class="comment">//Show<sp/>nbSpkToDisplay<sp/>spikes<sp/>or<sp/>all<sp/>the<sp/>spikes<sp/>if<sp/>nbSpikesOfCluster<sp/>&lt;<sp/>nbSpkToDisplay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpikesOfCluster<sp/>&lt;<sp/>nbSpkToDisplay){</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/>dataType<sp/>max<sp/>=<sp/>nbSpikesOfCluster<sp/>+1;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/>dataType<sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>max;<sp/>++i){</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//go<sp/>to<sp/>the<sp/>spike<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>currentSpikePosition<sp/>=<sp/>(positionOfSpikes(1,i)<sp/>-<sp/>1)<sp/>*<sp/>nbPtsBySpike<sp/>;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/>fseeko(spikeFile,currentSpikePosition<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),SEEK_SET);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>spikes<sp/>into<sp/>spikePoints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/>fread(&amp;(sampleSpikesTable[position]),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),nbPtsBySpike,spikeFile);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/>position<sp/>+=<sp/>nbPtsBySpike;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/>++nbSampleSpikes;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>there<sp/>is<sp/>only<sp/>one<sp/>spike<sp/>to<sp/>show,<sp/>take<sp/>the<sp/>first<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpkToDisplay<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//go<sp/>to<sp/>the<sp/>spike<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>dataType<sp/>currentSpikePosition<sp/>=<sp/>(positionOfSpikes(1,1)<sp/>-<sp/>1)<sp/>*<sp/>nbPtsBySpike<sp/>;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/>fseeko(spikeFile,currentSpikePosition<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),SEEK_SET);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>spikes<sp/>into<sp/>spikePoints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>fread(&amp;(sampleSpikesTable[0]),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),nbPtsBySpike,spikeFile);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>nbSampleSpikes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>static_cast&lt;float&gt;(static_cast&lt;float&gt;(nbSpikesOfCluster<sp/>-<sp/>1)<sp/>/<sp/>static_cast&lt;float&gt;(nbSpkToDisplay<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>dataType<sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>dataType<sp/>max<sp/>=<sp/>nbSpkToDisplay<sp/>+1;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>floatSpkIndice<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>dataType<sp/>spkIndice;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>max;<sp/>++i){</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/>spkIndice<sp/>=<sp/>static_cast&lt;dataType&gt;(floatSpkIndice<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//go<sp/>to<sp/>the<sp/>spike<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>currentSpikePosition<sp/>=<sp/>(positionOfSpikes(1,spkIndice)<sp/>-<sp/>1)<sp/>*<sp/>nbPtsBySpike<sp/>;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/>fseeko(spikeFile,currentSpikePosition<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),SEEK_SET);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>spikes<sp/>into<sp/>spikePoints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/>fread(&amp;(sampleSpikesTable[position]),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),nbPtsBySpike,spikeFile);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/>position<sp/>+=<sp/>nbPtsBySpike;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/>++nbSampleSpikes;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/>floatSpkIndice<sp/>+=<sp/>factor;<sp/><sp/></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::WaveformData&lt;T&gt;::read(<ref refid="classSortableTable" kindref="compound">SortableTable</ref>&amp;<sp/>positionOfSpikes,dataType<sp/>nbSpikesOfCluster,FILE*<sp/>spikeFile,dataType&amp;<sp/>currentSpikeIndex,dataType<sp/>end){</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/>dataType<sp/>max<sp/>=<sp/>nbSpikesOfCluster<sp/>+1;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/>dataType<sp/>position<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/>dataType<sp/>startPositionInSpk;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>currentSpikeIndex<sp/>&lt;<sp/>max;<sp/>++currentSpikeIndex){</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>dataType<sp/>currentPositionInFeatures<sp/>=<sp/>positionOfSpikes(1,currentSpikeIndex);<sp/></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/>dataType<sp/>currentTime<sp/>=<sp/>data.features(currentPositionInFeatures,data.nbDimensions);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTime<sp/>&gt;=<sp/>end)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//positionOfSpikes<sp/>and<sp/>features<sp/>take<sp/>indices<sp/>starting<sp/>at<sp/>1,<sp/>so<sp/>currentPositionInFeatures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//is<sp/>already<sp/>correct<sp/>regarding<sp/>the<sp/>presence<sp/>of<sp/>an<sp/>additional<sp/>first<sp/>line<sp/>(nb<sp/>of<sp/>features)<sp/>in<sp/>the<sp/>fet<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/>startPositionInSpk<sp/>=<sp/>(currentPositionInFeatures<sp/>-<sp/>1)<sp/>*<sp/>nbPtsBySpike<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//go<sp/>to<sp/>the<sp/>spike<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>fseeko(spikeFile,startPositionInSpk,SEEK_SET);</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>spikes<sp/>into<sp/>timeFrameSpikesTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/>fread(&amp;(timeFrameSpikesTable[position]),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),nbPtsBySpike,spikeFile);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/>position<sp/>+=<sp/>nbPtsBySpike;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/>++nbTimeFrameSpikes;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::WaveformData&lt;T&gt;::calculateMean(WaveformMode<sp/>waveformMode){</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformMode<sp/>==<sp/>SAMPLE){</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>sampleMeanTable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[data.nbSamplesInWaveform<sp/>*<sp/>data.nbChannels];</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>sampleStDeviationTable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[data.nbSamplesInWaveform<sp/>*<sp/>data.nbChannels];<sp/></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data.nbSamplesInWaveform;<sp/>++i){<sp/><sp/></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>data.nbChannels;<sp/>++j){</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>sumOfSquares<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nbSampleSpikes;<sp/>++k){</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>value<sp/>=<sp/>sampleSpikesTable[k<sp/>*<sp/>(data.nbSamplesInWaveform<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>(i<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sumOfSquares<sp/>+=<sp/>(value<sp/>*<sp/>value);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>are<sp/>store<sp/>as<sp/>follow:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sample<sp/>after<sp/>sample<sp/>and<sp/>for<sp/>each<sp/>of<sp/>them<sp/>the<sp/>value<sp/>of<sp/>channel<sp/>after<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>mean<sp/>=<sp/>sum<sp/>/<sp/>nbSampleSpikes;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>sampleMeanTable[(i<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>j]<sp/>=<sp/>mean;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//variance(X)<sp/>=<sp/>mean(X^2)<sp/>-<sp/>mean(X)^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>variance<sp/>=<sp/><sp/>(sumOfSquares<sp/>/<sp/>nbSampleSpikes)<sp/>-<sp/>(mean<sp/>*<sp/>mean);</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//standard<sp/>deviation<sp/>=<sp/>square<sp/>root<sp/>of<sp/>the<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/>sampleStDeviationTable[(i<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>j]<sp/>=<sp/>static_cast&lt;dataType&gt;(sqrt(static_cast&lt;double&gt;(variance)));</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/>timeFrameMeanTable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[data.nbSamplesInWaveform<sp/>*<sp/>data.nbChannels];</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>timeFrameStDeviationTable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[data.nbSamplesInWaveform<sp/>*<sp/>data.nbChannels];</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data.nbSamplesInWaveform;<sp/>++i){</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>data.nbChannels;<sp/>++j){</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>sumOfSquares<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nbTimeFrameSpikes;<sp/>++k){</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>value<sp/>=<sp/>timeFrameSpikesTable[k<sp/>*<sp/>(data.nbSamplesInWaveform<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>(i<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sumOfSquares<sp/>+=<sp/>(value<sp/>*<sp/>value);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>are<sp/>store<sp/>as<sp/>follow:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sample<sp/>after<sp/>sample<sp/>and<sp/>for<sp/>each<sp/>of<sp/>them<sp/>the<sp/>value<sp/>of<sp/>channel<sp/>after<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>mean<sp/>=<sp/>sum<sp/>/<sp/>nbTimeFrameSpikes;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>timeFrameMeanTable[(i<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>j]<sp/>=<sp/>mean;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//variance(X)<sp/>=<sp/>mean(X^2)<sp/>-<sp/>mean(X)^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>variance<sp/>=<sp/><sp/>(sumOfSquares<sp/>/<sp/>nbTimeFrameSpikes)<sp/>-<sp/>(mean<sp/>*<sp/>mean);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//standard<sp/>deviation<sp/>=<sp/>square<sp/>root<sp/>of<sp/>the<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>timeFrameStDeviationTable[(i<sp/>*<sp/>data.nbChannels)<sp/>+<sp/>j]<sp/>=<sp/>static_cast&lt;dataType&gt;(sqrt(static_cast&lt;double&gt;(variance)));</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal">Data::Status<sp/>Data::calculateSampleMean(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,dataType<sp/>nbSpkToDisplay){</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>mean<sp/>and<sp/>the<sp/>standard<sp/>deviation<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/></highlight><highlight class="comment">//a<sp/>sample<sp/>of<sp/>the<sp/>spikes<sp/>(displayNbSpikes)<sp/>evenly<sp/>distributed<sp/>on<sp/>all<sp/>the<sp/>recording.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/>QString<sp/>clusterIdString<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterId);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/>Waveforms*<sp/>waveforms;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/></highlight><highlight class="comment">//Does<sp/>this<sp/>cluster<sp/>already<sp/>processed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(clusterId)){</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>Status<sp/>status<sp/>=<sp/>waveformStatusMap[clusterId].sampleMeanStatus();</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>waveforms<sp/>=<sp/>waveformDict[clusterIdString];<sp/></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>IN_PROCESS)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IN_PROCESS;<sp/></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveforms-&gt;nbOfSpikesAsked()<sp/>!=<sp/>nbSpkToDisplay)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//status<sp/>==<sp/>READY<sp/>with<sp/>the<sp/>same<sp/>number<sp/>of<sp/>spikes<sp/>to<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((waveforms-&gt;nbOfSpikesAsked()<sp/>==<sp/>nbSpkToDisplay)<sp/>&amp;&amp;<sp/>(status<sp/>==<sp/>READY))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap[clusterId].sampleStatus()<sp/>!=<sp/>READY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveforms-&gt;nbOfSpikes(SAMPLE)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setSampleMeanStatus(NOT_AVAILABLE);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setSampleMeanStatus(IN_PROCESS);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>mean<sp/>and<sp/>the<sp/>standard<sp/>deviation<sp/>and<sp/>store<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/>waveforms-&gt;calculateMean(SAMPLE);</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>has<sp/>been<sp/>suppress<sp/>or<sp/>modified<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/></highlight><highlight class="comment">//return<sp/>this<sp/>information<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId))<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>in<sp/>waveformStatusMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setSampleMeanStatus(READY);</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>mutex.unlock();<sp/></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal">Data::Status<sp/>Data::calculateTimeFrameMean(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId,dataType<sp/>start,dataType<sp/>end){</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>mean<sp/>and<sp/>the<sp/>standard<sp/>deviation<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/></highlight><highlight class="comment">//a<sp/>sample<sp/>of<sp/>the<sp/>spikes<sp/>(displayNbSpikes)<sp/>evenly<sp/>distributed<sp/>on<sp/>all<sp/>the<sp/>recording.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/>QString<sp/>clusterIdString<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(clusterId);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/>Waveforms*<sp/>waveforms;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/></highlight><highlight class="comment">//Does<sp/>this<sp/>cluster<sp/>already<sp/>processed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(clusterId)){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/>Status<sp/>status<sp/>=<sp/>waveformStatusMap[clusterId].timeFrameMeanStatus();</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/>waveforms<sp/>=<sp/>waveformDict[clusterIdString];</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>dataType<sp/>timeStart<sp/>=<sp/>waveforms-&gt;startTime();</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/>dataType<sp/>timeEnd<sp/>=<sp/>waveforms-&gt;endTime();</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>IN_PROCESS)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IN_PROCESS;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeStart<sp/>==<sp/>start<sp/>&amp;&amp;<sp/>timeEnd<sp/>==<sp/>end<sp/>&amp;&amp;<sp/>status<sp/>==<sp/>READY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap[clusterId].timeFrameStatus()<sp/>!=<sp/>READY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveforms-&gt;nbOfSpikes(TIME_FRAME)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setTimeFrameMeanStatus(NOT_AVAILABLE);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setTimeFrameMeanStatus(IN_PROCESS);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>mean<sp/>and<sp/>the<sp/>standard<sp/>deviation<sp/>and<sp/>store<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/>waveforms-&gt;calculateMean(TIME_FRAME);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>has<sp/>been<sp/>suppress<sp/>or<sp/>modifed<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/></highlight><highlight class="comment">//return<sp/>this<sp/>information<sp/>that<sp/>the<sp/>data<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(clusterId))<sp/>||<sp/>waveformStatusMap[clusterId].isClusterModified()){</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap[clusterId].setClusterModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/>waveformDict.remove(clusterIdString);<sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>already<sp/>done<sp/>by<sp/>the<sp/>function<sp/>which<sp/>modified<sp/>the<sp/>data<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/>waveformStatusMap.remove(clusterId);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Store<sp/>the<sp/>information<sp/>in<sp/>waveformStatusMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/>waveformStatusMap[clusterId].setTimeFrameMeanStatus(READY);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::sortCluster(ClusterInfoMap*<sp/>clusterInfoMapTemp,<ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp,<sp/>dataType<sp/>clusterId,QValueList&lt;dataType&gt;<sp/>positions,QValueList&lt;dataType&gt;<sp/>nbOfspikes,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fromTop){</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/>uint<sp/>nbClusters<sp/>=<sp/>static_cast&lt;uint&gt;(positions.size());<sp/></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/>uint<sp/>indice<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/>ClusterInfo<sp/>clusterInfo<sp/><sp/>=<sp/>(*clusterInfoMapTemp)[clusterId];</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>clusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>clusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>positions<sp/>to<sp/>set<sp/>the<sp/>last<sp/>spikes<sp/>position<sp/>correctly<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>positions<sp/>were<sp/>counted<sp/>from<sp/>the<sp/>last<sp/>spike<sp/>of<sp/>the<sp/>new<sp/>cluster,<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/></highlight><highlight class="comment">//they<sp/>will<sp/>be<sp/>counted<sp/>from<sp/>the<sp/>first<sp/>spike<sp/>of<sp/>the<sp/>new<sp/>cluster.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fromTop){</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;dataType&gt;(nbClusters);<sp/>++i){</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/>positions[i]<sp/>=<sp/>nbSpikesOfCluster<sp/>-<sp/>positions[i]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>data<sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spike<sp/>positions<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_19e0b1abed52e808d7f645a4506efff34" kindref="member">subset</ref>(data,1,firstSpikePosition,firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">.setSize(nbSpikesOfCluster,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/>dataType<sp/>position<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/>dataType<sp/>value<sp/>=<sp/>data(1,positions[0]);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>step<sp/>==<sp/>-1,<sp/>the<sp/>spikes<sp/>for<sp/>each<sp/>cluster<sp/>are<sp/>sorted<sp/>from<sp/>the<sp/>first<sp/>one<sp/>to<sp/>the<sp/>last<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/></highlight><highlight class="comment">//by<sp/>decreasing<sp/>order.<sp/>They<sp/>will<sp/>be<sp/>read<sp/>from<sp/>last<sp/>one<sp/>to<sp/>the<sp/>first<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>step<sp/>==<sp/>1,<sp/>the<sp/>spikes<sp/>for<sp/>each<sp/>cluster<sp/>are<sp/>sorted<sp/>from<sp/>the<sp/>first<sp/>one<sp/>to<sp/>the<sp/>last<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/></highlight><highlight class="comment">//by<sp/>increasing<sp/>order.<sp/>They<sp/>will<sp/>be<sp/>read<sp/>from<sp/>first<sp/>one<sp/>to<sp/>the<sp/>last<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbClusters;<sp/>++i){</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>current<sp/>=<sp/>data(1,positions[i]);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current<sp/>&lt;<sp/>value){</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>indice<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,position)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/>position<sp/>++;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/>positions[indice]<sp/>+=<sp/>step;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/>nbOfspikes[indice]<sp/>--;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbOfspikes[indice]<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbClusters<sp/>--;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>positions.remove(positions.at(indice));</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbOfspikes.remove(nbOfspikes.at(indice));</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbClusters<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/>indice<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/>value<sp/>=<sp/>data(1,positions[0]);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/></highlight><highlight class="comment">//Copy<sp/>the<sp/>sorted<sp/>data<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;</highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,1),</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="2919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::sortCluster(ClusterInfoMap*<sp/>clusterInfoMapTemp,<ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp,dataType<sp/>clusterId,QValueList&lt;dataType&gt;<sp/>lastPositions,QValueList&lt;dataType&gt;<sp/>nbOfspikes,dataType<sp/>firstPosition,dataType<sp/>number){</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>variables<sp/>concerning<sp/>the<sp/>previous<sp/>data<sp/>of<sp/>clusterId<sp/>(which<sp/>is<sp/>0<sp/>or<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/>dataType<sp/>originalFirstPosition<sp/>=<sp/>firstPosition;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/>dataType<sp/>originalNb<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/>uint<sp/>nbClusters<sp/>=<sp/>static_cast&lt;uint&gt;(lastPositions.size());</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/>uint<sp/>indice<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/>ClusterInfo<sp/>clusterInfo<sp/><sp/>=<sp/>(*clusterInfoMapTemp)[clusterId];</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>clusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>clusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>data<sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>positions<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_19e0b1abed52e808d7f645a4506efff34" kindref="member">subset</ref>(data,1,firstSpikePosition,firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">.setSize(nbSpikesOfCluster,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/>dataType<sp/>position<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/>dataType<sp/>value<sp/>=<sp/>data(1,lastPositions[0]);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>spikes<sp/>for<sp/>each<sp/>cluster<sp/>are<sp/>sorted<sp/>from<sp/>the<sp/>last<sp/>one<sp/>to<sp/>the<sp/>first<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/></highlight><highlight class="comment">//by<sp/>increasing<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(originalNb<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbClusters;<sp/>++i){</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>current<sp/>=<sp/>data(1,lastPositions[i]);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current<sp/>&lt;<sp/>value){</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indice<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//work<sp/>on<sp/>the<sp/>original<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster<sp/>(which<sp/>is<sp/>either<sp/>cluster<sp/>0<sp/>or<sp/>cluster<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>current<sp/>=<sp/>data(1,originalFirstPosition);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current<sp/>&lt;<sp/>value){</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,position)<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>position<sp/>++;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>originalNb<sp/>--;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(originalNb<sp/>==<sp/>0)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>originalFirstPosition<sp/>++;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,position)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>position<sp/>++;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastPositions[indice]--;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbOfspikes[indice]<sp/>--;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbOfspikes[indice]<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbClusters<sp/>--;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastPositions.remove(lastPositions.at(indice));</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.remove(nbOfspikes.at(indice));</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>all<sp/>the<sp/>reminding<sp/>original<sp/>spikes<sp/>of<sp/>the<sp/>new<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbClusters<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(</highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,position)),</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(data(1,originalFirstPosition)),</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>originalNb<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>indice<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>data(1,lastPositions[0]);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/></highlight><highlight class="comment">//All<sp/>the<sp/>original<sp/>spikes<sp/>have<sp/>been<sp/>sort,<sp/>now<sp/>deal<sp/>with<sp/>the<sp/>reminding<sp/>ones<sp/>coming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/></highlight><highlight class="comment">//from<sp/>the<sp/>other<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(originalNb<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>nbClusters<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>indice<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/>data(1,lastPositions[0]);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nbClusters;<sp/>++i){</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataType<sp/>current<sp/>=<sp/>data(1,lastPositions[i]);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current<sp/>&lt;<sp/>value){</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,position)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>position<sp/>++;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastPositions[indice]--;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nbOfspikes[indice]<sp/>--;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbOfspikes[indice]<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbClusters<sp/>--;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastPositions.remove(lastPositions.at(indice));</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbOfspikes.remove(nbOfspikes.at(indice));</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbClusters<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>indice<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>data(1,lastPositions[0]);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/></highlight><highlight class="comment">//Copy<sp/>the<sp/>sorted<sp/>data<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;</highlight><highlight class="keyword">final</highlight><highlight class="normal">(1,1),</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));<sp/></highlight></codeline>
<codeline lineno="3015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal">Data::Status<sp/><ref refid="classData_11c8caf858e00073b9002b48dea37dbc1" kindref="member">Data::getCorrelograms</ref>(<ref refid="classPair" kindref="compound">Pair</ref>&amp;<sp/>pair,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binSize,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeWindow,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binSizeInRU,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeWindowInRU,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halfBins){</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster1<sp/>=<sp/>pair.<ref refid="classPair_1c44502ea261a3bd0e8013e86fb7469fe" kindref="member">getX</ref>();</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster2<sp/>=<sp/>pair.<ref refid="classPair_12f4041994f035147c8ba71fd92612eb9" kindref="member">getY</ref>();</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><ref refid="classPair" kindref="compound">Pair</ref><sp/>parameters<sp/>=<sp/><ref refid="classPair" kindref="compound">Pair</ref>(binSize,timeWindow);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/>QDict&lt;Correlation&gt;*<sp/>dict<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/></highlight><highlight class="comment">//Test<sp/>first<sp/>if<sp/>the<sp/>clusters<sp/>still<sp/>exist<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cluster1Removed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cluster2Removed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/>cluster1Removed<sp/>=<sp/>!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/>cluster2Removed<sp/>=<sp/>!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cluster1Removed<sp/>||<sp/>cluster2Removed)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/></highlight><highlight class="comment">//Test<sp/>if<sp/>the<sp/>correlogram<sp/>is<sp/>in<sp/>process<sp/>or<sp/>already<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/>Status<sp/>status<sp/>=<sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationDict[pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/>dict<sp/>=<sp/>correlationDict[pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()];</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()])-&gt;getStatus(binSize,timeWindow)<sp/>==<sp/>IN_PROCESS)<sp/>status<sp/>=<sp/>IN_PROCESS;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()])-&gt;getStatus(binSize,timeWindow)<sp/>==<sp/>READY)<sp/>status<sp/>=<sp/>READY;<sp/></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>!=<sp/>NOT_AVAILABLE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;<sp/></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/></highlight><highlight class="comment">//Test<sp/>if<sp/>the<sp/>correlogram,<sp/>for<sp/>the<sp/>given<sp/>parametres,<sp/>is<sp/>not<sp/>available,<sp/>if<sp/>so<sp/>compute<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>pair<sp/>does<sp/>not<sp/>exist<sp/>or<sp/>the<sp/>binSize<sp/>and/or<sp/>the<sp/>timeFrame<sp/>are<sp/>different,<sp/>the<sp/>correlogram<sp/>will<sp/>have<sp/>to<sp/>be<sp/>computed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>computeCorrelogram<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/>mutex.lock();<sp/></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/>dict<sp/>=<sp/>correlationDict[pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()];</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationDict[pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]<sp/>==<sp/>0<sp/>||<sp/>((*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]<sp/>==<sp/>0))<sp/></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>computeCorrelogram<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(computeCorrelogram){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Advice<sp/>that<sp/>a<sp/>correlation<sp/>is<sp/>in<sp/>process<sp/>on<sp/>the<sp/>cluster1<sp/>and<sp/>cluster2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/>correlationsInProcess.addProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>correlationsInProcess.addProcess(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>correlation<sp/>object<sp/>or<sp/>retrieve<sp/>it<sp/>if<sp/>it<sp/>already<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>case<sp/>several<sp/>threads,<sp/>working<sp/>on<sp/>the<sp/>same<sp/>pair<sp/>with<sp/>the<sp/>same<sp/>parameters,<sp/>get<sp/>to<sp/>this<sp/>point,<sp/>make<sp/>sure<sp/>that<sp/>only<sp/>one<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//performs<sp/>the<sp/>computation.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>correlationAlreadyInProcess<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/>Correlation*<sp/>correlation<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>correlationDict[pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()];</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dict<sp/>==<sp/>0){<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/>dict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;Correlation&gt;();</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/>dict-&gt;setAutoDelete(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/>correlation<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Correlation(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,binSize,timeWindow);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/>correlation-&gt;setStatus(IN_PROCESS);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/>dict-&gt;insert(parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>(),correlation);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/>correlationDict.insert(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>(),dict);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]<sp/>==<sp/>0){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/>correlation<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Correlation(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,binSize,timeWindow);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/>correlation-&gt;setStatus(IN_PROCESS);</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/>dict-&gt;insert(parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>(),correlation);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()]-&gt;getStatus()<sp/>!=<sp/>IN_PROCESS){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/>correlation<sp/>=<sp/>(*dict)[parameters.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>()];</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/>correlation-&gt;setStatus(IN_PROCESS);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/>correlation-&gt;reset();</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>correlation-&gt;setBinSize(binSize);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/>correlation-&gt;setTimeWindow(timeWindow);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>correlationAlreadyInProcess<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationAlreadyInProcess){</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster2));<sp/></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IN_PROCESS;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>cluster1<sp/>or<sp/>cluster2<sp/>have<sp/>been<sp/>suppress<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//skip<sp/>this<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autoCorrelogram<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>spikesOfCluster1<sp/>=<sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref><sp/>spikesOfCluster2<sp/>=<sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cluster1<sp/>==<sp/>cluster2)<sp/>autoCorrelogram<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>positions<sp/>for<sp/>the<sp/>cluster1<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">spikePositions</ref>(cluster1,spikesOfCluster1)){</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/>cleanCorrelation(static_cast&lt;dataType&gt;(cluster1),<ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>spikes<sp/>positions<sp/>for<sp/>the<sp/>cluster2<sp/>in<sp/>a<sp/>one<sp/>row<sp/>SortableTable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!autoCorrelogram<sp/>&amp;&amp;<sp/>(!<ref refid="classData_1f7b61447a6d8cf55ca4b69227372b93a" kindref="member">spikePositions</ref>(cluster2,spikesOfCluster2))){<sp/></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/>cleanCorrelation(static_cast&lt;dataType&gt;(cluster2),<ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterNotAvailable){</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/>correlationDict.remove(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>());<sp/></highlight><highlight class="comment">//if<sp/>the<sp/>clusters<sp/>do<sp/>not<sp/>exist<sp/>anymore<sp/>they<sp/>would<sp/>not<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//removed<sp/>in<sp/>cleanCorrelation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>either<sp/>the<sp/>cluster1<sp/>or<sp/>the<sp/>cluster2<sp/>have<sp/>been<sp/>modified<sp/>since<sp/>the<sp/>thread<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationsInProcess.isClusterModified(static_cast&lt;dataType&gt;(cluster1))){</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/>correlationDict.remove(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>());</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationsInProcess.isClusterModified(static_cast&lt;dataType&gt;(cluster2))){</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/>correlationDict.remove(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>());</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterNotAvailable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>correlogram.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!autoCorrelogram)<sp/>correlation-&gt;calculateCorrelation(spikesOfCluster1,spikesOfCluster2,binSizeInRU,timeWindowInRU,halfBins,autoCorrelogram);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>correlation-&gt;calculateCorrelation(spikesOfCluster1,spikesOfCluster1,binSizeInRU,timeWindowInRU,halfBins,autoCorrelogram);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>cluster1<sp/>or<sp/>cluster2<sp/>have<sp/>been<sp/>suppress<sp/>or<sp/>modifed<sp/>after<sp/>the<sp/>thread<sp/>calling<sp/>this<sp/>function<sp/>has<sp/>been<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//skip<sp/>this<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(cluster1))){</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanCorrelation(static_cast&lt;dataType&gt;(cluster1),<ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!autoCorrelogram<sp/>&amp;&amp;<sp/>(!clusterInfoMap-&gt;contains(static_cast&lt;dataType&gt;(cluster2)))){</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/>cleanCorrelation(static_cast&lt;dataType&gt;(cluster2),<ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterNotAvailable){</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/>correlationDict.remove(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>());<sp/></highlight><highlight class="comment">//if<sp/>the<sp/>clusters<sp/>do<sp/>not<sp/>exist<sp/>anymore<sp/>they<sp/>would<sp/>not<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//removed<sp/>in<sp/>cleanCorrelation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationsInProcess.isClusterModified(static_cast&lt;dataType&gt;(cluster1))){</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/>correlationDict.remove(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>());</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationsInProcess.isClusterModified(static_cast&lt;dataType&gt;(cluster2))){</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/>correlationDict.remove(pair.<ref refid="classPair_1cca3d16d65572c8bde1042948f98bd0c" kindref="member">toString</ref>());</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/>clusterNotAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterNotAvailable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_AVAILABLE;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/>correlation-&gt;setStatus(READY);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>the<sp/>correlation<sp/>status<sp/>of<sp/>the<sp/>cluster1<sp/>and<sp/>cluster2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster1));</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/>correlationsInProcess.removeProcess(static_cast&lt;dataType&gt;(cluster2));</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READY;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::Correlation::calculateCorrelation(<ref refid="classSortableTable" kindref="compound">SortableTable</ref>&amp;<sp/>spikesOfCluster1,<ref refid="classSortableTable" kindref="compound">SortableTable</ref>&amp;<sp/>spikesOfCluster2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binSizeInRU,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeWindowInRU,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halfBins,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autoCorrelogram){</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/>dataType<sp/>cluster1NbSpikesPlusOne<sp/>=<sp/>spikesOfCluster1.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/>dataType<sp/>cluster2NbSpikes<sp/>=<sp/>spikesOfCluster2.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();<sp/></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/>dataType<sp/>cluster2NbSpikesPlusOne<sp/>=<sp/>cluster2NbSpikes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/>dataType<sp/>spikeOfCluster2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeOfCluster1;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lowerBond;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upperBond;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalNbBins<sp/>=<sp/>(2<sp/>*<sp/>halfBins)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/>setNbBins(totalNbBins);<sp/></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>array<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>correlogram<sp/>data.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/>values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint[totalNbBins];</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/></highlight><highlight class="comment">//One<sp/>additional<sp/>bin<sp/>is<sp/>used<sp/>for<sp/>the<sp/>upper<sp/>boundary<sp/>(and<sp/>his<sp/>content<sp/>is<sp/>later<sp/>added<sp/>to<sp/>the<sp/>last<sp/>bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/>uint*<sp/>tmpValues<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint[totalNbBins<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/>memset(tmpValues,0,(totalNbBins<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint));<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/></highlight><highlight class="comment">//Cluster<sp/>1<sp/>will<sp/>be<sp/>the<sp/>cluster<sp/>of<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>spikeOfCluster1<sp/>=<sp/>1;<sp/>spikeOfCluster1<sp/>&lt;<sp/>cluster1NbSpikesPlusOne;<sp/>++spikeOfCluster1){</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/>timeOfCluster1<sp/>=<sp/>data.spikeTime(spikesOfCluster1,spikeOfCluster1);<sp/><sp/></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/>lowerBond<sp/>=<sp/>timeOfCluster1<sp/>-<sp/>timeWindowInRU/2;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>upperBond<sp/>=<sp/>timeOfCluster1<sp/>+<sp/>timeWindowInRU/2;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>last<sp/>spike<sp/>of<sp/>cluster2<sp/>is<sp/>before<sp/>the<sp/>lower<sp/>limit<sp/>the<sp/>computation<sp/>is<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data.spikeTime(spikesOfCluster2,cluster2NbSpikes)<sp/>&lt;<sp/>lowerBond)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Move<sp/>along<sp/>cluster2&apos;s<sp/>spikes<sp/>while<sp/>the<sp/>time<sp/>of<sp/>the<sp/>spike<sp/>is<sp/>lower<sp/>than<sp/>lowerBond.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;spikeOfCluster2<sp/>&lt;<sp/>cluster2NbSpikesPlusOne<sp/>&amp;&amp;<sp/>data.spikeTime(spikesOfCluster2,spikeOfCluster2)<sp/>&lt;<sp/>lowerBond;<sp/>++spikeOfCluster2){}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>backwards<sp/>along<sp/>cluster2&apos;s<sp/>spikes<sp/>and<sp/>store<sp/>the<sp/>bin<sp/>value<sp/>as<sp/>long<sp/>as<sp/>we<sp/>still<sp/>in<sp/>the<sp/>time<sp/>frame<sp/>(&gt;=<sp/>lowerBond)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spikeOfCluster2<sp/>&gt;<sp/>1){</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>backwardsTime;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>backwardsSpike<sp/>=<sp/>spikeOfCluster2<sp/>-<sp/>1;backwardsSpike<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>(backwardsTime<sp/>=<sp/>data.spikeTime(spikesOfCluster2,backwardsSpike))<sp/>&gt;=<sp/>lowerBond;<sp/>--backwardsSpike){</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>halfBins<sp/>+<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>(backwardsTime<sp/>-<sp/>timeOfCluster1)/<sp/>static_cast&lt;double&gt;(binSizeInRU)));<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpValues[bin]++;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>forwards<sp/>along<sp/>cluster2&apos;s<sp/>spikes<sp/>and<sp/>store<sp/>the<sp/>bin<sp/>value<sp/>as<sp/>long<sp/>as<sp/>we<sp/>still<sp/>in<sp/>the<sp/>time<sp/>frame<sp/>(&lt;=<sp/>upperBond)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>forwardsTime;<sp/></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//All<sp/>the<sp/>spikes<sp/>at<sp/>the<sp/>limit<sp/>of<sp/>2<sp/>bins<sp/>are<sp/>included<sp/>in<sp/>the<sp/>left<sp/>one<sp/>if<sp/>the<sp/>time<sp/>is<sp/>not<sp/>round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>same<sp/>thing<sp/>is<sp/>done<sp/>for<sp/>the<sp/>last<sp/>bin,<sp/>so<sp/>a<sp/>spike<sp/>of<sp/>cluster2<sp/>having<sp/>a<sp/>time<sp/>difference<sp/>of<sp/>timeWindowInRu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//with<sp/>a<sp/>spike<sp/>of<sp/>cluster1<sp/>will<sp/>not<sp/>be<sp/>computed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;spikeOfCluster2<sp/>&lt;<sp/>cluster2NbSpikesPlusOne<sp/>&amp;&amp;<sp/>(forwardsTime<sp/>=<sp/>data.spikeTime(spikesOfCluster2,spikeOfCluster2))<sp/>&lt;<sp/>upperBond;<sp/>++spikeOfCluster2){</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>halfBins<sp/>+<sp/>static_cast&lt;int&gt;(floor(0.5<sp/>+<sp/>(forwardsTime<sp/>-<sp/>timeOfCluster1)/<sp/>static_cast&lt;double&gt;(binSizeInRU)));<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/>tmpValues[bin]++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>it<sp/>is<sp/>an<sp/>autocorrelogram,<sp/>remove<sp/>the<sp/>center<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(autoCorrelogram)<sp/>tmpValues[halfBins]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/></highlight><highlight class="comment">//Update<sp/>last<sp/>bin<sp/>(see<sp/>comment<sp/>above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/>tmpValues[2<sp/>*<sp/>halfBins]<sp/>+=<sp/>tmpValues[totalNbBins];</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/></highlight><highlight class="comment">//Store<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/>memcpy(values,tmpValues,totalNbBins<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint));</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]tmpValues;<sp/><sp/></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>maximum<sp/>and<sp/>the<sp/>shoulder<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>totalNbBins;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(values[i]<sp/>&gt;<sp/>max)<sp/>max<sp/>=<sp/>values[i];</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/></highlight><highlight class="comment">//Computation<sp/>of<sp/>the<sp/>asymptote:<sp/>N1*N2*(binSize/Time)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/></highlight><highlight class="comment">//with<sp/>Time,<sp/>time<sp/>between<sp/>the<sp/>first<sp/>common<sp/>spike<sp/>and<sp/>the<sp/>last<sp/>common<sp/>spike.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(autoCorrelogram){</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Computation<sp/>also<sp/>of<sp/>the<sp/>firing<sp/>rate:<sp/>nbSpikes<sp/>/<sp/>Time<sp/>converted<sp/>in<sp/>seconds.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>time<sp/>=<sp/>data.spikeTime(spikesOfCluster2,cluster2NbSpikes)<sp/>-<sp/>data.spikeTime(spikesOfCluster2,1);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/>asymptote<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/>firingRate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/>asymptote<sp/>=<sp/>static_cast&lt;float&gt;(</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(cluster2NbSpikes)<sp/>*<sp/>static_cast&lt;double&gt;(cluster2NbSpikes)<sp/>*</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(static_cast&lt;double&gt;(binSizeInRU)<sp/>/<sp/>static_cast&lt;double&gt;(time))</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeInS<sp/>=<sp/>static_cast&lt;double&gt;(time<sp/>*data.samplingInterval)<sp/>/<sp/>static_cast&lt;double&gt;(1000000);<sp/></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/>firingRate<sp/>=<sp/>static_cast&lt;float&gt;(</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(cluster2NbSpikes)<sp/>/<sp/>(static_cast&lt;long&gt;(timeInS)<sp/>+<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clu1T1<sp/>=<sp/>data.spikeTime(spikesOfCluster1,1);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clu2T1<sp/>=<sp/>data.spikeTime(spikesOfCluster2,1);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clu1T2<sp/>=<sp/>data.spikeTime(spikesOfCluster1,cluster1NbSpikesPlusOne<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clu2T2<sp/>=<sp/>data.spikeTime(spikesOfCluster2,cluster2NbSpikes);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T1;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T2;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/>dataType<sp/>clu1Spk1;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/>dataType<sp/>clu1Spk2;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>dataType<sp/>clu2Spk1;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>dataType<sp/>clu2Spk2;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((clu1T2<sp/>&lt;<sp/>clu2T1)<sp/>||<sp/>(clu2T2<sp/>&lt;<sp/>clu1T1))<sp/>asymptote<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clu1T1<sp/>&lt;<sp/>clu2T1){</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/>=<sp/>clu2T1;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clu1T2<sp/>&lt;<sp/>clu2T2){</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>T2<sp/>=<sp/>clu1T2;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Search<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>of<sp/>the<sp/>2<sp/>clusters<sp/>whithin<sp/>&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk1<sp/>=<sp/>data.findSpikePosition(T1,spikesOfCluster1);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk2<sp/>=<sp/>cluster1NbSpikesPlusOne<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk2<sp/>=<sp/>data.findSpikePosition(T2,spikesOfCluster2);</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>T2<sp/>=<sp/>clu2T2;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Search<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>of<sp/>the<sp/>2<sp/>clusters<sp/>whithin<sp/>&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk1<sp/>=<sp/>data.findSpikePosition(T1,spikesOfCluster1);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk2<sp/>=<sp/>data.findSpikePosition(T2,spikesOfCluster1);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk2<sp/>=<sp/>cluster2NbSpikes;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/>=<sp/>clu1T1;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clu1T2<sp/>&lt;<sp/>clu2T2){</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>T2<sp/>=<sp/>clu1T2;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Search<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>of<sp/>the<sp/>2<sp/>clusters<sp/>whithin<sp/>&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk2<sp/>=<sp/>cluster1NbSpikesPlusOne<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk1<sp/>=<sp/>data.findSpikePosition(T1,spikesOfCluster2);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk2<sp/>=<sp/>data.findSpikePosition(T2,spikesOfCluster2);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>T2<sp/>=<sp/>clu2T2;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Search<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>of<sp/>the<sp/>2<sp/>clusters<sp/>whithin<sp/>&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu1Spk2<sp/>=<sp/>data.findSpikePosition(T2,spikesOfCluster1);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk1<sp/>=<sp/>data.findSpikePosition(T1,spikesOfCluster2);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>clu2Spk2<sp/>=<sp/>cluster2NbSpikes;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/>time<sp/>=<sp/>T2<sp/>-<sp/>T1;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time<sp/>==<sp/>0)<sp/>asymptote<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>asymptote<sp/>=<sp/>static_cast&lt;float&gt;(</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(clu1Spk2<sp/>-<sp/>clu1Spk1<sp/>+<sp/>1)<sp/>*<sp/>static_cast&lt;double&gt;(clu2Spk2<sp/>-<sp/>clu2Spk1<sp/>+<sp/>1)<sp/>*</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(static_cast&lt;double&gt;(binSizeInRU)<sp/>/<sp/>static_cast&lt;double&gt;(time))</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3356"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::cleanCorrelation(dataType<sp/>clusterId,QValueList&lt;dataType&gt;<sp/>currentClusterList,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cleanProcess){<sp/><sp/></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cleanProcess)<sp/>correlationsInProcess.removeCluster(clusterId);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>autocorrelogram<sp/>separatly<sp/>as<sp/>the<sp/>clusterID<sp/>has<sp/>already<sp/>been<sp/>removed<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/></highlight><highlight class="comment">//the<sp/>list<sp/>of<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/>correlationDict.remove(<ref refid="classPair" kindref="compound">Pair</ref>(static_cast&lt;int&gt;(clusterId),static_cast&lt;int&gt;(clusterId)).toString());<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/></highlight><highlight class="comment">//Gets<sp/>all<sp/>the<sp/>clustersId<sp/>currently<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/></highlight><highlight class="comment">//Remove<sp/>all<sp/>the<sp/>correlations<sp/>link<sp/>to<sp/>clusterId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/>QValueList&lt;dataType&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>currentClusterList.begin();<sp/>iterator<sp/>!=<sp/>currentClusterList.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Search<sp/>pairs<sp/>as<sp/>(clusterId,*iterator)<sp/>where<sp/>clusterId<sp/>&gt;<sp/>*iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>(*iterator,clusterId)<sp/>where<sp/>*iterator<sp/>&gt;<sp/>clusterId<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*iterator<sp/>&lt;=<sp/>clusterId)<sp/>correlationDict.remove(<ref refid="classPair" kindref="compound">Pair</ref>(static_cast&lt;int&gt;(*iterator),static_cast&lt;int&gt;(clusterId)).toString());<sp/><sp/></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>correlationDict.remove(<ref refid="classPair" kindref="compound">Pair</ref>(static_cast&lt;int&gt;(clusterId),static_cast&lt;int&gt;(*iterator)).toString());</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/>mutex.unlock();<sp/></highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::renumberCorrelation(QMap&lt;int,int&gt;&amp;<sp/>clusterIdsOldNew){</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>all<sp/>the<sp/>old<sp/>cluster<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;<sp/>oldClusterIds<sp/>=<sp/>clusterIdsOldNew.keys();</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>oldClusterIds.begin();<sp/>iterator<sp/>!=<sp/>oldClusterIds.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(correlationsInProcess.contains(*iterator)){</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(*iterator,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator2;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator2<sp/>=<sp/>oldClusterIds.at(i);<sp/>iterator2<sp/>!=<sp/>oldClusterIds.end();<sp/>++iterator2){</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Search<sp/>pairs<sp/>as<sp/>(*iterator,*iterator2)<sp/>where<sp/>*iterator<sp/>&gt;<sp/>*iterator2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>(*iterator2,*iterator)<sp/>where<sp/>*iterator2<sp/>&gt;<sp/>*iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*iterator2<sp/>&lt;=<sp/>*iterator){</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QDict&lt;Correlation&gt;*<sp/>dict<sp/>=<sp/>correlationDict.take(<ref refid="classPair" kindref="compound">Pair</ref>(static_cast&lt;int&gt;(*iterator2),static_cast&lt;int&gt;(*iterator)).toString());</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dict<sp/>!=<sp/>0)<sp/><sp/>correlationDict.insert(<ref refid="classPair" kindref="compound">Pair</ref>(clusterIdsOldNew[*iterator2],clusterIdsOldNew[*iterator]).toString(),dict);<sp/></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>QDict&lt;Correlation&gt;*<sp/>dict<sp/>=<sp/>correlationDict.take(<ref refid="classPair" kindref="compound">Pair</ref>(static_cast&lt;int&gt;(*iterator),static_cast&lt;int&gt;(*iterator2)).toString());</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dict<sp/>!=<sp/>0)<sp/>correlationDict.insert(<ref refid="classPair" kindref="compound">Pair</ref>(clusterIdsOldNew[*iterator],clusterIdsOldNew[*iterator2]).toString(),dict);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3407"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Data::findSpikePosition(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,<ref refid="classSortableTable" kindref="compound">SortableTable</ref>&amp;<sp/>spikesOfCluster){</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/>dataType<sp/>clusterNbSpikes<sp/>=<sp/>spikesOfCluster.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>spikeTime(spikesOfCluster,clusterNbSpikes);</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTime<sp/>==<sp/>time)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clusterNbSpikes;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>largeStep<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallStep<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>largeStep;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>i<sp/>&lt;=<sp/>clusterNbSpikes;<sp/>i<sp/>+=<sp/>step){</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>spikeTime(spikesOfCluster,i);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTime<sp/>&lt;<sp/>time)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>-=<sp/>step;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>largeStep)<sp/>step<sp/>=<sp/>smallStep;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Process<sp/>the<sp/>last<sp/>spikes<sp/>separately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>largeStep){</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/>i<sp/>-=<sp/>step;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/>step<sp/>=<sp/>smallStep;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>i<sp/>&lt;=<sp/>clusterNbSpikes;<sp/>i<sp/>+=<sp/>step){</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>spikeTime(spikesOfCluster,i);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTime<sp/>&lt;<sp/>time)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>-=<sp/>step;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/></highlight><highlight class="comment">//loop<sp/>with<sp/>a<sp/>step<sp/>of<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/>i<sp/>-=<sp/>step;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i<sp/>&lt;=<sp/>clusterNbSpikes;<sp/>++i){</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>spikeTime(spikesOfCluster,i);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTime<sp/>&lt;<sp/>time)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Data::duplicate(<ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>&amp;<sp/>spikesOfClusterTemp,ClusterInfoMap*<sp/>&amp;<sp/>clusterInfoMapTemp){</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>mutex<sp/>protect<sp/>spikesByCluster<sp/>and<sp/>clusterInfoMap<sp/>so<sp/>that<sp/>only<sp/>one<sp/>thread<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//access<sp/>them<sp/>at<sp/>the<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/>spikesOfClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>(*spikesByCluster);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap(*clusterInfoMap);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_1e98fcf47bca9ac83f87775ffebeb1d03" kindref="member">Data::createFeatureFile</ref>(QValueList&lt;int&gt;&amp;<sp/>clustersToRecluster,QFile&amp;<sp/>fetFile){</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/>dataType<sp/>reclusteringNbSpikes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>the<sp/>selected<sp/>clusters<sp/>to<sp/>calculate<sp/>the<sp/>total<sp/>number<sp/>of<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clustersToRecluster.begin();<sp/>iterator<sp/>!=<sp/>clustersToRecluster.end();<sp/>++iterator<sp/>){</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>ClusterInfo<sp/>clusterInfo<sp/>=<sp/>(*clusterInfoMap)[static_cast&lt;dataType&gt;(*iterator)];</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>reclusteringNbSpikes<sp/>+=<sp/>clusterInfo.nbSpikes();</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/>reclusteringSpikesByCluster.<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(reclusteringNbSpikes);</highlight><highlight class="comment">//erase<sp/>any<sp/>previous<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/></highlight><highlight class="comment">//Loop<sp/>on<sp/>the<sp/>selected<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clustersToRecluster.begin();<sp/>iterator<sp/>!=<sp/>clustersToRecluster.end();<sp/>++iterator<sp/>){</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/>ClusterInfo<sp/>clusterInfo<sp/>=<sp/>(*clusterInfoMap)[static_cast&lt;dataType&gt;(*iterator)];</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>clusterInfo.firstSpikePosition();</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>clusterInfo.nbSpikes();<sp/></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/>memcpy(&amp;(reclusteringSpikesByCluster)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/>memcpy(&amp;(reclusteringSpikesByCluster)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));<sp/></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/></highlight><highlight class="comment">//Write<sp/>all<sp/>the<sp/>features<sp/>to<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/>QTextStream<sp/>fetStream(&amp;fetFile);</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/>fetStream<sp/>&lt;&lt;nbDimensions&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/></highlight><highlight class="comment">//loop<sp/>on<sp/>all<sp/>the<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>reclusteringNbSpikes;++i){</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>reclusteringSpikesByCluster(1,i);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>on<sp/>the<sp/>features<sp/>of<sp/>the<sp/>current<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>nbDimensions;++j)<sp/>fetStream<sp/>&lt;&lt;<sp/>features(featuresRowIndex,j)&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/>fetStream<sp/>&lt;&lt;<sp/>features(featuresRowIndex,nbDimensions)&lt;&lt;endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_157132ec36631d93d4428301673e057de" kindref="member">Data::integrateReclusteredClusters</ref>(QValueList&lt;int&gt;&amp;<sp/>clustersToRecluster,QValueList&lt;int&gt;&amp;<sp/>reclusteredClusterList,FILE*<sp/>clusterFile){<sp/><sp/></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Replace<sp/>the<sp/>cluster<sp/>ids<sp/>in<sp/>reclusteringSpikesByCluster<sp/>by<sp/>the<sp/>new<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classData_1a2754650b749c5e011f7551cdfb822ef" kindref="member">loadReclusteredClusters</ref>(clusterFile))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>new<sp/>information<sp/>about<sp/>the<sp/>cluster<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>table<sp/>pointed<sp/>by<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>*<sp/>spikesByClusterTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSortableTable" kindref="compound">SortableTable</ref>();</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/>spikesByClusterTemp-&gt;<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(nbSpikes);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>new<sp/>map<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>new<sp/>information<sp/>about<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>ClusterInfoMap*<sp/>clusterInfoMapTemp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClusterInfoMap();</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters<sp/>to<sp/>copy<sp/>the<sp/>unchanged<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>ClusterInfoMap::Iterator<sp/>infoMapIterator;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/>dataType<sp/>upperInsertionIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(infoMapIterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>infoMapIterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++infoMapIterator){</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>infoMapIterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>infoMapIterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>infoMapIterator.key();</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>clustersToRecluster<sp/>does<sp/>not<sp/>contains<sp/>the<sp/>current<sp/>cluster,<sp/>this<sp/>cluster<sp/>is<sp/>let<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>its<sp/>information<sp/>is<sp/>simply<sp/>copy<sp/>as<sp/>is<sp/>from<sp/>spikesByCluster<sp/>to<sp/>spikesByClusterTemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!clustersToRecluster.contains(static_cast&lt;int&gt;(clusterId))){</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>2<sp/>rows<sp/>of<sp/>spikesByCluster<sp/>for<sp/>the<sp/>given<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(1,upperInsertionIndex),</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(1,firstSpikePosition),</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(*spikesByClusterTemp)(2,upperInsertionIndex),</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(*spikesByCluster)(2,firstSpikePosition),</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbSpikesOfCluster<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType));</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Construct<sp/>the<sp/>new<sp/>clusterInfoMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(upperInsertionIndex,nbSpikesOfCluster));</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upperInsertionIndex<sp/>+=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>by<sp/>time<sp/>the<sp/>spikes<sp/>of<sp/>the<sp/>reclustered<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>reclusteringSpikesByCluster.<ref refid="classSortableTable_176a0af93508e5afdb13a14fd8cc690f4" kindref="member">sort</ref>(1);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/>dataType<sp/>reclusteringNbSpikes<sp/>=<sp/>reclusteringSpikesByCluster.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>();</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/>QMap&lt;dataType,dataType&gt;<sp/>clusters;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/>dataType<sp/>max<sp/>=<sp/>reclusteringNbSpikes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Count<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>for<sp/>each<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>max;<sp/>++i){</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>reclusteringSpikesByCluster(2,i);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/>clusters[clusterId]++;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>positions,<sp/>for<sp/>each<sp/>clusterId<sp/>the<sp/>value<sp/>is<sp/>set<sp/>to<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>spike.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>clusters<sp/>will<sp/>sorted<sp/>by<sp/>clusterId<sp/>in<sp/>spikesByClusterTemp.<sp/>Initialize<sp/>clusterInfoMapTemp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>QMap&lt;dataType,dataType&gt;<sp/>positions;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/>QMap&lt;dataType,dataType&gt;::Iterator<sp/>clusterIterator;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>upperInsertionIndex;</highlight><highlight class="comment">//The<sp/>first<sp/>new<sp/>cluster<sp/>will<sp/>start<sp/>after<sp/>all<sp/>the<sp/>clusters<sp/>which<sp/>were<sp/>not<sp/>reclustered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(clusterIterator<sp/>=<sp/>clusters.begin();<sp/>clusterIterator<sp/>!=<sp/>clusters.end();<sp/>++clusterIterator){</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>clusterIterator.key();</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/>reclusteredClusterList.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/>positions[clusterId]<sp/>=<sp/><sp/>index;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/>clusterInfoMapTemp-&gt;insert(clusterId,ClusterInfo(index,clusterIterator.data()));</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/>index<sp/>+=<sp/>clusterIterator.data();</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Fill<sp/>spikesByClusterTemp<sp/>with<sp/>the<sp/>data<sp/>of<sp/>the<sp/>reclustered<sp/>clusters<sp/>sorted<sp/>by<sp/>cluster<sp/>and<sp/>by<sp/>time<sp/>(&lt;=&gt;<sp/>position<sp/>in<sp/>the<sp/>fet<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>max;<sp/>++i){</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>reclusteringSpikesByCluster(2,i);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>position<sp/>=<sp/>positions[clusterId];</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>positionInFet<sp/>=<sp/>reclusteringSpikesByCluster(1,i);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/>(*spikesByClusterTemp)(1,position)<sp/>=<sp/>positionInFet;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/>(*spikesByClusterTemp)(2,position)<sp/>=<sp/>clusterId;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/>positions[clusterId]<sp/>++;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//clear<sp/>reclusteringSpikesByCluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/>reclusteringSpikesByCluster.<ref refid="classSortableTable_18d7a1f98f90aa527436728d18314dd34" kindref="member">setSize</ref>(0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>list<sp/>of<sp/>clusters<sp/>before<sp/>applying<sp/>the<sp/>changes,<sp/>this<sp/>will<sp/>be<sp/>used<sp/>in<sp/>the<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>the<sp/>correlation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/>QValueList&lt;dataType&gt;<sp/>currentClusterList<sp/>=<sp/><ref refid="classData_1279ec9099627b78207e2bb5300c133ec" kindref="member">clusterIds</ref>();</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Deal<sp/>with<sp/>the<sp/>undo<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/>prepareUndo(spikesByClusterTemp,clusterInfoMapTemp);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>0<sp/>have<sp/>been<sp/>recluster<sp/>(very<sp/>unlikely),<sp/>the<sp/>max<sp/>and<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>have<sp/>to<sp/>be<sp/>recalculated.<sp/>If<sp/>minMaxThread<sp/>is<sp/>running,<sp/>the<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//will<sp/>wait<sp/>until<sp/>it<sp/>finishes<sp/>before<sp/>starting<sp/>the<sp/>thread<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clustersToRecluster.contains(0)){</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>minMaxThread<sp/>has<sp/>not<sp/>finish,<sp/>wait<sp/>until<sp/>it<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!minMaxThread-&gt;wait()){};</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>flag<sp/>to<sp/>false<sp/>so<sp/>the<sp/>minMaxThread<sp/>can<sp/>do<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterZeroJustModified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>minMaxThread-&gt;<ref refid="classMinMaxThread_1345538a536a9b2a35308449d8b2086db" kindref="member">setModifiedClusters</ref>(clustersToRecluster);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/>minMaxThread-&gt;start();</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>dimensionChangedUndo.prepend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>the<sp/>waveform<sp/>and<sp/>correlation<sp/>data<sp/>for<sp/>the<sp/>reclustered<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>there<sp/>is<sp/>not<sp/>a<sp/>thread<sp/>working<sp/>with<sp/>them,otherwise<sp/>advice<sp/>the<sp/>thread<sp/>of<sp/>the<sp/>change,by<sp/>updating<sp/>waveformStatus<sp/>and<sp/>correlationsInProcess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>thread<sp/>will<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/>QValueList&lt;int&gt;::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clustersToRecluster.begin();<sp/>iterator<sp/>!=<sp/>clustersToRecluster.end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(waveformStatusMap.contains(*iterator)){</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!waveformStatusMap[*iterator].isInProcess()){</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformDict.remove(QString(</highlight><highlight class="stringliteral">&quot;%1&quot;</highlight><highlight class="normal">).arg(*iterator));</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.remove(*iterator);</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatus<sp/>=<sp/>waveformStatusMap[*iterator];</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>WaveformStatus<sp/>waveformStatusCopy<sp/>=<sp/>WaveformStatus(waveformStatus);</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusCopy.setClusterModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>waveformStatusMap.insert(*iterator,waveformStatusCopy);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!correlationsInProcess.contains(static_cast&lt;dataType&gt;(*iterator)))<sp/>cleanCorrelation(static_cast&lt;dataType&gt;(*iterator),currentClusterList);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.lock();</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/>correlationsInProcess.setClusterModified(static_cast&lt;dataType&gt;(*iterator),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex.unlock();</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight></codeline>
<codeline lineno="3638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classData_1a2754650b749c5e011f7551cdfb822ef" kindref="member">Data::loadReclusteredClusters</ref>(FILE*<sp/>clusterFile){</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Load<sp/>all<sp/>the<sp/>file<sp/>in<sp/>a<sp/>buffer<sp/>then<sp/>read<sp/>dataType<sp/>by<sp/>dataType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>file<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>fseeko(clusterFile<sp/>,<sp/>0<sp/>,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/>lSize<sp/>=<sp/>ftello(clusterFile);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/>rewind(clusterFile);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>first<sp/>line<sp/>contains<sp/>the<sp/>number<sp/>of<sp/>clusters,<sp/>skip<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>following<sp/>line<sp/>(&apos;start&apos;<sp/>will<sp/>point<sp/>to<sp/>the<sp/>second<sp/>line)<sp/>to<sp/>start<sp/>reading<sp/>the<sp/>cluster<sp/>ids.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstLineBufferSize<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>firstLineBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[firstLineBufferSize];</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>fgets(firstLineBuffer,firstLineBufferSize,clusterFile);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]firstLineBuffer;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>ftello(clusterFile);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>to<sp/>contain<sp/>the<sp/>whole<sp/>file<sp/>minus<sp/>the<sp/>first<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[lSize-start];</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>file<sp/>into<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>fread(buffer,1,lSize-start,clusterFile);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Replace<sp/>the<sp/>cluster<sp/>ids<sp/>in<sp/>reclusteringSpikesByCluster<sp/>by<sp/>new<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//(the<sp/>created<sp/>ones<sp/>incremented<sp/>by<sp/>the<sp/>current<sp/>maxId).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>buffer<sp/>is<sp/>read<sp/>and<sp/>each<sp/>dataType<sp/>is<sp/>build<sp/>char<sp/>by<sp/>char<sp/>into<sp/>a<sp/>string.<sp/>When<sp/>the<sp/>char<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//is<sp/>not<sp/>[1-9]<sp/>(&lt;=&gt;<sp/>blank<sp/>space<sp/>or<sp/>a<sp/>new<sp/>line),<sp/>the<sp/>string<sp/>is<sp/>converted<sp/>into<sp/>a<sp/>dataType<sp/>and<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//into<sp/>the<sp/>second<sp/>row<sp/>of<sp/>spikesByClusterTemp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//string<sp/>of<sp/>character<sp/>which<sp/>will<sp/>contains<sp/>the<sp/>current<sp/>seek<sp/>dataType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>dataType<sp/>highestClusterId<sp/>=<sp/>(*spikesByCluster)(2,nbSpikes);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/>dataType<sp/>k<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>clusterID[255];</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><sp/>lSize-start;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>end<sp/>;<sp/>++i<sp/>){</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>buffer[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>clusterID[l++]<sp/>=<sp/>buffer[i];</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusterID[l]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reclusteringSpikesByCluster(2,k++)<sp/>=<sp/>atol(clusterID)<sp/>+<sp/>highestClusterId;</highlight><highlight class="comment">//Warning<sp/>if<sp/>the<sp/>typedef<sp/>dataType<sp/>changes,<sp/>change<sp/>will<sp/>have<sp/>to<sp/>be<sp/>make<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]buffer;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>number<sp/>of<sp/>clusters<sp/>read<sp/>did<sp/>not<sp/>correspond<sp/>to<sp/>the<sp/>number<sp/>of<sp/>spikes<sp/>reclustered,<sp/>there<sp/>is<sp/>a<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(k<sp/>!=<sp/>(reclusteringSpikesByCluster.<ref refid="classArray_1bf8d9f719e657139795c7804422c70fc" kindref="member">nbOfColumns</ref>()<sp/>+<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classData_156c36742dc575c188b320c255edeca4d" kindref="member">Data::getClusterUserInformation</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pGroup,QMap&lt;int,ClusterUserInformation&gt;&amp;<sp/>clusterUserInformationMap)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Iteration<sp/>on<sp/>the<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ClusterInfoMap::Iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator)<sp/>{</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterId<sp/>=<sp/>static_cast&lt;int&gt;(iterator.key());</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>0<sp/>||<sp/>clusterId<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classClusterUserInformation" kindref="compound">ClusterUserInformation</ref><sp/>currentClusterUserInformation<sp/>=<sp/><ref refid="classClusterUserInformation" kindref="compound">ClusterUserInformation</ref>(pGroup,clusterId,iterator.data().getStructure(),iterator.data().getType(),iterator.data().getId(),iterator.data().getQuality(),iterator.data().getNotes());</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clusterUserInformationMap.insert(clusterId,currentClusterUserInformation);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/data.cpp"/>
  </compounddef>
</doxygen>
