<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="tracesprovider_8cpp" kind="file">
    <compoundname>tracesprovider.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes refid="tracesprovider_8h" local="yes">tracesprovider.h</includes>
    <includes local="no">qfile.h</includes>
    <incdepgraph>
      <node id="2491">
        <label>qfile.h</label>
      </node>
      <node id="2484">
        <label>dataprovider.h</label>
        <link refid="dataprovider_8h-source"/>
        <childnode refid="2485" relation="include">
        </childnode>
        <childnode refid="2486" relation="include">
        </childnode>
      </node>
      <node id="2485">
        <label>qobject.h</label>
      </node>
      <node id="2486">
        <label>kurl.h</label>
      </node>
      <node id="2487">
        <label>array.h</label>
        <link refid="array_8h-source"/>
        <childnode refid="2488" relation="include">
        </childnode>
        <childnode refid="2481" relation="include">
        </childnode>
      </node>
      <node id="2490">
        <label>qptrlist.h</label>
      </node>
      <node id="2482">
        <label>fstream</label>
      </node>
      <node id="2480">
        <label>tracesprovider.cpp</label>
        <link refid="tracesprovider.cpp"/>
        <childnode refid="2481" relation="include">
        </childnode>
        <childnode refid="2482" relation="include">
        </childnode>
        <childnode refid="2483" relation="include">
        </childnode>
        <childnode refid="2491" relation="include">
        </childnode>
      </node>
      <node id="2483">
        <label>tracesprovider.h</label>
        <link refid="tracesprovider_8h-source"/>
        <childnode refid="2484" relation="include">
        </childnode>
        <childnode refid="2487" relation="include">
        </childnode>
        <childnode refid="2489" relation="include">
        </childnode>
        <childnode refid="2490" relation="include">
        </childnode>
        <childnode refid="2485" relation="include">
        </childnode>
      </node>
      <node id="2481">
        <label>iostream</label>
      </node>
      <node id="2488">
        <label>cstring</label>
      </node>
      <node id="2489">
        <label>types.h</label>
        <link refid="types_8h-source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="">
      <memberdef kind="define" id="tracesprovider_8cpp_1f115d7bd06a046214188c4ca1044bc62" prot="public" static="no">
        <name>_FILE_OFFSET_BITS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lynn/CMBN/Klusters/klusters/src/tracesprovider.cpp" line="20" bodyfile="/home/lynn/CMBN/Klusters/klusters/src/tracesprovider.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="">
      <memberdef kind="define" id="tracesprovider_8cpp_1f115d7bd06a046214188c4ca1044bc62" prot="public" static="no">
        <name>_FILE_OFFSET_BITS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lynn/CMBN/Klusters/klusters/src/tracesprovider.cpp" line="20" bodyfile="/home/lynn/CMBN/Klusters/klusters/src/tracesprovider.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracesprovider.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Mon<sp/>Mar<sp/>1<sp/>2004</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2004<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan.myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//C<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>_LARGEFILE_SOURCE<sp/>already<sp/>defined<sp/>in<sp/>/usr/include/features.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_FILE_OFFSET_BITS<sp/>64</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//General<sp/>C++<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//include<sp/>files<sp/>for<sp/>the<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tracesprovider.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qfile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="classTracesProvider_1b3f0d4973e33fb3206fb20585ba2fb16" kindref="member">TracesProvider::TracesProvider</ref>(KURL<sp/>fileUrl,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbChannels,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samplingRate,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="classDataProvider" kindref="compound">DataProvider</ref>(fileUrl),nbChannels(nbChannels),resolution(resolution),samplingRate(samplingRate),offset(offset){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>computeRecordingLength();</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">TracesProvider::~TracesProvider(){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;in<sp/>~TracesProvider&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">dataType<sp/><ref refid="classTracesProvider_18c3d8a1470cf4bde0c44c8c5cf610a82" kindref="member">TracesProvider::getNbSamples</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTime,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>endTime,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTimeInRecordingUnits){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/></highlight><highlight class="comment">//Search<sp/>what<sp/>is<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>in<sp/>the<sp/>given<sp/>time<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/></highlight><highlight class="comment">//Convert<sp/>the<sp/>time<sp/>in<sp/>miliseconds<sp/>to<sp/>time<sp/>in<sp/>recording<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="comment">//Convert<sp/>the<sp/>time<sp/>in<sp/>miliseconds<sp/>to<sp/>time<sp/>in<sp/>recording<sp/>units<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/>dataType<sp/>startInRecordingUnits;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/></highlight><highlight class="comment">//startTimeInRecordingUnits<sp/>has<sp/>been<sp/>computed<sp/>in<sp/>a<sp/>previous<sp/>call<sp/>to<sp/>a<sp/>clustersProvider<sp/>browsing<sp/>function.<sp/>It<sp/>has<sp/>to<sp/>be<sp/>used<sp/>insted<sp/>of<sp/>computing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/></highlight><highlight class="comment">//the<sp/>value<sp/>from<sp/>startTime<sp/>because<sp/>of<sp/>the<sp/>rounding<sp/>which<sp/>has<sp/>been<sp/>applied<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startTimeInRecordingUnits<sp/>!=<sp/>0)<sp/>startInRecordingUnits<sp/>=<sp/>startTimeInRecordingUnits;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>startInRecordingUnits<sp/>=<sp/>static_cast&lt;dataType&gt;(startTime<sp/>*<sp/>static_cast&lt;double&gt;(static_cast&lt;double&gt;(samplingRate)<sp/>/<sp/>static_cast&lt;double&gt;(1000)));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/>dataType<sp/>endInRecordingUnits<sp/>=<sp/><sp/>static_cast&lt;dataType&gt;(endTime<sp/>*<sp/>static_cast&lt;double&gt;(static_cast&lt;double&gt;(samplingRate)<sp/>/<sp/>static_cast&lt;double&gt;(1000)));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>caller<sp/>should<sp/>have<sp/>check<sp/>that<sp/>we<sp/>do<sp/>not<sp/>go<sp/>over<sp/>the<sp/>end<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>recording<sp/>starts<sp/>at<sp/>time<sp/>equals<sp/>0<sp/>and<sp/>ends<sp/>at<sp/>length<sp/>of<sp/>the<sp/>file<sp/>minus<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/></highlight><highlight class="comment">//Therefore<sp/>if<sp/>the<sp/>end<sp/>time<sp/>requested<sp/>equals<sp/>the<sp/>length<sp/>of<sp/>the<sp/>file,<sp/>endInRecordingUnits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>diminish<sp/>by<sp/>one<sp/>sample.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endTime<sp/>==<sp/>length)<sp/>endInRecordingUnits--;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/>dataType<sp/>nbSamples<sp/>=<sp/>static_cast&lt;dataType&gt;(endInRecordingUnits<sp/>-<sp/>startInRecordingUnits)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nbSamples;<sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTracesProvider_115a28fc38479728605849e1d8bb4aad9" kindref="member">TracesProvider::requestData</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTime,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>endTime,QObject*<sp/>initiator,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTimeInRecordingUnits){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>retrieveData(startTime,endTime,initiator,startTimeInRecordingUnits);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TracesProvider::retrieveData(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTime,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>endTime,QObject*<sp/>initiator,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startTimeInRecordingUnits){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>data;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>FILE*<sp/>dataFile<sp/>=<sp/>fopen(<ref refid="classDataProvider_12fa94f4ef65e78995b0182cbe9a03b55" kindref="member">fileName</ref>,</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataFile<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//emit<sp/>the<sp/>signal<sp/>with<sp/>an<sp/>empty<sp/>array,<sp/>the<sp/>reciever<sp/>will<sp/>take<sp/>care<sp/>of<sp/>it,<sp/>given<sp/>a<sp/>message<sp/>to<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>data.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(0,0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>emit<sp/><ref refid="classTracesProvider_1a1757f81106426811c405a6437654cf1" kindref="member">dataReady</ref>(data,initiator);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/></highlight><highlight class="comment">//When<sp/>the<sp/>bug<sp/>in<sp/>gcc<sp/>will<sp/>be<sp/>corrected<sp/>for<sp/>the<sp/>64<sp/>bits,<sp/>the<sp/>c++<sp/>code<sp/>will<sp/>be<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/></highlight><highlight class="comment">//[alex@slut]/home/alex/src/sizetest<sp/>&gt;<sp/>./sizetest-2.95.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streamoff)<sp/>=<sp/>8<sp/>bytes<sp/>(64<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streampos)<sp/>=<sp/>8<sp/>bytes<sp/>(64<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>[alex@slut]/home/alex/src/sizetest<sp/>&gt;<sp/>./sizetest-3.2.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streamoff)<sp/>=<sp/>4<sp/>bytes<sp/>(32<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streampos)<sp/>=<sp/>12<sp/>bytes<sp/>(96<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>ifstream<sp/>dataFile;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>//Open<sp/>the<sp/>file<sp/>containing<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>dataFile.open(fileName,ifstream::in|ifstream::binary);</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>if(dataFile.fail()){</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>//emit<sp/>the<sp/>signal<sp/>with<sp/>an<sp/>empty<sp/>array,<sp/>the<sp/>reciever<sp/>will<sp/>take<sp/>care<sp/>of<sp/>it,<sp/>given<sp/>a<sp/>message<sp/>to<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/>data.setSize(0,0);</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/>emit<sp/>dataReady(data,initiator);</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>return;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/></highlight><highlight class="comment">//Search<sp/>what<sp/>is<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>in<sp/>the<sp/>given<sp/>time<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/></highlight><highlight class="comment">//Convert<sp/>the<sp/>time<sp/>in<sp/>miliseconds<sp/>to<sp/>time<sp/>in<sp/>recording<sp/>units<sp/>if<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/>dataType<sp/>startInRecordingUnits;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/></highlight><highlight class="comment">//startTimeInRecordingUnits<sp/>has<sp/>been<sp/>computed<sp/>in<sp/>a<sp/>previous<sp/>call<sp/>to<sp/>a<sp/>clustersProvider<sp/>browsing<sp/>function.<sp/>It<sp/>has<sp/>to<sp/>be<sp/>used<sp/>insted<sp/>of<sp/>computing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/></highlight><highlight class="comment">//the<sp/>value<sp/>from<sp/>startTime<sp/>because<sp/>of<sp/>the<sp/>rounding<sp/>which<sp/>has<sp/>been<sp/>applied<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startTimeInRecordingUnits<sp/>!=<sp/>0)<sp/>startInRecordingUnits<sp/>=<sp/>startTimeInRecordingUnits;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>startInRecordingUnits<sp/>=<sp/>static_cast&lt;dataType&gt;(startTime<sp/>*<sp/>static_cast&lt;double&gt;(static_cast&lt;double&gt;(samplingRate)<sp/>/<sp/>static_cast&lt;double&gt;(1000)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/>dataType<sp/>endInRecordingUnits<sp/>=<sp/><sp/>static_cast&lt;dataType&gt;(endTime<sp/>*<sp/>static_cast&lt;double&gt;(static_cast&lt;double&gt;(samplingRate)<sp/>/<sp/>static_cast&lt;double&gt;(1000)));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>caller<sp/>should<sp/>have<sp/>check<sp/>that<sp/>we<sp/>do<sp/>not<sp/>go<sp/>over<sp/>the<sp/>end<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>recording<sp/>starts<sp/>at<sp/>time<sp/>equals<sp/>0<sp/>and<sp/>ends<sp/>at<sp/>length<sp/>of<sp/>the<sp/>file<sp/>minus<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight><highlight class="comment">//Therefore<sp/>if<sp/>the<sp/>end<sp/>time<sp/>requested<sp/>equals<sp/>the<sp/>length<sp/>of<sp/>the<sp/>file,<sp/>endInRecordingUnits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>diminish<sp/>by<sp/>one<sp/>sample.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endTime<sp/>==<sp/>length)<sp/>endInRecordingUnits--;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/>dataType<sp/>nbSamples<sp/>=<sp/>static_cast&lt;dataType&gt;(endInRecordingUnits<sp/>-<sp/>startInRecordingUnits)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/></highlight><highlight class="comment">//data<sp/>will<sp/>contain<sp/>the<sp/>final<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/>data.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(nbSamples,nbChannels);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/></highlight><highlight class="comment">//Depending<sp/>on<sp/>the<sp/>acquisition<sp/>system<sp/>resolution,<sp/>the<sp/>data<sp/>are<sp/>store<sp/>as<sp/>short<sp/>or<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((resolution<sp/>==<sp/>12)<sp/>|<sp/>(resolution<sp/>==<sp/>14)<sp/>|<sp/>(resolution<sp/>==<sp/>16)){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;short&gt;</ref><sp/>retrieveData(nbSamples,nbChannels);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//go<sp/>to<sp/>the<sp/>startInRecordingUnits<sp/>position<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>off_t<sp/>position<sp/>=<sp/>static_cast&lt;off_t&gt;(static_cast&lt;off_t&gt;(startInRecordingUnits)*<sp/>static_cast&lt;off_t&gt;(nbChannels));<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//C++<sp/>code:<sp/><sp/>dataFile.seekg(static_cast&lt;off_t&gt;(position<sp/>*<sp/>sizeof(short)),ios::beg);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>fseeko(dataFile,static_cast&lt;off_t&gt;(position<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)),SEEK_SET);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>data<sp/>into<sp/>retrieveData.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>off_t<sp/>nbValues<sp/>=<sp/>nbSamples<sp/>*<sp/>nbChannels;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//C++<sp/>code:<sp/>dataFile.read((char*)(&amp;(retrieveData[0])),sizeof(short)<sp/>*<sp/>nbValues);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>off_t<sp/>nbRead<sp/>=<sp/>fread((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;(retrieveData[0])),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">),nbValues,dataFile);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbRead<sp/>!=<sp/>nbValues){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//emit<sp/>the<sp/>signal<sp/>with<sp/>an<sp/>empty<sp/>array,<sp/>the<sp/>reciever<sp/>will<sp/>take<sp/>care<sp/>of<sp/>it,<sp/>given<sp/>a<sp/>message<sp/>to<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>data.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(0,0);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>fclose(dataFile);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>emit<sp/><ref refid="classTracesProvider_1a1757f81106426811c405a6437654cf1" kindref="member">dataReady</ref>(data,initiator);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Apply<sp/>the<sp/>offset<sp/>if<sp/>need<sp/>it,convert<sp/>to<sp/>dataType<sp/>and<sp/>store<sp/>the<sp/>values<sp/>in<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(offset<sp/>!=<sp/>0){<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(off_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbValues;<sp/>++i){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>static_cast&lt;dataType&gt;(retrieveData[i])<sp/>-<sp/>static_cast&lt;dataType&gt;(offset);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(off_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbValues;<sp/>++i){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>static_cast&lt;dataType&gt;(retrieveData[i]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resolution<sp/>==<sp/>32){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;dataType&gt;</ref><sp/>retrieveData(nbSamples,nbChannels);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//go<sp/>to<sp/>the<sp/>startInRecordingUnits<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>off_t<sp/>position<sp/>=<sp/>static_cast&lt;off_t&gt;(static_cast&lt;off_t&gt;(startInRecordingUnits)*<sp/>static_cast&lt;off_t&gt;(nbChannels));<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//C++<sp/>code:<sp/>dataFile.seekg(static_cast&lt;off_t&gt;(position<sp/>*<sp/>sizeof(dataType)),ios::beg);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>fseeko(dataFile,static_cast&lt;off_t&gt;(position<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType)),SEEK_SET);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>data<sp/>into<sp/>retrieveData.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>off_t<sp/>nbValues<sp/>=<sp/>nbSamples<sp/>*<sp/>nbChannels;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//C++<sp/>code:<sp/>dataFile.read((char*)&amp;(retrieveData[0]),sizeof(dataType)<sp/>*<sp/>nbValues);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>off_t<sp/>nbRead<sp/>=<sp/>fread((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;(retrieveData[0])),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataType),nbValues,dataFile);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbRead<sp/>!=<sp/>nbValues){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//emit<sp/>the<sp/>signal<sp/>with<sp/>an<sp/>empty<sp/>array,<sp/>the<sp/>reciever<sp/>will<sp/>take<sp/>care<sp/>of<sp/>it,<sp/>given<sp/>a<sp/>message<sp/>to<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>data.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(0,0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>fclose(dataFile);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>emit<sp/><ref refid="classTracesProvider_1a1757f81106426811c405a6437654cf1" kindref="member">dataReady</ref>(data,initiator);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Apply<sp/>the<sp/>offset<sp/>if<sp/>need<sp/>it<sp/>and<sp/>store<sp/>the<sp/>values<sp/>in<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(offset<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(off_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbValues;<sp/>++i)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>retrieveData[i]<sp/>-<sp/>static_cast&lt;dataType&gt;(offset);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(off_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbValues;<sp/>++i){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>static_cast&lt;dataType&gt;(retrieveData[i]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>data<sp/>have<sp/>been<sp/>retrieve,<sp/>close<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/>fclose(dataFile);</highlight><highlight class="comment">//dataFile.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/></highlight><highlight class="comment">//Send<sp/>the<sp/>information<sp/>to<sp/>the<sp/>receiver.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/>emit<sp/><ref refid="classTracesProvider_1a1757f81106426811c405a6437654cf1" kindref="member">dataReady</ref>(data,initiator);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TracesProvider::computeRecordingLength(){</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/></highlight><highlight class="comment">//When<sp/>the<sp/>bug<sp/>in<sp/>gcc<sp/>will<sp/>be<sp/>corrected<sp/>for<sp/>the<sp/>64<sp/>bits<sp/>the<sp/>c++<sp/>code<sp/>will<sp/>be<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/></highlight><highlight class="comment">//[alex@slut]/home/alex/src/sizetest<sp/>&gt;<sp/>./sizetest-2.95.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streamoff)<sp/>=<sp/>8<sp/>bytes<sp/>(64<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streampos)<sp/>=<sp/>8<sp/>bytes<sp/>(64<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>[alex@slut]/home/alex/src/sizetest<sp/>&gt;<sp/>./sizetest-3.2.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streamoff)<sp/>=<sp/>4<sp/>bytes<sp/>(32<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>sizeof(std::streampos)<sp/>=<sp/>12<sp/>bytes<sp/>(96<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/></highlight><highlight class="comment">/*ifstream<sp/>dataFile;</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>//Open<sp/>the<sp/>file<sp/>containing<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>dataFile.open(fileName,ifstream::in|ifstream::binary);</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>if(dataFile.fail())<sp/>return<sp/>0;<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>//<sp/>get<sp/>the<sp/>length<sp/>of<sp/>the<sp/>file:</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>dataFile.seekg<sp/>(0,<sp/>ios::end);</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>off_t<sp/>fileLength<sp/>=<sp/>dataFile.tellg();</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>dataFile.close();*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(<ref refid="classDataProvider_12fa94f4ef65e78995b0182cbe9a03b55" kindref="member">fileName</ref>,</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>file<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/>fseeko(file,0,SEEK_END);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/>off_t<sp/>fileLength<sp/>=<sp/>ftello(file);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/>fclose(file);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((resolution<sp/>==<sp/>12)<sp/>|<sp/>(resolution<sp/>==<sp/>14)<sp/>|<sp/>(resolution<sp/>==<sp/>16))<sp/>dataSize<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resolution<sp/>==<sp/>32)<sp/>dataSize<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/>length<sp/>=<sp/>static_cast&lt;long<sp/>long&gt;(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;float&gt;(</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileLength<sp/>/<sp/>static_cast&lt;float&gt;(nbChannels<sp/>*<sp/>samplingRate<sp/>*<sp/>dataSize)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>*<sp/>1000</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classTracesProvider_194a5a4cffdc5838999c8b81e22e5f930" kindref="member">TracesProvider::getTotalNbSamples</ref>(){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;long&gt;((length<sp/>*<sp/>samplingRate)<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/tracesprovider.cpp"/>
  </compounddef>
</doxygen>
