<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.1">
  <compounddef id="groupingassistant_8cpp" kind="file">
    <compoundname>groupingassistant.cpp</compoundname>
    <includes refid="groupingassistant_8h" local="yes">groupingassistant.h</includes>
    <includes local="no">qmap.h</includes>
    <includes local="no">qvaluelist.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1196">
        <label>qregion.h</label>
      </node>
      <node id="1198">
        <label>qfile.h</label>
      </node>
      <node id="1189">
        <label>pair.h</label>
        <link refid="pair_8h-source"/>
        <childnode refid="1190" relation="include">
        </childnode>
        <childnode refid="1186" relation="include">
        </childnode>
        <childnode refid="1191" relation="include">
        </childnode>
      </node>
      <node id="1194">
        <label>qvaluelist.h</label>
      </node>
      <node id="1190">
        <label>qstring.h</label>
      </node>
      <node id="1191">
        <label>stdlib.h</label>
      </node>
      <node id="1201">
        <label>kurl.h</label>
      </node>
      <node id="1202">
        <label>stdexcept</label>
      </node>
      <node id="1184">
        <label>array.h</label>
        <link refid="array_8h-source"/>
        <childnode refid="1185" relation="include">
        </childnode>
        <childnode refid="1186" relation="include">
        </childnode>
      </node>
      <node id="1193">
        <label>qptrlist.h</label>
      </node>
      <node id="1182">
        <label>groupingassistant.h</label>
        <link refid="groupingassistant_8h-source"/>
        <childnode refid="1183" relation="include">
        </childnode>
        <childnode refid="1184" relation="include">
        </childnode>
        <childnode refid="1188" relation="include">
        </childnode>
      </node>
      <node id="1187">
        <label>sortabletable.h</label>
        <link refid="sortabletable_8h-source"/>
        <childnode refid="1184" relation="include">
        </childnode>
        <childnode refid="1188" relation="include">
        </childnode>
      </node>
      <node id="1192">
        <label>clusteruserinformation.h</label>
        <link refid="clusteruserinformation_8h-source"/>
      </node>
      <node id="1204">
        <label>vector</label>
      </node>
      <node id="1181">
        <label>groupingassistant.cpp</label>
        <link refid="groupingassistant.cpp"/>
        <childnode refid="1182" relation="include">
        </childnode>
        <childnode refid="1197" relation="include">
        </childnode>
        <childnode refid="1194" relation="include">
        </childnode>
        <childnode refid="1203" relation="include">
        </childnode>
        <childnode refid="1205" relation="include">
        </childnode>
        <childnode refid="1186" relation="include">
        </childnode>
      </node>
      <node id="1203">
        <label>math.h</label>
      </node>
      <node id="1186">
        <label>iostream</label>
      </node>
      <node id="1200">
        <label>qthread.h</label>
      </node>
      <node id="1195">
        <label>qdict.h</label>
      </node>
      <node id="1197">
        <label>qmap.h</label>
      </node>
      <node id="1199">
        <label>qmutex.h</label>
      </node>
      <node id="1205">
        <label>stdio.h</label>
      </node>
      <node id="1185">
        <label>cstring</label>
      </node>
      <node id="1183">
        <label>data.h</label>
        <link refid="data_8h-source"/>
        <childnode refid="1184" relation="include">
        </childnode>
        <childnode refid="1187" relation="include">
        </childnode>
        <childnode refid="1189" relation="include">
        </childnode>
        <childnode refid="1188" relation="include">
        </childnode>
        <childnode refid="1192" relation="include">
        </childnode>
        <childnode refid="1193" relation="include">
        </childnode>
        <childnode refid="1194" relation="include">
        </childnode>
        <childnode refid="1195" relation="include">
        </childnode>
        <childnode refid="1196" relation="include">
        </childnode>
        <childnode refid="1197" relation="include">
        </childnode>
        <childnode refid="1198" relation="include">
        </childnode>
        <childnode refid="1199" relation="include">
        </childnode>
        <childnode refid="1200" relation="include">
        </childnode>
        <childnode refid="1201" relation="include">
        </childnode>
        <childnode refid="1186" relation="include">
        </childnode>
        <childnode refid="1202" relation="include">
        </childnode>
        <childnode refid="1203" relation="include">
        </childnode>
        <childnode refid="1204" relation="include">
        </childnode>
      </node>
      <node id="1188">
        <label>types.h</label>
        <link refid="types_8h-source"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupingassistant.cpp<sp/><sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Mon<sp/>Dec<sp/>22<sp/>2003</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2003<sp/>by<sp/>Lynn<sp/>Hazan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lynn.hazan@myrealbox.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//include<sp/>files<sp/>for<sp/>the<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;groupingassistant.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//Include<sp/>files<sp/>for<sp/>QT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qmap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qvaluelist.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//include<sp/>files<sp/>for<sp/>c/c++<sp/>libraires.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//General<sp/>C++<sp/>include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">GroupingAssistant::GroupingAssistant():existCluster1(false),initIndex(1),haveToStopComputing(false){</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">GroupingAssistant::~GroupingAssistant(){</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>*<sp/><ref refid="classGroupingAssistant_1995b06011b4c35aa90f52c81039f78be" kindref="member">GroupingAssistant::computeMeanProbabilities</ref>(<ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData,QValueList&lt;int&gt;&amp;<sp/>clusterList,QValueList&lt;int&gt;&amp;<sp/>computedClusterList,QValueList&lt;int&gt;&amp;<sp/>ignoreClusterIndex){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>*<sp/>probabilities;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>(0,0);<sp/></highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>the<sp/>probabilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>probabilities<sp/>=<sp/>computeProbabilities(clusteringData,clusterList,computedClusterList,ignoreClusterIndex);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>*<sp/>errorMatrix<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>(static_cast&lt;long&gt;(clusterList.size()),static_cast&lt;long&gt;(clusterList.size()));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>errorMatrix-&gt;<ref refid="classArray_15720d22bba044d2ad5d83ada79243b54" kindref="member">fillWithZeros</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>&quot;Error<sp/>matrix&quot;<sp/>=<sp/>mean<sp/>probabilies<sp/>that<sp/>spike<sp/>of<sp/>cluster<sp/>c1<sp/>actually<sp/>belongs<sp/>to<sp/>c2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbClusters<sp/>=<sp/>clusterList.size();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classData_1_1Iterator" kindref="compound">Data::ClusterInfoMap::Iterator</ref><sp/>iterator;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex<sp/>=<sp/>initIndex;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.<ref refid="classData_1_1Iterator_1ef9791df9685b6420a23b39f5d47bd37" kindref="member">data</ref>().firstSpikePosition();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.<ref refid="classData_1_1Iterator_1ef9791df9685b6420a23b39f5d47bd37" kindref="member">data</ref>().<ref refid="classData_150edd72327d6d93ea11321eac6fab062" kindref="member">nbSpikes</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>current<sp/>cluster<sp/>has<sp/>been<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignoreClusterIndex.contains(clusterIndex)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>++clusterIndex;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex2<sp/>=<sp/>initIndex;<sp/>clusterIndex2<sp/>&lt;=<sp/>nbClusters;<sp/>++clusterIndex2){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>current<sp/>cluster<sp/>has<sp/>been<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignoreClusterIndex.contains(clusterIndex2)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Accumulate<sp/>sums<sp/>for<sp/>mean<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*probabilities)(featuresRowIndex,clusterIndex2);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>(*errorMatrix)(clusterIndex,clusterIndex2)<sp/>=<sp/>sum<sp/>/<sp/>nbSpikesOfCluster;<sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/>++clusterIndex;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Put<sp/>zeros<sp/>on<sp/>the<sp/>diagonal<sp/>of<sp/>errorMatrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex<sp/>=<sp/>1;<sp/>clusterIndex<sp/>&lt;=<sp/>nbClusters;<sp/>++clusterIndex){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>(*errorMatrix)(clusterIndex,clusterIndex)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>spikesByCluster;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clusterInfoMap;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>probabilities;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errorMatrix;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>*<sp/>GroupingAssistant::computeProbabilities(<ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData,QValueList&lt;int&gt;&amp;<sp/>clusterList,QValueList&lt;int&gt;&amp;<sp/>computedClusterList,QValueList&lt;int&gt;&amp;<sp/>ignoreClusterIndex){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/>dataType<sp/>nbSpikes<sp/>=<sp/>clusteringData.<ref refid="classData_1aac30bc3fd327305de42eec090f17050" kindref="member">totalNbOfSpikes</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="comment">//The<sp/>number<sp/>of<sp/>dimensions<sp/>includes<sp/>the<sp/>number<sp/>of<sp/>PCA<sp/>by<sp/>channels<sp/>and<sp/>the<sp/>any<sp/>additionnal<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/></highlight><highlight class="comment">//like<sp/>the<sp/>Valley<sp/>to<sp/>peak<sp/>amplitude,the<sp/>peak<sp/>to<sp/>valley<sp/>amplitude,the<sp/>max<sp/>of<sp/>the<sp/>to<sp/>previous<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/></highlight><highlight class="comment">//the<sp/>width<sp/>of<sp/>the<sp/>spike,the<sp/>time<sp/>of<sp/>the<sp/>spike.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/></highlight><highlight class="comment">//Only<sp/>the<sp/>PCs<sp/>dimensions<sp/>are<sp/>taken<sp/>into<sp/>account.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbDimensions<sp/>=<sp/>clusteringData.<ref refid="classData_1dacde160d692f51eb79b254a24f99d06" kindref="member">totalNbOfPCAs</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/>spikesByCluster;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/>clusterInfoMap;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/></highlight><highlight class="comment">//Obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>internal<sp/>variables<sp/>of<sp/>data<sp/>storing<sp/>the<sp/>information<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/></highlight><highlight class="comment">//A<sp/>copy<sp/>is<sp/>needed<sp/>because<sp/>the<sp/>clusters<sp/>can<sp/>changed<sp/>while<sp/>the<sp/>calculation<sp/>is<sp/>in<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/>clusteringData.<ref refid="classData_16f98fa7d29a02577122299e390c68728" kindref="member">duplicate</ref>(spikesByCluster,clusterInfoMap);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight><highlight class="comment">//Cluster<sp/>0<sp/>is<sp/>not<sp/>compute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterInfoMap-&gt;contains(0))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>clusterInfoMap-&gt;remove(0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbClusters<sp/>=<sp/>clusterInfoMap-&gt;count();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>(0,0);</highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>means<sp/>and<sp/>the<sp/>covariances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/>meanCovarianceComputation(nbClusters,nbDimensions,nbSpikes,clusteringData,ignoreClusterIndex);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/></highlight><highlight class="comment">//logP(spike,clusterIndex)<sp/>=<sp/>minus<sp/>log<sp/>likelihood<sp/>for<sp/>spike<sp/>spike<sp/>in<sp/>cluster<sp/>clusterIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//exp(logP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>*<sp/>probabilities<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>(nbSpikes,nbClusters);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/>probabilities-&gt;<ref refid="classArray_15720d22bba044d2ad5d83ada79243b54" kindref="member">fillWithZeros</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>piTerm<sp/>=<sp/>static_cast&lt;double&gt;(log(2<sp/>*<sp/>M_PI))<sp/>*<sp/>nbDimensions<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><ref refid="classData_1_1Iterator" kindref="compound">Data::ClusterInfoMap::Iterator</ref><sp/>iterator;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster1Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key<sp/>(clusterId)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){<sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>probabilities;</highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>dataType<sp/>clusterId<sp/>=<sp/>iterator.key();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>cluster1<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(clusterId<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>existCluster1<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>cluster1Index<sp/>=<sp/>clusterIndex;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>current<sp/>cluster<sp/>to<sp/>the<sp/>list<sp/>of<sp/>analysed<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>clusterList.append(static_cast&lt;int&gt;(clusterId));<sp/></highlight><highlight class="comment">//cluster<sp/>0<sp/>is<sp/>ignore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ignore<sp/>the<sp/>clusters<sp/>which<sp/>do<sp/>not<sp/>have<sp/>enough<sp/>spikes<sp/>or<sp/>the<sp/>cluster<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignoreClusterIndex.contains(clusterIndex)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>clusterIndex++;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>probabilities;</highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>cholesky<sp/>decomposition<sp/>for<sp/>the<sp/>current<sp/>cluster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref><sp/>choleskyDecomposition;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>choleskyDecomposition.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(nbDimensions,nbDimensions);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cholesky(choleskyDecomposition,nbDimensions,clusterIndex)){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>cholesky<sp/>returns<sp/>1,<sp/>it<sp/>means<sp/>the<sp/>matrix<sp/>is<sp/>not<sp/>positive<sp/>definite.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>the<sp/>cluster<sp/>is<sp/>not<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>ignoreClusterIndex.append(clusterIndex);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>clusterIndex++;<sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>current<sp/>cluster<sp/>to<sp/>the<sp/>list<sp/>of<sp/>computed<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>computedClusterList.append(static_cast&lt;int&gt;(clusterId));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logRootDet<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>log<sp/>of<sp/>square<sp/>root<sp/>of<sp/>covariance<sp/>determinant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//logRootDet<sp/>is<sp/>given<sp/>by<sp/>log<sp/>of<sp/>product<sp/>of<sp/>diagonal<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i&lt;=<sp/>nbDimensions;++i)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>logRootDet<sp/>+=<sp/>static_cast&lt;double&gt;(log(static_cast&lt;double&gt;(choleskyDecomposition(i,i))));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>static_cast&lt;double&gt;(log(static_cast&lt;double&gt;(static_cast&lt;double&gt;(nbSpikesOfCluster)/static_cast&lt;double&gt;(nbSpikes))));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logTerm<sp/>=<sp/>logRootDet<sp/>-<sp/>weight<sp/>+<sp/>piTerm;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref><sp/>dataMinusMean;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>dataMinusMean.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(1,nbDimensions);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref><sp/>root;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>root.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(1,nbDimensions);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>root.<ref refid="classArray_15720d22bba044d2ad5d83ada79243b54" kindref="member">fillWithZeros</ref>();<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classData_1_1Iterator" kindref="compound">Data::ClusterInfoMap::Iterator</ref><sp/>iterator2;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator2<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator2<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator2){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>probabilities;</highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator2.<ref refid="classData_1_1Iterator_1ef9791df9685b6420a23b39f5d47bd37" kindref="member">data</ref>().firstSpikePosition();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>iterator2.<ref refid="classData_1_1Iterator_1ef9791df9685b6420a23b39f5d47bd37" kindref="member">data</ref>().<ref refid="classData_150edd72327d6d93ea11321eac6fab062" kindref="member">nbSpikes</ref>();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>current<sp/>cluster<sp/>has<sp/>been<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignoreClusterIndex.contains(clusterIndex2)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>++clusterIndex2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>data<sp/>minus<sp/>cluster<sp/>mean.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbDimensions;++i){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>clusteringData.<ref refid="classData_13f4913eeea737bea5bbc7a9914a2ff11" kindref="member">features</ref>(featuresRowIndex,i)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>means(clusterIndex,i);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>root<sp/>vector<sp/>-<sp/>by<sp/>choleskyDecomposition*root<sp/>=<sp/>dataMinusMean.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=<sp/>i-1;<sp/>j<sp/>&gt;=<sp/>1;--j)<sp/>sum<sp/>-=<sp/>choleskyDecomposition(i,j)<sp/>*<sp/>root(1,j);<sp/></highlight><highlight class="comment">//<sp/>j&lt;i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>root(1,i)<sp/>=<sp/>sum<sp/>/<sp/>choleskyDecomposition(i,i);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Compute<sp/>Mahalanobis<sp/>distance<sp/>of<sp/>point<sp/>from<sp/>cluster<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mahal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nbDimensions;++i)<sp/>mahal<sp/>+=<sp/>root(1,i)<sp/>*<sp/>root(1,i);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>(*probabilities)(featuresRowIndex,clusterIndex)<sp/>=</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(exp(-<sp/>static_cast&lt;double&gt;(mahal/2<sp/>+<sp/>logTerm)));<sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/>++clusterIndex2;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>++clusterIndex;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>cluster<sp/>1<sp/>does<sp/>not<sp/>exist,<sp/>add<sp/>it<sp/>to<sp/>the<sp/>matrix<sp/>of<sp/>probabilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!existCluster1){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>*<sp/>probabilitiesTmp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>(nbSpikes,nbClusters<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>probabilitiesTmp-&gt;<ref refid="classArray_15720d22bba044d2ad5d83ada79243b54" kindref="member">fillWithZeros</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//probabilitiesTmp-&gt;copy(*probabilities,1,1,nbClusters<sp/>*<sp/>nbSpikes,1,2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>probabilitiesTmp-&gt;copyAndPrependColumn(*probabilities);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>probabilities;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>probabilities<sp/>=<sp/>probabilitiesTmp;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>clusterList.prepend(1);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>computedClusterList.prepend(1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(ignoreClusterIndex.size());++i)<sp/>ignoreClusterIndex[i]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>nbClusters<sp/>++;<sp/></highlight><highlight class="comment">//The<sp/>number<sp/>of<sp/>cluster<sp/>is<sp/>now<sp/>incremented<sp/>by<sp/>the<sp/>cluster<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>initIndex<sp/>=<sp/>2;</highlight><highlight class="comment">//skip<sp/>cluster<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/>clusterIndex<sp/>=<sp/>initIndex;<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>probabilities;</highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>what<sp/>is<sp/>return<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.data().firstSpikePosition();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>iterator.data().nbSpikes();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>current<sp/>cluster<sp/>has<sp/>been<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignoreClusterIndex.contains(clusterIndex)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>++clusterIndex;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex2<sp/>=<sp/>initIndex;<sp/>clusterIndex2<sp/>&lt;=<sp/>nbClusters;<sp/>++clusterIndex2)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*probabilities)(featuresRowIndex,clusterIndex2);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>any<sp/>spikes<sp/>have<sp/>all<sp/>probabilities<sp/>equal<sp/>to<sp/>zero,<sp/>set<sp/>them<sp/>to<sp/>cluster<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sum<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>(*probabilities)(featuresRowIndex,cluster1Index)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Normalize<sp/>the<sp/>probabilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex2<sp/>=<sp/>initIndex;<sp/>clusterIndex2<sp/>&lt;=<sp/>nbClusters;<sp/>++clusterIndex2)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>(*probabilities)(featuresRowIndex,clusterIndex2)<sp/>/=<sp/>sum;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>++clusterIndex;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>probabilities;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GroupingAssistant::cholesky(<ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref>&amp;<sp/>out,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbDimensions,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex){</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;i<sp/>&lt;=<sp/>nbDimensions;++i){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;j<sp/>&lt;=<sp/>nbDimensions;++j){<sp/><sp/></highlight><highlight class="comment">//<sp/>j&gt;=i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>covariances(clusterIndex,(i<sp/>-<sp/>1)<sp/>*<sp/>nbDimensions<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>i<sp/>-<sp/>1;k<sp/>&gt;=<sp/>1;--k)<sp/>sum<sp/>-=<sp/>out(i,k)<sp/>*<sp/>out(j,k);<sp/></highlight><highlight class="comment">//<sp/>i,j<sp/>&gt;=<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==j){</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sum<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);<sp/></highlight><highlight class="comment">//<sp/>Cholesky<sp/>decomposition<sp/>has<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out(i,i)<sp/>=<sp/>static_cast&lt;double&gt;(sqrt(static_cast&lt;double&gt;(sum)));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out(j,i)<sp/>=<sp/>sum/out(i,i);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>sucess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GroupingAssistant::meanCovarianceComputation(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbClusters,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbDimensions,dataType<sp/>nbSpikes,<ref refid="classData" kindref="compound">Data</ref>&amp;<sp/>clusteringData,QValueList&lt;int&gt;&amp;<sp/>ignoreClusterIndex){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//initialize<sp/>dataMinusMean,means<sp/>and<sp/>covariances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;double&gt;</ref><sp/>dataMinusMean;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>dataMinusMean.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(1,nbDimensions);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>means.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(nbClusters,nbDimensions);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>means.<ref refid="classArray_15720d22bba044d2ad5d83ada79243b54" kindref="member">fillWithZeros</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>covariances.<ref refid="classArray_109210c530a317d5c6d6f8006d2df55e6" kindref="member">setSize</ref>(nbClusters,nbDimensions<sp/>*<sp/>nbDimensions);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>covariances.<ref refid="classArray_15720d22bba044d2ad5d83ada79243b54" kindref="member">fillWithZeros</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><ref refid="classData_1_1Iterator" kindref="compound">Data::ClusterInfoMap::Iterator</ref><sp/>iterator;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clusterIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/></highlight><highlight class="comment">//NB:<sp/>the<sp/>iterator<sp/>iterates<sp/>on<sp/>the<sp/>items<sp/>sorted<sp/>by<sp/>their<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>=<sp/>clusterInfoMap-&gt;begin();<sp/>iterator<sp/>!=<sp/>clusterInfoMap-&gt;end();<sp/>++iterator){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haveToStopComputing)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight><highlight class="comment">//We<sp/>do<sp/>not<sp/>care<sp/>about<sp/>the<sp/>result<sp/>as<sp/>it<sp/>will<sp/>not<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>dataType<sp/>firstSpikePosition<sp/>=<sp/>iterator.<ref refid="classData_1_1Iterator_1ef9791df9685b6420a23b39f5d47bd37" kindref="member">data</ref>().firstSpikePosition();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>dataType<sp/>nbSpikesOfCluster<sp/>=<sp/>iterator.<ref refid="classData_1_1Iterator_1ef9791df9685b6420a23b39f5d47bd37" kindref="member">data</ref>().<ref refid="classData_150edd72327d6d93ea11321eac6fab062" kindref="member">nbSpikes</ref>();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>dataType<sp/>lastPosition<sp/>=<sp/><sp/>firstSpikePosition<sp/>+<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>a<sp/>cluster<sp/>as<sp/>to<sp/>be<sp/>ignore<sp/>&lt;=&gt;<sp/>not<sp/>enough<sp/>spikes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbSpikesOfCluster<sp/>&lt;=<sp/>nbDimensions){</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>ignoreClusterIndex.append(clusterIndex);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>ignore<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ignore<sp/>&amp;&amp;<sp/>!haveToStopComputing){</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>means.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Accumulate<sp/>sums<sp/>for<sp/>mean<sp/>caculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;j<sp/>&lt;=<sp/>nbDimensions;++j){</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>means(clusterIndex,j)<sp/>+=<sp/>static_cast&lt;double&gt;(clusteringData.<ref refid="classData_13f4913eeea737bea5bbc7a9914a2ff11" kindref="member">features</ref>(featuresRowIndex,j));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;j<sp/>&lt;=<sp/>nbDimensions;++j){</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>means(clusterIndex,j)<sp/>/=<sp/>nbSpikesOfCluster;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>covariances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataType<sp/>i<sp/>=<sp/>firstSpikePosition;<sp/>i<sp/>&lt;<sp/>lastPosition;++i){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>dataType<sp/>featuresRowIndex<sp/>=<sp/>(*spikesByCluster)(1,i);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>distance<sp/>from<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;j<sp/>&lt;=<sp/>nbDimensions;++j){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dataMinusMean(1,j)<sp/>=<sp/>(static_cast&lt;double&gt;(clusteringData.<ref refid="classData_13f4913eeea737bea5bbc7a9914a2ff11" kindref="member">features</ref>(featuresRowIndex,j))</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>means(clusterIndex,j));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;i<sp/>&lt;=<sp/>nbDimensions;++i){</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;j<sp/>&lt;=<sp/>nbDimensions;++j)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>covariances(clusterIndex,(i<sp/>-<sp/>1)<sp/>*<sp/>nbDimensions<sp/>+<sp/>j)<sp/>+=<sp/>dataMinusMean(1,i)<sp/>*<sp/>dataMinusMean(1,j);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;i<sp/>&lt;=<sp/>nbDimensions;++i){</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;j<sp/>&lt;=<sp/>nbDimensions;++j){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>covariances(clusterIndex,(i<sp/>-<sp/>1)<sp/>*<sp/>nbDimensions<sp/>+<sp/>j)<sp/>/=<sp/>(nbSpikesOfCluster<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>++clusterIndex;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lynn/CMBN/Klusters/klusters/src/groupingassistant.cpp"/>
  </compounddef>
</doxygen>
